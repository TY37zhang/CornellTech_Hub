
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CourseSchedule
 * 
 */
export type CourseSchedule = $Result.DefaultSelection<Prisma.$CourseSchedulePayload>
/**
 * Model CoursePlanner
 * 
 */
export type CoursePlanner = $Result.DefaultSelection<Prisma.$CoursePlannerPayload>
/**
 * Model ForumCategory
 * 
 */
export type ForumCategory = $Result.DefaultSelection<Prisma.$ForumCategoryPayload>
/**
 * Model ForumPost
 * 
 */
export type ForumPost = $Result.DefaultSelection<Prisma.$ForumPostPayload>
/**
 * Model ForumComment
 * 
 */
export type ForumComment = $Result.DefaultSelection<Prisma.$ForumCommentPayload>
/**
 * Model ForumLike
 * 
 */
export type ForumLike = $Result.DefaultSelection<Prisma.$ForumLikePayload>
/**
 * Model ForumPostTag
 * 
 */
export type ForumPostTag = $Result.DefaultSelection<Prisma.$ForumPostTagPayload>
/**
 * Model ForumView
 * 
 */
export type ForumView = $Result.DefaultSelection<Prisma.$ForumViewPayload>
/**
 * Model ForumSaved
 * 
 */
export type ForumSaved = $Result.DefaultSelection<Prisma.$ForumSavedPayload>
/**
 * Model ForumNotificationPreference
 * 
 */
export type ForumNotificationPreference = $Result.DefaultSelection<Prisma.$ForumNotificationPreferencePayload>
/**
 * Model CourseCategory
 * 
 */
export type CourseCategory = $Result.DefaultSelection<Prisma.$CourseCategoryPayload>
/**
 * Model CourseCategoryJunction
 * 
 */
export type CourseCategoryJunction = $Result.DefaultSelection<Prisma.$CourseCategoryJunctionPayload>
/**
 * Model course_reviews
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type course_reviews = $Result.DefaultSelection<Prisma.$course_reviewsPayload>
/**
 * Model marketplace_items
 * 
 */
export type marketplace_items = $Result.DefaultSelection<Prisma.$marketplace_itemsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const vote_action: {
  like: 'like',
  dislike: 'dislike'
};

export type vote_action = (typeof vote_action)[keyof typeof vote_action]

}

export type vote_action = $Enums.vote_action

export const vote_action: typeof $Enums.vote_action

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Courses
 * const courses = await prisma.course.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Courses
   * const courses = await prisma.course.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseSchedule`: Exposes CRUD operations for the **CourseSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseSchedules
    * const courseSchedules = await prisma.courseSchedule.findMany()
    * ```
    */
  get courseSchedule(): Prisma.CourseScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coursePlanner`: Exposes CRUD operations for the **CoursePlanner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoursePlanners
    * const coursePlanners = await prisma.coursePlanner.findMany()
    * ```
    */
  get coursePlanner(): Prisma.CoursePlannerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumCategory`: Exposes CRUD operations for the **ForumCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumCategories
    * const forumCategories = await prisma.forumCategory.findMany()
    * ```
    */
  get forumCategory(): Prisma.ForumCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumPost`: Exposes CRUD operations for the **ForumPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumPosts
    * const forumPosts = await prisma.forumPost.findMany()
    * ```
    */
  get forumPost(): Prisma.ForumPostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumComment`: Exposes CRUD operations for the **ForumComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumComments
    * const forumComments = await prisma.forumComment.findMany()
    * ```
    */
  get forumComment(): Prisma.ForumCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumLike`: Exposes CRUD operations for the **ForumLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumLikes
    * const forumLikes = await prisma.forumLike.findMany()
    * ```
    */
  get forumLike(): Prisma.ForumLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumPostTag`: Exposes CRUD operations for the **ForumPostTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumPostTags
    * const forumPostTags = await prisma.forumPostTag.findMany()
    * ```
    */
  get forumPostTag(): Prisma.ForumPostTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumView`: Exposes CRUD operations for the **ForumView** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumViews
    * const forumViews = await prisma.forumView.findMany()
    * ```
    */
  get forumView(): Prisma.ForumViewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumSaved`: Exposes CRUD operations for the **ForumSaved** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumSaveds
    * const forumSaveds = await prisma.forumSaved.findMany()
    * ```
    */
  get forumSaved(): Prisma.ForumSavedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumNotificationPreference`: Exposes CRUD operations for the **ForumNotificationPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumNotificationPreferences
    * const forumNotificationPreferences = await prisma.forumNotificationPreference.findMany()
    * ```
    */
  get forumNotificationPreference(): Prisma.ForumNotificationPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseCategory`: Exposes CRUD operations for the **CourseCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseCategories
    * const courseCategories = await prisma.courseCategory.findMany()
    * ```
    */
  get courseCategory(): Prisma.CourseCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseCategoryJunction`: Exposes CRUD operations for the **CourseCategoryJunction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseCategoryJunctions
    * const courseCategoryJunctions = await prisma.courseCategoryJunction.findMany()
    * ```
    */
  get courseCategoryJunction(): Prisma.CourseCategoryJunctionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course_reviews`: Exposes CRUD operations for the **course_reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Course_reviews
    * const course_reviews = await prisma.course_reviews.findMany()
    * ```
    */
  get course_reviews(): Prisma.course_reviewsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketplace_items`: Exposes CRUD operations for the **marketplace_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Marketplace_items
    * const marketplace_items = await prisma.marketplace_items.findMany()
    * ```
    */
  get marketplace_items(): Prisma.marketplace_itemsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Course: 'Course',
    User: 'User',
    CourseSchedule: 'CourseSchedule',
    CoursePlanner: 'CoursePlanner',
    ForumCategory: 'ForumCategory',
    ForumPost: 'ForumPost',
    ForumComment: 'ForumComment',
    ForumLike: 'ForumLike',
    ForumPostTag: 'ForumPostTag',
    ForumView: 'ForumView',
    ForumSaved: 'ForumSaved',
    ForumNotificationPreference: 'ForumNotificationPreference',
    CourseCategory: 'CourseCategory',
    CourseCategoryJunction: 'CourseCategoryJunction',
    course_reviews: 'course_reviews',
    marketplace_items: 'marketplace_items'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "course" | "user" | "courseSchedule" | "coursePlanner" | "forumCategory" | "forumPost" | "forumComment" | "forumLike" | "forumPostTag" | "forumView" | "forumSaved" | "forumNotificationPreference" | "courseCategory" | "courseCategoryJunction" | "course_reviews" | "marketplace_items"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CourseSchedule: {
        payload: Prisma.$CourseSchedulePayload<ExtArgs>
        fields: Prisma.CourseScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          findFirst: {
            args: Prisma.CourseScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          findMany: {
            args: Prisma.CourseScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>[]
          }
          create: {
            args: Prisma.CourseScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          createMany: {
            args: Prisma.CourseScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>[]
          }
          delete: {
            args: Prisma.CourseScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          update: {
            args: Prisma.CourseScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          deleteMany: {
            args: Prisma.CourseScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>[]
          }
          upsert: {
            args: Prisma.CourseScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          aggregate: {
            args: Prisma.CourseScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseSchedule>
          }
          groupBy: {
            args: Prisma.CourseScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<CourseScheduleCountAggregateOutputType> | number
          }
        }
      }
      CoursePlanner: {
        payload: Prisma.$CoursePlannerPayload<ExtArgs>
        fields: Prisma.CoursePlannerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoursePlannerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoursePlannerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>
          }
          findFirst: {
            args: Prisma.CoursePlannerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoursePlannerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>
          }
          findMany: {
            args: Prisma.CoursePlannerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>[]
          }
          create: {
            args: Prisma.CoursePlannerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>
          }
          createMany: {
            args: Prisma.CoursePlannerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoursePlannerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>[]
          }
          delete: {
            args: Prisma.CoursePlannerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>
          }
          update: {
            args: Prisma.CoursePlannerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>
          }
          deleteMany: {
            args: Prisma.CoursePlannerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoursePlannerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoursePlannerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>[]
          }
          upsert: {
            args: Prisma.CoursePlannerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePlannerPayload>
          }
          aggregate: {
            args: Prisma.CoursePlannerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoursePlanner>
          }
          groupBy: {
            args: Prisma.CoursePlannerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursePlannerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoursePlannerCountArgs<ExtArgs>
            result: $Utils.Optional<CoursePlannerCountAggregateOutputType> | number
          }
        }
      }
      ForumCategory: {
        payload: Prisma.$ForumCategoryPayload<ExtArgs>
        fields: Prisma.ForumCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>
          }
          findFirst: {
            args: Prisma.ForumCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>
          }
          findMany: {
            args: Prisma.ForumCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>[]
          }
          create: {
            args: Prisma.ForumCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>
          }
          createMany: {
            args: Prisma.ForumCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>[]
          }
          delete: {
            args: Prisma.ForumCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>
          }
          update: {
            args: Prisma.ForumCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ForumCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ForumCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCategoryPayload>
          }
          aggregate: {
            args: Prisma.ForumCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumCategory>
          }
          groupBy: {
            args: Prisma.ForumCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ForumCategoryCountAggregateOutputType> | number
          }
        }
      }
      ForumPost: {
        payload: Prisma.$ForumPostPayload<ExtArgs>
        fields: Prisma.ForumPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          findFirst: {
            args: Prisma.ForumPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          findMany: {
            args: Prisma.ForumPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>[]
          }
          create: {
            args: Prisma.ForumPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          createMany: {
            args: Prisma.ForumPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumPostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>[]
          }
          delete: {
            args: Prisma.ForumPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          update: {
            args: Prisma.ForumPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          deleteMany: {
            args: Prisma.ForumPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumPostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>[]
          }
          upsert: {
            args: Prisma.ForumPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          aggregate: {
            args: Prisma.ForumPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumPost>
          }
          groupBy: {
            args: Prisma.ForumPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumPostCountArgs<ExtArgs>
            result: $Utils.Optional<ForumPostCountAggregateOutputType> | number
          }
        }
      }
      ForumComment: {
        payload: Prisma.$ForumCommentPayload<ExtArgs>
        fields: Prisma.ForumCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>
          }
          findFirst: {
            args: Prisma.ForumCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>
          }
          findMany: {
            args: Prisma.ForumCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>[]
          }
          create: {
            args: Prisma.ForumCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>
          }
          createMany: {
            args: Prisma.ForumCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>[]
          }
          delete: {
            args: Prisma.ForumCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>
          }
          update: {
            args: Prisma.ForumCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>
          }
          deleteMany: {
            args: Prisma.ForumCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>[]
          }
          upsert: {
            args: Prisma.ForumCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumCommentPayload>
          }
          aggregate: {
            args: Prisma.ForumCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumComment>
          }
          groupBy: {
            args: Prisma.ForumCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumCommentCountArgs<ExtArgs>
            result: $Utils.Optional<ForumCommentCountAggregateOutputType> | number
          }
        }
      }
      ForumLike: {
        payload: Prisma.$ForumLikePayload<ExtArgs>
        fields: Prisma.ForumLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>
          }
          findFirst: {
            args: Prisma.ForumLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>
          }
          findMany: {
            args: Prisma.ForumLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>[]
          }
          create: {
            args: Prisma.ForumLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>
          }
          createMany: {
            args: Prisma.ForumLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>[]
          }
          delete: {
            args: Prisma.ForumLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>
          }
          update: {
            args: Prisma.ForumLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>
          }
          deleteMany: {
            args: Prisma.ForumLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>[]
          }
          upsert: {
            args: Prisma.ForumLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumLikePayload>
          }
          aggregate: {
            args: Prisma.ForumLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumLike>
          }
          groupBy: {
            args: Prisma.ForumLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumLikeCountArgs<ExtArgs>
            result: $Utils.Optional<ForumLikeCountAggregateOutputType> | number
          }
        }
      }
      ForumPostTag: {
        payload: Prisma.$ForumPostTagPayload<ExtArgs>
        fields: Prisma.ForumPostTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumPostTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumPostTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>
          }
          findFirst: {
            args: Prisma.ForumPostTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumPostTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>
          }
          findMany: {
            args: Prisma.ForumPostTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>[]
          }
          create: {
            args: Prisma.ForumPostTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>
          }
          createMany: {
            args: Prisma.ForumPostTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumPostTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>[]
          }
          delete: {
            args: Prisma.ForumPostTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>
          }
          update: {
            args: Prisma.ForumPostTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>
          }
          deleteMany: {
            args: Prisma.ForumPostTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumPostTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumPostTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>[]
          }
          upsert: {
            args: Prisma.ForumPostTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostTagPayload>
          }
          aggregate: {
            args: Prisma.ForumPostTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumPostTag>
          }
          groupBy: {
            args: Prisma.ForumPostTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumPostTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumPostTagCountArgs<ExtArgs>
            result: $Utils.Optional<ForumPostTagCountAggregateOutputType> | number
          }
        }
      }
      ForumView: {
        payload: Prisma.$ForumViewPayload<ExtArgs>
        fields: Prisma.ForumViewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumViewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumViewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>
          }
          findFirst: {
            args: Prisma.ForumViewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumViewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>
          }
          findMany: {
            args: Prisma.ForumViewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>[]
          }
          create: {
            args: Prisma.ForumViewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>
          }
          createMany: {
            args: Prisma.ForumViewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumViewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>[]
          }
          delete: {
            args: Prisma.ForumViewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>
          }
          update: {
            args: Prisma.ForumViewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>
          }
          deleteMany: {
            args: Prisma.ForumViewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumViewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumViewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>[]
          }
          upsert: {
            args: Prisma.ForumViewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumViewPayload>
          }
          aggregate: {
            args: Prisma.ForumViewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumView>
          }
          groupBy: {
            args: Prisma.ForumViewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumViewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumViewCountArgs<ExtArgs>
            result: $Utils.Optional<ForumViewCountAggregateOutputType> | number
          }
        }
      }
      ForumSaved: {
        payload: Prisma.$ForumSavedPayload<ExtArgs>
        fields: Prisma.ForumSavedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumSavedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumSavedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>
          }
          findFirst: {
            args: Prisma.ForumSavedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumSavedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>
          }
          findMany: {
            args: Prisma.ForumSavedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>[]
          }
          create: {
            args: Prisma.ForumSavedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>
          }
          createMany: {
            args: Prisma.ForumSavedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumSavedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>[]
          }
          delete: {
            args: Prisma.ForumSavedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>
          }
          update: {
            args: Prisma.ForumSavedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>
          }
          deleteMany: {
            args: Prisma.ForumSavedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumSavedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumSavedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>[]
          }
          upsert: {
            args: Prisma.ForumSavedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumSavedPayload>
          }
          aggregate: {
            args: Prisma.ForumSavedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumSaved>
          }
          groupBy: {
            args: Prisma.ForumSavedGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumSavedGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumSavedCountArgs<ExtArgs>
            result: $Utils.Optional<ForumSavedCountAggregateOutputType> | number
          }
        }
      }
      ForumNotificationPreference: {
        payload: Prisma.$ForumNotificationPreferencePayload<ExtArgs>
        fields: Prisma.ForumNotificationPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumNotificationPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumNotificationPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>
          }
          findFirst: {
            args: Prisma.ForumNotificationPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumNotificationPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>
          }
          findMany: {
            args: Prisma.ForumNotificationPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>[]
          }
          create: {
            args: Prisma.ForumNotificationPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>
          }
          createMany: {
            args: Prisma.ForumNotificationPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumNotificationPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>[]
          }
          delete: {
            args: Prisma.ForumNotificationPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>
          }
          update: {
            args: Prisma.ForumNotificationPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>
          }
          deleteMany: {
            args: Prisma.ForumNotificationPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumNotificationPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumNotificationPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>[]
          }
          upsert: {
            args: Prisma.ForumNotificationPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumNotificationPreferencePayload>
          }
          aggregate: {
            args: Prisma.ForumNotificationPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumNotificationPreference>
          }
          groupBy: {
            args: Prisma.ForumNotificationPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumNotificationPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumNotificationPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<ForumNotificationPreferenceCountAggregateOutputType> | number
          }
        }
      }
      CourseCategory: {
        payload: Prisma.$CourseCategoryPayload<ExtArgs>
        fields: Prisma.CourseCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>
          }
          findFirst: {
            args: Prisma.CourseCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>
          }
          findMany: {
            args: Prisma.CourseCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>[]
          }
          create: {
            args: Prisma.CourseCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>
          }
          createMany: {
            args: Prisma.CourseCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>[]
          }
          delete: {
            args: Prisma.CourseCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>
          }
          update: {
            args: Prisma.CourseCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>
          }
          deleteMany: {
            args: Prisma.CourseCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>[]
          }
          upsert: {
            args: Prisma.CourseCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryPayload>
          }
          aggregate: {
            args: Prisma.CourseCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseCategory>
          }
          groupBy: {
            args: Prisma.CourseCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCategoryCountAggregateOutputType> | number
          }
        }
      }
      CourseCategoryJunction: {
        payload: Prisma.$CourseCategoryJunctionPayload<ExtArgs>
        fields: Prisma.CourseCategoryJunctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseCategoryJunctionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseCategoryJunctionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>
          }
          findFirst: {
            args: Prisma.CourseCategoryJunctionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseCategoryJunctionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>
          }
          findMany: {
            args: Prisma.CourseCategoryJunctionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>[]
          }
          create: {
            args: Prisma.CourseCategoryJunctionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>
          }
          createMany: {
            args: Prisma.CourseCategoryJunctionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCategoryJunctionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>[]
          }
          delete: {
            args: Prisma.CourseCategoryJunctionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>
          }
          update: {
            args: Prisma.CourseCategoryJunctionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>
          }
          deleteMany: {
            args: Prisma.CourseCategoryJunctionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseCategoryJunctionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseCategoryJunctionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>[]
          }
          upsert: {
            args: Prisma.CourseCategoryJunctionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCategoryJunctionPayload>
          }
          aggregate: {
            args: Prisma.CourseCategoryJunctionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseCategoryJunction>
          }
          groupBy: {
            args: Prisma.CourseCategoryJunctionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseCategoryJunctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCategoryJunctionCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCategoryJunctionCountAggregateOutputType> | number
          }
        }
      }
      course_reviews: {
        payload: Prisma.$course_reviewsPayload<ExtArgs>
        fields: Prisma.course_reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.course_reviewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.course_reviewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>
          }
          findFirst: {
            args: Prisma.course_reviewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.course_reviewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>
          }
          findMany: {
            args: Prisma.course_reviewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>[]
          }
          create: {
            args: Prisma.course_reviewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>
          }
          createMany: {
            args: Prisma.course_reviewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.course_reviewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>[]
          }
          delete: {
            args: Prisma.course_reviewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>
          }
          update: {
            args: Prisma.course_reviewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>
          }
          deleteMany: {
            args: Prisma.course_reviewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.course_reviewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.course_reviewsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>[]
          }
          upsert: {
            args: Prisma.course_reviewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_reviewsPayload>
          }
          aggregate: {
            args: Prisma.Course_reviewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse_reviews>
          }
          groupBy: {
            args: Prisma.course_reviewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Course_reviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.course_reviewsCountArgs<ExtArgs>
            result: $Utils.Optional<Course_reviewsCountAggregateOutputType> | number
          }
        }
      }
      marketplace_items: {
        payload: Prisma.$marketplace_itemsPayload<ExtArgs>
        fields: Prisma.marketplace_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.marketplace_itemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.marketplace_itemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>
          }
          findFirst: {
            args: Prisma.marketplace_itemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.marketplace_itemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>
          }
          findMany: {
            args: Prisma.marketplace_itemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>[]
          }
          create: {
            args: Prisma.marketplace_itemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>
          }
          createMany: {
            args: Prisma.marketplace_itemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.marketplace_itemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>[]
          }
          delete: {
            args: Prisma.marketplace_itemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>
          }
          update: {
            args: Prisma.marketplace_itemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>
          }
          deleteMany: {
            args: Prisma.marketplace_itemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.marketplace_itemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.marketplace_itemsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>[]
          }
          upsert: {
            args: Prisma.marketplace_itemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marketplace_itemsPayload>
          }
          aggregate: {
            args: Prisma.Marketplace_itemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketplace_items>
          }
          groupBy: {
            args: Prisma.marketplace_itemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Marketplace_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.marketplace_itemsCountArgs<ExtArgs>
            result: $Utils.Optional<Marketplace_itemsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    course?: CourseOmit
    user?: UserOmit
    courseSchedule?: CourseScheduleOmit
    coursePlanner?: CoursePlannerOmit
    forumCategory?: ForumCategoryOmit
    forumPost?: ForumPostOmit
    forumComment?: ForumCommentOmit
    forumLike?: ForumLikeOmit
    forumPostTag?: ForumPostTagOmit
    forumView?: ForumViewOmit
    forumSaved?: ForumSavedOmit
    forumNotificationPreference?: ForumNotificationPreferenceOmit
    courseCategory?: CourseCategoryOmit
    courseCategoryJunction?: CourseCategoryJunctionOmit
    course_reviews?: course_reviewsOmit
    marketplace_items?: marketplace_itemsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    categories: number
    planners: number
    course_reviews: number
    schedules: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | CourseCountOutputTypeCountCategoriesArgs
    planners?: boolean | CourseCountOutputTypeCountPlannersArgs
    course_reviews?: boolean | CourseCountOutputTypeCountCourse_reviewsArgs
    schedules?: boolean | CourseCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseCategoryJunctionWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountPlannersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursePlannerWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCourse_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_reviewsWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseScheduleWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    forum_posts: number
    forum_comments: number
    forum_likes: number
    forum_views: number
    forum_saved: number
    forum_notification_preferences: number
    course_schedules: number
    course_planners: number
    course_reviews: number
    marketplace_listings: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forum_posts?: boolean | UserCountOutputTypeCountForum_postsArgs
    forum_comments?: boolean | UserCountOutputTypeCountForum_commentsArgs
    forum_likes?: boolean | UserCountOutputTypeCountForum_likesArgs
    forum_views?: boolean | UserCountOutputTypeCountForum_viewsArgs
    forum_saved?: boolean | UserCountOutputTypeCountForum_savedArgs
    forum_notification_preferences?: boolean | UserCountOutputTypeCountForum_notification_preferencesArgs
    course_schedules?: boolean | UserCountOutputTypeCountCourse_schedulesArgs
    course_planners?: boolean | UserCountOutputTypeCountCourse_plannersArgs
    course_reviews?: boolean | UserCountOutputTypeCountCourse_reviewsArgs
    marketplace_listings?: boolean | UserCountOutputTypeCountMarketplace_listingsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForum_postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForum_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForum_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForum_viewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumViewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForum_savedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumSavedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForum_notification_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumNotificationPreferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourse_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourse_plannersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursePlannerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourse_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_reviewsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMarketplace_listingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: marketplace_itemsWhereInput
  }


  /**
   * Count Type ForumCategoryCountOutputType
   */

  export type ForumCategoryCountOutputType = {
    posts: number
  }

  export type ForumCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | ForumCategoryCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * ForumCategoryCountOutputType without action
   */
  export type ForumCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategoryCountOutputType
     */
    select?: ForumCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ForumCategoryCountOutputType without action
   */
  export type ForumCategoryCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostWhereInput
  }


  /**
   * Count Type ForumPostCountOutputType
   */

  export type ForumPostCountOutputType = {
    comments: number
    likes: number
    views: number
    tags: number
    saved_by: number
    notification_preferences: number
  }

  export type ForumPostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ForumPostCountOutputTypeCountCommentsArgs
    likes?: boolean | ForumPostCountOutputTypeCountLikesArgs
    views?: boolean | ForumPostCountOutputTypeCountViewsArgs
    tags?: boolean | ForumPostCountOutputTypeCountTagsArgs
    saved_by?: boolean | ForumPostCountOutputTypeCountSaved_byArgs
    notification_preferences?: boolean | ForumPostCountOutputTypeCountNotification_preferencesArgs
  }

  // Custom InputTypes
  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostCountOutputType
     */
    select?: ForumPostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumCommentWhereInput
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumLikeWhereInput
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumViewWhereInput
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostTagWhereInput
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountSaved_byArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumSavedWhereInput
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountNotification_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumNotificationPreferenceWhereInput
  }


  /**
   * Count Type ForumCommentCountOutputType
   */

  export type ForumCommentCountOutputType = {
    replies: number
  }

  export type ForumCommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | ForumCommentCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * ForumCommentCountOutputType without action
   */
  export type ForumCommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCommentCountOutputType
     */
    select?: ForumCommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ForumCommentCountOutputType without action
   */
  export type ForumCommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumCommentWhereInput
  }


  /**
   * Count Type CourseCategoryCountOutputType
   */

  export type CourseCategoryCountOutputType = {
    courses: number
  }

  export type CourseCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | CourseCategoryCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * CourseCategoryCountOutputType without action
   */
  export type CourseCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryCountOutputType
     */
    select?: CourseCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCategoryCountOutputType without action
   */
  export type CourseCategoryCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseCategoryJunctionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    credits: number | null
    year: number | null
  }

  export type CourseSumAggregateOutputType = {
    credits: number | null
    year: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    credits: number | null
    department: string | null
    semester: string | null
    year: number | null
    createdAt: Date | null
    updatedAt: Date | null
    professorId: string | null
    fullCode: string | null
    concentration_core: string | null
    concentration_elective: string | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    credits: number | null
    department: string | null
    semester: string | null
    year: number | null
    createdAt: Date | null
    updatedAt: Date | null
    professorId: string | null
    fullCode: string | null
    concentration_core: string | null
    concentration_elective: string | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    credits: number
    department: number
    semester: number
    year: number
    createdAt: number
    updatedAt: number
    professorId: number
    fullCode: number
    concentration_core: number
    concentration_elective: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    credits?: true
    year?: true
  }

  export type CourseSumAggregateInputType = {
    credits?: true
    year?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    department?: true
    semester?: true
    year?: true
    createdAt?: true
    updatedAt?: true
    professorId?: true
    fullCode?: true
    concentration_core?: true
    concentration_elective?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    department?: true
    semester?: true
    year?: true
    createdAt?: true
    updatedAt?: true
    professorId?: true
    fullCode?: true
    concentration_core?: true
    concentration_elective?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    department?: true
    semester?: true
    year?: true
    createdAt?: true
    updatedAt?: true
    professorId?: true
    fullCode?: true
    concentration_core?: true
    concentration_elective?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt: Date | null
    updatedAt: Date | null
    professorId: string
    fullCode: string | null
    concentration_core: string | null
    concentration_elective: string | null
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    department?: boolean
    semester?: boolean
    year?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    professorId?: boolean
    fullCode?: boolean
    concentration_core?: boolean
    concentration_elective?: boolean
    categories?: boolean | Course$categoriesArgs<ExtArgs>
    planners?: boolean | Course$plannersArgs<ExtArgs>
    course_reviews?: boolean | Course$course_reviewsArgs<ExtArgs>
    schedules?: boolean | Course$schedulesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    department?: boolean
    semester?: boolean
    year?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    professorId?: boolean
    fullCode?: boolean
    concentration_core?: boolean
    concentration_elective?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    department?: boolean
    semester?: boolean
    year?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    professorId?: boolean
    fullCode?: boolean
    concentration_core?: boolean
    concentration_elective?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    department?: boolean
    semester?: boolean
    year?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    professorId?: boolean
    fullCode?: boolean
    concentration_core?: boolean
    concentration_elective?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "description" | "credits" | "department" | "semester" | "year" | "createdAt" | "updatedAt" | "professorId" | "fullCode" | "concentration_core" | "concentration_elective", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Course$categoriesArgs<ExtArgs>
    planners?: boolean | Course$plannersArgs<ExtArgs>
    course_reviews?: boolean | Course$course_reviewsArgs<ExtArgs>
    schedules?: boolean | Course$schedulesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      categories: Prisma.$CourseCategoryJunctionPayload<ExtArgs>[]
      planners: Prisma.$CoursePlannerPayload<ExtArgs>[]
      course_reviews: Prisma.$course_reviewsPayload<ExtArgs>[]
      schedules: Prisma.$CourseSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      credits: number
      department: string
      semester: string
      year: number
      createdAt: Date | null
      updatedAt: Date | null
      professorId: string
      fullCode: string | null
      concentration_core: string | null
      concentration_elective: string | null
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Course$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Course$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    planners<T extends Course$plannersArgs<ExtArgs> = {}>(args?: Subset<T, Course$plannersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    course_reviews<T extends Course$course_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Course$course_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends Course$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Course$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly code: FieldRef<"Course", 'String'>
    readonly name: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly credits: FieldRef<"Course", 'Int'>
    readonly department: FieldRef<"Course", 'String'>
    readonly semester: FieldRef<"Course", 'String'>
    readonly year: FieldRef<"Course", 'Int'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
    readonly updatedAt: FieldRef<"Course", 'DateTime'>
    readonly professorId: FieldRef<"Course", 'String'>
    readonly fullCode: FieldRef<"Course", 'String'>
    readonly concentration_core: FieldRef<"Course", 'String'>
    readonly concentration_elective: FieldRef<"Course", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.categories
   */
  export type Course$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    where?: CourseCategoryJunctionWhereInput
    orderBy?: CourseCategoryJunctionOrderByWithRelationInput | CourseCategoryJunctionOrderByWithRelationInput[]
    cursor?: CourseCategoryJunctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseCategoryJunctionScalarFieldEnum | CourseCategoryJunctionScalarFieldEnum[]
  }

  /**
   * Course.planners
   */
  export type Course$plannersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    where?: CoursePlannerWhereInput
    orderBy?: CoursePlannerOrderByWithRelationInput | CoursePlannerOrderByWithRelationInput[]
    cursor?: CoursePlannerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursePlannerScalarFieldEnum | CoursePlannerScalarFieldEnum[]
  }

  /**
   * Course.course_reviews
   */
  export type Course$course_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    where?: course_reviewsWhereInput
    orderBy?: course_reviewsOrderByWithRelationInput | course_reviewsOrderByWithRelationInput[]
    cursor?: course_reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Course_reviewsScalarFieldEnum | Course_reviewsScalarFieldEnum[]
  }

  /**
   * Course.schedules
   */
  export type Course$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    where?: CourseScheduleWhereInput
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    cursor?: CourseScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
    program: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
    program: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    avatar_url: number
    created_at: number
    updated_at: number
    program: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
    program?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
    program?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
    program?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
    program: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    program?: boolean
    forum_posts?: boolean | User$forum_postsArgs<ExtArgs>
    forum_comments?: boolean | User$forum_commentsArgs<ExtArgs>
    forum_likes?: boolean | User$forum_likesArgs<ExtArgs>
    forum_views?: boolean | User$forum_viewsArgs<ExtArgs>
    forum_saved?: boolean | User$forum_savedArgs<ExtArgs>
    forum_notification_preferences?: boolean | User$forum_notification_preferencesArgs<ExtArgs>
    course_schedules?: boolean | User$course_schedulesArgs<ExtArgs>
    course_planners?: boolean | User$course_plannersArgs<ExtArgs>
    course_reviews?: boolean | User$course_reviewsArgs<ExtArgs>
    marketplace_listings?: boolean | User$marketplace_listingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    program?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    program?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    program?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "avatar_url" | "created_at" | "updated_at" | "program", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forum_posts?: boolean | User$forum_postsArgs<ExtArgs>
    forum_comments?: boolean | User$forum_commentsArgs<ExtArgs>
    forum_likes?: boolean | User$forum_likesArgs<ExtArgs>
    forum_views?: boolean | User$forum_viewsArgs<ExtArgs>
    forum_saved?: boolean | User$forum_savedArgs<ExtArgs>
    forum_notification_preferences?: boolean | User$forum_notification_preferencesArgs<ExtArgs>
    course_schedules?: boolean | User$course_schedulesArgs<ExtArgs>
    course_planners?: boolean | User$course_plannersArgs<ExtArgs>
    course_reviews?: boolean | User$course_reviewsArgs<ExtArgs>
    marketplace_listings?: boolean | User$marketplace_listingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      forum_posts: Prisma.$ForumPostPayload<ExtArgs>[]
      forum_comments: Prisma.$ForumCommentPayload<ExtArgs>[]
      forum_likes: Prisma.$ForumLikePayload<ExtArgs>[]
      forum_views: Prisma.$ForumViewPayload<ExtArgs>[]
      forum_saved: Prisma.$ForumSavedPayload<ExtArgs>[]
      forum_notification_preferences: Prisma.$ForumNotificationPreferencePayload<ExtArgs>[]
      course_schedules: Prisma.$CourseSchedulePayload<ExtArgs>[]
      course_planners: Prisma.$CoursePlannerPayload<ExtArgs>[]
      course_reviews: Prisma.$course_reviewsPayload<ExtArgs>[]
      marketplace_listings: Prisma.$marketplace_itemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      avatar_url: string | null
      created_at: Date | null
      updated_at: Date | null
      program: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    forum_posts<T extends User$forum_postsArgs<ExtArgs> = {}>(args?: Subset<T, User$forum_postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forum_comments<T extends User$forum_commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$forum_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forum_likes<T extends User$forum_likesArgs<ExtArgs> = {}>(args?: Subset<T, User$forum_likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forum_views<T extends User$forum_viewsArgs<ExtArgs> = {}>(args?: Subset<T, User$forum_viewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forum_saved<T extends User$forum_savedArgs<ExtArgs> = {}>(args?: Subset<T, User$forum_savedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forum_notification_preferences<T extends User$forum_notification_preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$forum_notification_preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    course_schedules<T extends User$course_schedulesArgs<ExtArgs> = {}>(args?: Subset<T, User$course_schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    course_planners<T extends User$course_plannersArgs<ExtArgs> = {}>(args?: Subset<T, User$course_plannersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    course_reviews<T extends User$course_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$course_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    marketplace_listings<T extends User$marketplace_listingsArgs<ExtArgs> = {}>(args?: Subset<T, User$marketplace_listingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar_url: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly program: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.forum_posts
   */
  export type User$forum_postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    where?: ForumPostWhereInput
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    cursor?: ForumPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * User.forum_comments
   */
  export type User$forum_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    where?: ForumCommentWhereInput
    orderBy?: ForumCommentOrderByWithRelationInput | ForumCommentOrderByWithRelationInput[]
    cursor?: ForumCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumCommentScalarFieldEnum | ForumCommentScalarFieldEnum[]
  }

  /**
   * User.forum_likes
   */
  export type User$forum_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    where?: ForumLikeWhereInput
    orderBy?: ForumLikeOrderByWithRelationInput | ForumLikeOrderByWithRelationInput[]
    cursor?: ForumLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumLikeScalarFieldEnum | ForumLikeScalarFieldEnum[]
  }

  /**
   * User.forum_views
   */
  export type User$forum_viewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    where?: ForumViewWhereInput
    orderBy?: ForumViewOrderByWithRelationInput | ForumViewOrderByWithRelationInput[]
    cursor?: ForumViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumViewScalarFieldEnum | ForumViewScalarFieldEnum[]
  }

  /**
   * User.forum_saved
   */
  export type User$forum_savedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    where?: ForumSavedWhereInput
    orderBy?: ForumSavedOrderByWithRelationInput | ForumSavedOrderByWithRelationInput[]
    cursor?: ForumSavedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumSavedScalarFieldEnum | ForumSavedScalarFieldEnum[]
  }

  /**
   * User.forum_notification_preferences
   */
  export type User$forum_notification_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    where?: ForumNotificationPreferenceWhereInput
    orderBy?: ForumNotificationPreferenceOrderByWithRelationInput | ForumNotificationPreferenceOrderByWithRelationInput[]
    cursor?: ForumNotificationPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumNotificationPreferenceScalarFieldEnum | ForumNotificationPreferenceScalarFieldEnum[]
  }

  /**
   * User.course_schedules
   */
  export type User$course_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    where?: CourseScheduleWhereInput
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    cursor?: CourseScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * User.course_planners
   */
  export type User$course_plannersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    where?: CoursePlannerWhereInput
    orderBy?: CoursePlannerOrderByWithRelationInput | CoursePlannerOrderByWithRelationInput[]
    cursor?: CoursePlannerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursePlannerScalarFieldEnum | CoursePlannerScalarFieldEnum[]
  }

  /**
   * User.course_reviews
   */
  export type User$course_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    where?: course_reviewsWhereInput
    orderBy?: course_reviewsOrderByWithRelationInput | course_reviewsOrderByWithRelationInput[]
    cursor?: course_reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Course_reviewsScalarFieldEnum | Course_reviewsScalarFieldEnum[]
  }

  /**
   * User.marketplace_listings
   */
  export type User$marketplace_listingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    where?: marketplace_itemsWhereInput
    orderBy?: marketplace_itemsOrderByWithRelationInput | marketplace_itemsOrderByWithRelationInput[]
    cursor?: marketplace_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Marketplace_itemsScalarFieldEnum | Marketplace_itemsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CourseSchedule
   */

  export type AggregateCourseSchedule = {
    _count: CourseScheduleCountAggregateOutputType | null
    _min: CourseScheduleMinAggregateOutputType | null
    _max: CourseScheduleMaxAggregateOutputType | null
  }

  export type CourseScheduleMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    course_id: string | null
    day: string | null
    start_time: string | null
    end_time: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CourseScheduleMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    course_id: string | null
    day: string | null
    start_time: string | null
    end_time: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CourseScheduleCountAggregateOutputType = {
    id: number
    user_id: number
    course_id: number
    day: number
    start_time: number
    end_time: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CourseScheduleMinAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    day?: true
    start_time?: true
    end_time?: true
    created_at?: true
    updated_at?: true
  }

  export type CourseScheduleMaxAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    day?: true
    start_time?: true
    end_time?: true
    created_at?: true
    updated_at?: true
  }

  export type CourseScheduleCountAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    day?: true
    start_time?: true
    end_time?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CourseScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseSchedule to aggregate.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseSchedules
    **/
    _count?: true | CourseScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseScheduleMaxAggregateInputType
  }

  export type GetCourseScheduleAggregateType<T extends CourseScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseSchedule[P]>
      : GetScalarType<T[P], AggregateCourseSchedule[P]>
  }




  export type CourseScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseScheduleWhereInput
    orderBy?: CourseScheduleOrderByWithAggregationInput | CourseScheduleOrderByWithAggregationInput[]
    by: CourseScheduleScalarFieldEnum[] | CourseScheduleScalarFieldEnum
    having?: CourseScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseScheduleCountAggregateInputType | true
    _min?: CourseScheduleMinAggregateInputType
    _max?: CourseScheduleMaxAggregateInputType
  }

  export type CourseScheduleGroupByOutputType = {
    id: string
    user_id: string
    course_id: string
    day: string
    start_time: string
    end_time: string
    created_at: Date
    updated_at: Date
    _count: CourseScheduleCountAggregateOutputType | null
    _min: CourseScheduleMinAggregateOutputType | null
    _max: CourseScheduleMaxAggregateOutputType | null
  }

  type GetCourseScheduleGroupByPayload<T extends CourseScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], CourseScheduleGroupByOutputType[P]>
        }
      >
    >


  export type CourseScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    day?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseSchedule"]>

  export type CourseScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    day?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseSchedule"]>

  export type CourseScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    day?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseSchedule"]>

  export type CourseScheduleSelectScalar = {
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    day?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CourseScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "course_id" | "day" | "start_time" | "end_time" | "created_at" | "updated_at", ExtArgs["result"]["courseSchedule"]>
  export type CourseScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CourseScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CourseScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CourseSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseSchedule"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      course_id: string
      day: string
      start_time: string
      end_time: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["courseSchedule"]>
    composites: {}
  }

  type CourseScheduleGetPayload<S extends boolean | null | undefined | CourseScheduleDefaultArgs> = $Result.GetResult<Prisma.$CourseSchedulePayload, S>

  type CourseScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseScheduleCountAggregateInputType | true
    }

  export interface CourseScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseSchedule'], meta: { name: 'CourseSchedule' } }
    /**
     * Find zero or one CourseSchedule that matches the filter.
     * @param {CourseScheduleFindUniqueArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseScheduleFindUniqueArgs>(args: SelectSubset<T, CourseScheduleFindUniqueArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseScheduleFindUniqueOrThrowArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleFindFirstArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseScheduleFindFirstArgs>(args?: SelectSubset<T, CourseScheduleFindFirstArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleFindFirstOrThrowArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseSchedules
     * const courseSchedules = await prisma.courseSchedule.findMany()
     * 
     * // Get first 10 CourseSchedules
     * const courseSchedules = await prisma.courseSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseScheduleWithIdOnly = await prisma.courseSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseScheduleFindManyArgs>(args?: SelectSubset<T, CourseScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseSchedule.
     * @param {CourseScheduleCreateArgs} args - Arguments to create a CourseSchedule.
     * @example
     * // Create one CourseSchedule
     * const CourseSchedule = await prisma.courseSchedule.create({
     *   data: {
     *     // ... data to create a CourseSchedule
     *   }
     * })
     * 
     */
    create<T extends CourseScheduleCreateArgs>(args: SelectSubset<T, CourseScheduleCreateArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseSchedules.
     * @param {CourseScheduleCreateManyArgs} args - Arguments to create many CourseSchedules.
     * @example
     * // Create many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseScheduleCreateManyArgs>(args?: SelectSubset<T, CourseScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseSchedules and returns the data saved in the database.
     * @param {CourseScheduleCreateManyAndReturnArgs} args - Arguments to create many CourseSchedules.
     * @example
     * // Create many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseSchedules and only return the `id`
     * const courseScheduleWithIdOnly = await prisma.courseSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseSchedule.
     * @param {CourseScheduleDeleteArgs} args - Arguments to delete one CourseSchedule.
     * @example
     * // Delete one CourseSchedule
     * const CourseSchedule = await prisma.courseSchedule.delete({
     *   where: {
     *     // ... filter to delete one CourseSchedule
     *   }
     * })
     * 
     */
    delete<T extends CourseScheduleDeleteArgs>(args: SelectSubset<T, CourseScheduleDeleteArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseSchedule.
     * @param {CourseScheduleUpdateArgs} args - Arguments to update one CourseSchedule.
     * @example
     * // Update one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseScheduleUpdateArgs>(args: SelectSubset<T, CourseScheduleUpdateArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseSchedules.
     * @param {CourseScheduleDeleteManyArgs} args - Arguments to filter CourseSchedules to delete.
     * @example
     * // Delete a few CourseSchedules
     * const { count } = await prisma.courseSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseScheduleDeleteManyArgs>(args?: SelectSubset<T, CourseScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseScheduleUpdateManyArgs>(args: SelectSubset<T, CourseScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseSchedules and returns the data updated in the database.
     * @param {CourseScheduleUpdateManyAndReturnArgs} args - Arguments to update many CourseSchedules.
     * @example
     * // Update many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseSchedules and only return the `id`
     * const courseScheduleWithIdOnly = await prisma.courseSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseSchedule.
     * @param {CourseScheduleUpsertArgs} args - Arguments to update or create a CourseSchedule.
     * @example
     * // Update or create a CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.upsert({
     *   create: {
     *     // ... data to create a CourseSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseSchedule we want to update
     *   }
     * })
     */
    upsert<T extends CourseScheduleUpsertArgs>(args: SelectSubset<T, CourseScheduleUpsertArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleCountArgs} args - Arguments to filter CourseSchedules to count.
     * @example
     * // Count the number of CourseSchedules
     * const count = await prisma.courseSchedule.count({
     *   where: {
     *     // ... the filter for the CourseSchedules we want to count
     *   }
     * })
    **/
    count<T extends CourseScheduleCountArgs>(
      args?: Subset<T, CourseScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseScheduleAggregateArgs>(args: Subset<T, CourseScheduleAggregateArgs>): Prisma.PrismaPromise<GetCourseScheduleAggregateType<T>>

    /**
     * Group by CourseSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseScheduleGroupByArgs['orderBy'] }
        : { orderBy?: CourseScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseSchedule model
   */
  readonly fields: CourseScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseSchedule model
   */
  interface CourseScheduleFieldRefs {
    readonly id: FieldRef<"CourseSchedule", 'String'>
    readonly user_id: FieldRef<"CourseSchedule", 'String'>
    readonly course_id: FieldRef<"CourseSchedule", 'String'>
    readonly day: FieldRef<"CourseSchedule", 'String'>
    readonly start_time: FieldRef<"CourseSchedule", 'String'>
    readonly end_time: FieldRef<"CourseSchedule", 'String'>
    readonly created_at: FieldRef<"CourseSchedule", 'DateTime'>
    readonly updated_at: FieldRef<"CourseSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseSchedule findUnique
   */
  export type CourseScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule findUniqueOrThrow
   */
  export type CourseScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule findFirst
   */
  export type CourseScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseSchedules.
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseSchedules.
     */
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * CourseSchedule findFirstOrThrow
   */
  export type CourseScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseSchedules.
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseSchedules.
     */
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * CourseSchedule findMany
   */
  export type CourseScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedules to fetch.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseSchedules.
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * CourseSchedule create
   */
  export type CourseScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseSchedule.
     */
    data: XOR<CourseScheduleCreateInput, CourseScheduleUncheckedCreateInput>
  }

  /**
   * CourseSchedule createMany
   */
  export type CourseScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseSchedules.
     */
    data: CourseScheduleCreateManyInput | CourseScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseSchedule createManyAndReturn
   */
  export type CourseScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many CourseSchedules.
     */
    data: CourseScheduleCreateManyInput | CourseScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseSchedule update
   */
  export type CourseScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseSchedule.
     */
    data: XOR<CourseScheduleUpdateInput, CourseScheduleUncheckedUpdateInput>
    /**
     * Choose, which CourseSchedule to update.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule updateMany
   */
  export type CourseScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseSchedules.
     */
    data: XOR<CourseScheduleUpdateManyMutationInput, CourseScheduleUncheckedUpdateManyInput>
    /**
     * Filter which CourseSchedules to update
     */
    where?: CourseScheduleWhereInput
    /**
     * Limit how many CourseSchedules to update.
     */
    limit?: number
  }

  /**
   * CourseSchedule updateManyAndReturn
   */
  export type CourseScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * The data used to update CourseSchedules.
     */
    data: XOR<CourseScheduleUpdateManyMutationInput, CourseScheduleUncheckedUpdateManyInput>
    /**
     * Filter which CourseSchedules to update
     */
    where?: CourseScheduleWhereInput
    /**
     * Limit how many CourseSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseSchedule upsert
   */
  export type CourseScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseSchedule to update in case it exists.
     */
    where: CourseScheduleWhereUniqueInput
    /**
     * In case the CourseSchedule found by the `where` argument doesn't exist, create a new CourseSchedule with this data.
     */
    create: XOR<CourseScheduleCreateInput, CourseScheduleUncheckedCreateInput>
    /**
     * In case the CourseSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseScheduleUpdateInput, CourseScheduleUncheckedUpdateInput>
  }

  /**
   * CourseSchedule delete
   */
  export type CourseScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter which CourseSchedule to delete.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule deleteMany
   */
  export type CourseScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseSchedules to delete
     */
    where?: CourseScheduleWhereInput
    /**
     * Limit how many CourseSchedules to delete.
     */
    limit?: number
  }

  /**
   * CourseSchedule without action
   */
  export type CourseScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
  }


  /**
   * Model CoursePlanner
   */

  export type AggregateCoursePlanner = {
    _count: CoursePlannerCountAggregateOutputType | null
    _avg: CoursePlannerAvgAggregateOutputType | null
    _sum: CoursePlannerSumAggregateOutputType | null
    _min: CoursePlannerMinAggregateOutputType | null
    _max: CoursePlannerMaxAggregateOutputType | null
  }

  export type CoursePlannerAvgAggregateOutputType = {
    year: number | null
  }

  export type CoursePlannerSumAggregateOutputType = {
    year: number | null
  }

  export type CoursePlannerMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    course_id: string | null
    requirement_type: string | null
    semester: string | null
    year: number | null
    status: string | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoursePlannerMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    course_id: string | null
    requirement_type: string | null
    semester: string | null
    year: number | null
    status: string | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoursePlannerCountAggregateOutputType = {
    id: number
    user_id: number
    course_id: number
    requirement_type: number
    semester: number
    year: number
    status: number
    notes: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CoursePlannerAvgAggregateInputType = {
    year?: true
  }

  export type CoursePlannerSumAggregateInputType = {
    year?: true
  }

  export type CoursePlannerMinAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    requirement_type?: true
    semester?: true
    year?: true
    status?: true
    notes?: true
    created_at?: true
    updated_at?: true
  }

  export type CoursePlannerMaxAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    requirement_type?: true
    semester?: true
    year?: true
    status?: true
    notes?: true
    created_at?: true
    updated_at?: true
  }

  export type CoursePlannerCountAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    requirement_type?: true
    semester?: true
    year?: true
    status?: true
    notes?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CoursePlannerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoursePlanner to aggregate.
     */
    where?: CoursePlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePlanners to fetch.
     */
    orderBy?: CoursePlannerOrderByWithRelationInput | CoursePlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoursePlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePlanners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoursePlanners
    **/
    _count?: true | CoursePlannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursePlannerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursePlannerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursePlannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursePlannerMaxAggregateInputType
  }

  export type GetCoursePlannerAggregateType<T extends CoursePlannerAggregateArgs> = {
        [P in keyof T & keyof AggregateCoursePlanner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoursePlanner[P]>
      : GetScalarType<T[P], AggregateCoursePlanner[P]>
  }




  export type CoursePlannerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursePlannerWhereInput
    orderBy?: CoursePlannerOrderByWithAggregationInput | CoursePlannerOrderByWithAggregationInput[]
    by: CoursePlannerScalarFieldEnum[] | CoursePlannerScalarFieldEnum
    having?: CoursePlannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursePlannerCountAggregateInputType | true
    _avg?: CoursePlannerAvgAggregateInputType
    _sum?: CoursePlannerSumAggregateInputType
    _min?: CoursePlannerMinAggregateInputType
    _max?: CoursePlannerMaxAggregateInputType
  }

  export type CoursePlannerGroupByOutputType = {
    id: string
    user_id: string
    course_id: string
    requirement_type: string | null
    semester: string
    year: number
    status: string | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: CoursePlannerCountAggregateOutputType | null
    _avg: CoursePlannerAvgAggregateOutputType | null
    _sum: CoursePlannerSumAggregateOutputType | null
    _min: CoursePlannerMinAggregateOutputType | null
    _max: CoursePlannerMaxAggregateOutputType | null
  }

  type GetCoursePlannerGroupByPayload<T extends CoursePlannerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursePlannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursePlannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursePlannerGroupByOutputType[P]>
            : GetScalarType<T[P], CoursePlannerGroupByOutputType[P]>
        }
      >
    >


  export type CoursePlannerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    requirement_type?: boolean
    semester?: boolean
    year?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coursePlanner"]>

  export type CoursePlannerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    requirement_type?: boolean
    semester?: boolean
    year?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coursePlanner"]>

  export type CoursePlannerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    requirement_type?: boolean
    semester?: boolean
    year?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coursePlanner"]>

  export type CoursePlannerSelectScalar = {
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    requirement_type?: boolean
    semester?: boolean
    year?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CoursePlannerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "course_id" | "requirement_type" | "semester" | "year" | "status" | "notes" | "created_at" | "updated_at", ExtArgs["result"]["coursePlanner"]>
  export type CoursePlannerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CoursePlannerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CoursePlannerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CoursePlannerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoursePlanner"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      course_id: string
      requirement_type: string | null
      semester: string
      year: number
      status: string | null
      notes: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["coursePlanner"]>
    composites: {}
  }

  type CoursePlannerGetPayload<S extends boolean | null | undefined | CoursePlannerDefaultArgs> = $Result.GetResult<Prisma.$CoursePlannerPayload, S>

  type CoursePlannerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoursePlannerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoursePlannerCountAggregateInputType | true
    }

  export interface CoursePlannerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoursePlanner'], meta: { name: 'CoursePlanner' } }
    /**
     * Find zero or one CoursePlanner that matches the filter.
     * @param {CoursePlannerFindUniqueArgs} args - Arguments to find a CoursePlanner
     * @example
     * // Get one CoursePlanner
     * const coursePlanner = await prisma.coursePlanner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoursePlannerFindUniqueArgs>(args: SelectSubset<T, CoursePlannerFindUniqueArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoursePlanner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoursePlannerFindUniqueOrThrowArgs} args - Arguments to find a CoursePlanner
     * @example
     * // Get one CoursePlanner
     * const coursePlanner = await prisma.coursePlanner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoursePlannerFindUniqueOrThrowArgs>(args: SelectSubset<T, CoursePlannerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoursePlanner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePlannerFindFirstArgs} args - Arguments to find a CoursePlanner
     * @example
     * // Get one CoursePlanner
     * const coursePlanner = await prisma.coursePlanner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoursePlannerFindFirstArgs>(args?: SelectSubset<T, CoursePlannerFindFirstArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoursePlanner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePlannerFindFirstOrThrowArgs} args - Arguments to find a CoursePlanner
     * @example
     * // Get one CoursePlanner
     * const coursePlanner = await prisma.coursePlanner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoursePlannerFindFirstOrThrowArgs>(args?: SelectSubset<T, CoursePlannerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoursePlanners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePlannerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoursePlanners
     * const coursePlanners = await prisma.coursePlanner.findMany()
     * 
     * // Get first 10 CoursePlanners
     * const coursePlanners = await prisma.coursePlanner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursePlannerWithIdOnly = await prisma.coursePlanner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoursePlannerFindManyArgs>(args?: SelectSubset<T, CoursePlannerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoursePlanner.
     * @param {CoursePlannerCreateArgs} args - Arguments to create a CoursePlanner.
     * @example
     * // Create one CoursePlanner
     * const CoursePlanner = await prisma.coursePlanner.create({
     *   data: {
     *     // ... data to create a CoursePlanner
     *   }
     * })
     * 
     */
    create<T extends CoursePlannerCreateArgs>(args: SelectSubset<T, CoursePlannerCreateArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoursePlanners.
     * @param {CoursePlannerCreateManyArgs} args - Arguments to create many CoursePlanners.
     * @example
     * // Create many CoursePlanners
     * const coursePlanner = await prisma.coursePlanner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoursePlannerCreateManyArgs>(args?: SelectSubset<T, CoursePlannerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoursePlanners and returns the data saved in the database.
     * @param {CoursePlannerCreateManyAndReturnArgs} args - Arguments to create many CoursePlanners.
     * @example
     * // Create many CoursePlanners
     * const coursePlanner = await prisma.coursePlanner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoursePlanners and only return the `id`
     * const coursePlannerWithIdOnly = await prisma.coursePlanner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoursePlannerCreateManyAndReturnArgs>(args?: SelectSubset<T, CoursePlannerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoursePlanner.
     * @param {CoursePlannerDeleteArgs} args - Arguments to delete one CoursePlanner.
     * @example
     * // Delete one CoursePlanner
     * const CoursePlanner = await prisma.coursePlanner.delete({
     *   where: {
     *     // ... filter to delete one CoursePlanner
     *   }
     * })
     * 
     */
    delete<T extends CoursePlannerDeleteArgs>(args: SelectSubset<T, CoursePlannerDeleteArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoursePlanner.
     * @param {CoursePlannerUpdateArgs} args - Arguments to update one CoursePlanner.
     * @example
     * // Update one CoursePlanner
     * const coursePlanner = await prisma.coursePlanner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoursePlannerUpdateArgs>(args: SelectSubset<T, CoursePlannerUpdateArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoursePlanners.
     * @param {CoursePlannerDeleteManyArgs} args - Arguments to filter CoursePlanners to delete.
     * @example
     * // Delete a few CoursePlanners
     * const { count } = await prisma.coursePlanner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoursePlannerDeleteManyArgs>(args?: SelectSubset<T, CoursePlannerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoursePlanners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePlannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoursePlanners
     * const coursePlanner = await prisma.coursePlanner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoursePlannerUpdateManyArgs>(args: SelectSubset<T, CoursePlannerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoursePlanners and returns the data updated in the database.
     * @param {CoursePlannerUpdateManyAndReturnArgs} args - Arguments to update many CoursePlanners.
     * @example
     * // Update many CoursePlanners
     * const coursePlanner = await prisma.coursePlanner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoursePlanners and only return the `id`
     * const coursePlannerWithIdOnly = await prisma.coursePlanner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoursePlannerUpdateManyAndReturnArgs>(args: SelectSubset<T, CoursePlannerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoursePlanner.
     * @param {CoursePlannerUpsertArgs} args - Arguments to update or create a CoursePlanner.
     * @example
     * // Update or create a CoursePlanner
     * const coursePlanner = await prisma.coursePlanner.upsert({
     *   create: {
     *     // ... data to create a CoursePlanner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoursePlanner we want to update
     *   }
     * })
     */
    upsert<T extends CoursePlannerUpsertArgs>(args: SelectSubset<T, CoursePlannerUpsertArgs<ExtArgs>>): Prisma__CoursePlannerClient<$Result.GetResult<Prisma.$CoursePlannerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoursePlanners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePlannerCountArgs} args - Arguments to filter CoursePlanners to count.
     * @example
     * // Count the number of CoursePlanners
     * const count = await prisma.coursePlanner.count({
     *   where: {
     *     // ... the filter for the CoursePlanners we want to count
     *   }
     * })
    **/
    count<T extends CoursePlannerCountArgs>(
      args?: Subset<T, CoursePlannerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursePlannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoursePlanner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePlannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursePlannerAggregateArgs>(args: Subset<T, CoursePlannerAggregateArgs>): Prisma.PrismaPromise<GetCoursePlannerAggregateType<T>>

    /**
     * Group by CoursePlanner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePlannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoursePlannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoursePlannerGroupByArgs['orderBy'] }
        : { orderBy?: CoursePlannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoursePlannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursePlannerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoursePlanner model
   */
  readonly fields: CoursePlannerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoursePlanner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoursePlannerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoursePlanner model
   */
  interface CoursePlannerFieldRefs {
    readonly id: FieldRef<"CoursePlanner", 'String'>
    readonly user_id: FieldRef<"CoursePlanner", 'String'>
    readonly course_id: FieldRef<"CoursePlanner", 'String'>
    readonly requirement_type: FieldRef<"CoursePlanner", 'String'>
    readonly semester: FieldRef<"CoursePlanner", 'String'>
    readonly year: FieldRef<"CoursePlanner", 'Int'>
    readonly status: FieldRef<"CoursePlanner", 'String'>
    readonly notes: FieldRef<"CoursePlanner", 'String'>
    readonly created_at: FieldRef<"CoursePlanner", 'DateTime'>
    readonly updated_at: FieldRef<"CoursePlanner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoursePlanner findUnique
   */
  export type CoursePlannerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * Filter, which CoursePlanner to fetch.
     */
    where: CoursePlannerWhereUniqueInput
  }

  /**
   * CoursePlanner findUniqueOrThrow
   */
  export type CoursePlannerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * Filter, which CoursePlanner to fetch.
     */
    where: CoursePlannerWhereUniqueInput
  }

  /**
   * CoursePlanner findFirst
   */
  export type CoursePlannerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * Filter, which CoursePlanner to fetch.
     */
    where?: CoursePlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePlanners to fetch.
     */
    orderBy?: CoursePlannerOrderByWithRelationInput | CoursePlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoursePlanners.
     */
    cursor?: CoursePlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePlanners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoursePlanners.
     */
    distinct?: CoursePlannerScalarFieldEnum | CoursePlannerScalarFieldEnum[]
  }

  /**
   * CoursePlanner findFirstOrThrow
   */
  export type CoursePlannerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * Filter, which CoursePlanner to fetch.
     */
    where?: CoursePlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePlanners to fetch.
     */
    orderBy?: CoursePlannerOrderByWithRelationInput | CoursePlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoursePlanners.
     */
    cursor?: CoursePlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePlanners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoursePlanners.
     */
    distinct?: CoursePlannerScalarFieldEnum | CoursePlannerScalarFieldEnum[]
  }

  /**
   * CoursePlanner findMany
   */
  export type CoursePlannerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * Filter, which CoursePlanners to fetch.
     */
    where?: CoursePlannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePlanners to fetch.
     */
    orderBy?: CoursePlannerOrderByWithRelationInput | CoursePlannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoursePlanners.
     */
    cursor?: CoursePlannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePlanners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePlanners.
     */
    skip?: number
    distinct?: CoursePlannerScalarFieldEnum | CoursePlannerScalarFieldEnum[]
  }

  /**
   * CoursePlanner create
   */
  export type CoursePlannerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * The data needed to create a CoursePlanner.
     */
    data: XOR<CoursePlannerCreateInput, CoursePlannerUncheckedCreateInput>
  }

  /**
   * CoursePlanner createMany
   */
  export type CoursePlannerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoursePlanners.
     */
    data: CoursePlannerCreateManyInput | CoursePlannerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoursePlanner createManyAndReturn
   */
  export type CoursePlannerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * The data used to create many CoursePlanners.
     */
    data: CoursePlannerCreateManyInput | CoursePlannerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoursePlanner update
   */
  export type CoursePlannerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * The data needed to update a CoursePlanner.
     */
    data: XOR<CoursePlannerUpdateInput, CoursePlannerUncheckedUpdateInput>
    /**
     * Choose, which CoursePlanner to update.
     */
    where: CoursePlannerWhereUniqueInput
  }

  /**
   * CoursePlanner updateMany
   */
  export type CoursePlannerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoursePlanners.
     */
    data: XOR<CoursePlannerUpdateManyMutationInput, CoursePlannerUncheckedUpdateManyInput>
    /**
     * Filter which CoursePlanners to update
     */
    where?: CoursePlannerWhereInput
    /**
     * Limit how many CoursePlanners to update.
     */
    limit?: number
  }

  /**
   * CoursePlanner updateManyAndReturn
   */
  export type CoursePlannerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * The data used to update CoursePlanners.
     */
    data: XOR<CoursePlannerUpdateManyMutationInput, CoursePlannerUncheckedUpdateManyInput>
    /**
     * Filter which CoursePlanners to update
     */
    where?: CoursePlannerWhereInput
    /**
     * Limit how many CoursePlanners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoursePlanner upsert
   */
  export type CoursePlannerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * The filter to search for the CoursePlanner to update in case it exists.
     */
    where: CoursePlannerWhereUniqueInput
    /**
     * In case the CoursePlanner found by the `where` argument doesn't exist, create a new CoursePlanner with this data.
     */
    create: XOR<CoursePlannerCreateInput, CoursePlannerUncheckedCreateInput>
    /**
     * In case the CoursePlanner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoursePlannerUpdateInput, CoursePlannerUncheckedUpdateInput>
  }

  /**
   * CoursePlanner delete
   */
  export type CoursePlannerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
    /**
     * Filter which CoursePlanner to delete.
     */
    where: CoursePlannerWhereUniqueInput
  }

  /**
   * CoursePlanner deleteMany
   */
  export type CoursePlannerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoursePlanners to delete
     */
    where?: CoursePlannerWhereInput
    /**
     * Limit how many CoursePlanners to delete.
     */
    limit?: number
  }

  /**
   * CoursePlanner without action
   */
  export type CoursePlannerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePlanner
     */
    select?: CoursePlannerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePlanner
     */
    omit?: CoursePlannerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePlannerInclude<ExtArgs> | null
  }


  /**
   * Model ForumCategory
   */

  export type AggregateForumCategory = {
    _count: ForumCategoryCountAggregateOutputType | null
    _min: ForumCategoryMinAggregateOutputType | null
    _max: ForumCategoryMaxAggregateOutputType | null
  }

  export type ForumCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    created_at: Date | null
  }

  export type ForumCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    created_at: Date | null
  }

  export type ForumCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    slug: number
    created_at: number
    _all: number
  }


  export type ForumCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    created_at?: true
  }

  export type ForumCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    created_at?: true
  }

  export type ForumCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    created_at?: true
    _all?: true
  }

  export type ForumCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumCategory to aggregate.
     */
    where?: ForumCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumCategories to fetch.
     */
    orderBy?: ForumCategoryOrderByWithRelationInput | ForumCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumCategories
    **/
    _count?: true | ForumCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumCategoryMaxAggregateInputType
  }

  export type GetForumCategoryAggregateType<T extends ForumCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateForumCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumCategory[P]>
      : GetScalarType<T[P], AggregateForumCategory[P]>
  }




  export type ForumCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumCategoryWhereInput
    orderBy?: ForumCategoryOrderByWithAggregationInput | ForumCategoryOrderByWithAggregationInput[]
    by: ForumCategoryScalarFieldEnum[] | ForumCategoryScalarFieldEnum
    having?: ForumCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumCategoryCountAggregateInputType | true
    _min?: ForumCategoryMinAggregateInputType
    _max?: ForumCategoryMaxAggregateInputType
  }

  export type ForumCategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    slug: string
    created_at: Date | null
    _count: ForumCategoryCountAggregateOutputType | null
    _min: ForumCategoryMinAggregateOutputType | null
    _max: ForumCategoryMaxAggregateOutputType | null
  }

  type GetForumCategoryGroupByPayload<T extends ForumCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ForumCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ForumCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    created_at?: boolean
    posts?: boolean | ForumCategory$postsArgs<ExtArgs>
    _count?: boolean | ForumCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumCategory"]>

  export type ForumCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["forumCategory"]>

  export type ForumCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["forumCategory"]>

  export type ForumCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    created_at?: boolean
  }

  export type ForumCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "slug" | "created_at", ExtArgs["result"]["forumCategory"]>
  export type ForumCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | ForumCategory$postsArgs<ExtArgs>
    _count?: boolean | ForumCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ForumCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ForumCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ForumCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumCategory"
    objects: {
      posts: Prisma.$ForumPostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      slug: string
      created_at: Date | null
    }, ExtArgs["result"]["forumCategory"]>
    composites: {}
  }

  type ForumCategoryGetPayload<S extends boolean | null | undefined | ForumCategoryDefaultArgs> = $Result.GetResult<Prisma.$ForumCategoryPayload, S>

  type ForumCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumCategoryCountAggregateInputType | true
    }

  export interface ForumCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumCategory'], meta: { name: 'ForumCategory' } }
    /**
     * Find zero or one ForumCategory that matches the filter.
     * @param {ForumCategoryFindUniqueArgs} args - Arguments to find a ForumCategory
     * @example
     * // Get one ForumCategory
     * const forumCategory = await prisma.forumCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumCategoryFindUniqueArgs>(args: SelectSubset<T, ForumCategoryFindUniqueArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumCategoryFindUniqueOrThrowArgs} args - Arguments to find a ForumCategory
     * @example
     * // Get one ForumCategory
     * const forumCategory = await prisma.forumCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCategoryFindFirstArgs} args - Arguments to find a ForumCategory
     * @example
     * // Get one ForumCategory
     * const forumCategory = await prisma.forumCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumCategoryFindFirstArgs>(args?: SelectSubset<T, ForumCategoryFindFirstArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCategoryFindFirstOrThrowArgs} args - Arguments to find a ForumCategory
     * @example
     * // Get one ForumCategory
     * const forumCategory = await prisma.forumCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumCategories
     * const forumCategories = await prisma.forumCategory.findMany()
     * 
     * // Get first 10 ForumCategories
     * const forumCategories = await prisma.forumCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumCategoryWithIdOnly = await prisma.forumCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumCategoryFindManyArgs>(args?: SelectSubset<T, ForumCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumCategory.
     * @param {ForumCategoryCreateArgs} args - Arguments to create a ForumCategory.
     * @example
     * // Create one ForumCategory
     * const ForumCategory = await prisma.forumCategory.create({
     *   data: {
     *     // ... data to create a ForumCategory
     *   }
     * })
     * 
     */
    create<T extends ForumCategoryCreateArgs>(args: SelectSubset<T, ForumCategoryCreateArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumCategories.
     * @param {ForumCategoryCreateManyArgs} args - Arguments to create many ForumCategories.
     * @example
     * // Create many ForumCategories
     * const forumCategory = await prisma.forumCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumCategoryCreateManyArgs>(args?: SelectSubset<T, ForumCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumCategories and returns the data saved in the database.
     * @param {ForumCategoryCreateManyAndReturnArgs} args - Arguments to create many ForumCategories.
     * @example
     * // Create many ForumCategories
     * const forumCategory = await prisma.forumCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumCategories and only return the `id`
     * const forumCategoryWithIdOnly = await prisma.forumCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumCategory.
     * @param {ForumCategoryDeleteArgs} args - Arguments to delete one ForumCategory.
     * @example
     * // Delete one ForumCategory
     * const ForumCategory = await prisma.forumCategory.delete({
     *   where: {
     *     // ... filter to delete one ForumCategory
     *   }
     * })
     * 
     */
    delete<T extends ForumCategoryDeleteArgs>(args: SelectSubset<T, ForumCategoryDeleteArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumCategory.
     * @param {ForumCategoryUpdateArgs} args - Arguments to update one ForumCategory.
     * @example
     * // Update one ForumCategory
     * const forumCategory = await prisma.forumCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumCategoryUpdateArgs>(args: SelectSubset<T, ForumCategoryUpdateArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumCategories.
     * @param {ForumCategoryDeleteManyArgs} args - Arguments to filter ForumCategories to delete.
     * @example
     * // Delete a few ForumCategories
     * const { count } = await prisma.forumCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumCategoryDeleteManyArgs>(args?: SelectSubset<T, ForumCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumCategories
     * const forumCategory = await prisma.forumCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumCategoryUpdateManyArgs>(args: SelectSubset<T, ForumCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumCategories and returns the data updated in the database.
     * @param {ForumCategoryUpdateManyAndReturnArgs} args - Arguments to update many ForumCategories.
     * @example
     * // Update many ForumCategories
     * const forumCategory = await prisma.forumCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumCategories and only return the `id`
     * const forumCategoryWithIdOnly = await prisma.forumCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumCategory.
     * @param {ForumCategoryUpsertArgs} args - Arguments to update or create a ForumCategory.
     * @example
     * // Update or create a ForumCategory
     * const forumCategory = await prisma.forumCategory.upsert({
     *   create: {
     *     // ... data to create a ForumCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumCategory we want to update
     *   }
     * })
     */
    upsert<T extends ForumCategoryUpsertArgs>(args: SelectSubset<T, ForumCategoryUpsertArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCategoryCountArgs} args - Arguments to filter ForumCategories to count.
     * @example
     * // Count the number of ForumCategories
     * const count = await prisma.forumCategory.count({
     *   where: {
     *     // ... the filter for the ForumCategories we want to count
     *   }
     * })
    **/
    count<T extends ForumCategoryCountArgs>(
      args?: Subset<T, ForumCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumCategoryAggregateArgs>(args: Subset<T, ForumCategoryAggregateArgs>): Prisma.PrismaPromise<GetForumCategoryAggregateType<T>>

    /**
     * Group by ForumCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ForumCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumCategory model
   */
  readonly fields: ForumCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends ForumCategory$postsArgs<ExtArgs> = {}>(args?: Subset<T, ForumCategory$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumCategory model
   */
  interface ForumCategoryFieldRefs {
    readonly id: FieldRef<"ForumCategory", 'String'>
    readonly name: FieldRef<"ForumCategory", 'String'>
    readonly description: FieldRef<"ForumCategory", 'String'>
    readonly slug: FieldRef<"ForumCategory", 'String'>
    readonly created_at: FieldRef<"ForumCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumCategory findUnique
   */
  export type ForumCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ForumCategory to fetch.
     */
    where: ForumCategoryWhereUniqueInput
  }

  /**
   * ForumCategory findUniqueOrThrow
   */
  export type ForumCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ForumCategory to fetch.
     */
    where: ForumCategoryWhereUniqueInput
  }

  /**
   * ForumCategory findFirst
   */
  export type ForumCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ForumCategory to fetch.
     */
    where?: ForumCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumCategories to fetch.
     */
    orderBy?: ForumCategoryOrderByWithRelationInput | ForumCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumCategories.
     */
    cursor?: ForumCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumCategories.
     */
    distinct?: ForumCategoryScalarFieldEnum | ForumCategoryScalarFieldEnum[]
  }

  /**
   * ForumCategory findFirstOrThrow
   */
  export type ForumCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ForumCategory to fetch.
     */
    where?: ForumCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumCategories to fetch.
     */
    orderBy?: ForumCategoryOrderByWithRelationInput | ForumCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumCategories.
     */
    cursor?: ForumCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumCategories.
     */
    distinct?: ForumCategoryScalarFieldEnum | ForumCategoryScalarFieldEnum[]
  }

  /**
   * ForumCategory findMany
   */
  export type ForumCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ForumCategories to fetch.
     */
    where?: ForumCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumCategories to fetch.
     */
    orderBy?: ForumCategoryOrderByWithRelationInput | ForumCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumCategories.
     */
    cursor?: ForumCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumCategories.
     */
    skip?: number
    distinct?: ForumCategoryScalarFieldEnum | ForumCategoryScalarFieldEnum[]
  }

  /**
   * ForumCategory create
   */
  export type ForumCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumCategory.
     */
    data: XOR<ForumCategoryCreateInput, ForumCategoryUncheckedCreateInput>
  }

  /**
   * ForumCategory createMany
   */
  export type ForumCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumCategories.
     */
    data: ForumCategoryCreateManyInput | ForumCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumCategory createManyAndReturn
   */
  export type ForumCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ForumCategories.
     */
    data: ForumCategoryCreateManyInput | ForumCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumCategory update
   */
  export type ForumCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumCategory.
     */
    data: XOR<ForumCategoryUpdateInput, ForumCategoryUncheckedUpdateInput>
    /**
     * Choose, which ForumCategory to update.
     */
    where: ForumCategoryWhereUniqueInput
  }

  /**
   * ForumCategory updateMany
   */
  export type ForumCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumCategories.
     */
    data: XOR<ForumCategoryUpdateManyMutationInput, ForumCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ForumCategories to update
     */
    where?: ForumCategoryWhereInput
    /**
     * Limit how many ForumCategories to update.
     */
    limit?: number
  }

  /**
   * ForumCategory updateManyAndReturn
   */
  export type ForumCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ForumCategories.
     */
    data: XOR<ForumCategoryUpdateManyMutationInput, ForumCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ForumCategories to update
     */
    where?: ForumCategoryWhereInput
    /**
     * Limit how many ForumCategories to update.
     */
    limit?: number
  }

  /**
   * ForumCategory upsert
   */
  export type ForumCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumCategory to update in case it exists.
     */
    where: ForumCategoryWhereUniqueInput
    /**
     * In case the ForumCategory found by the `where` argument doesn't exist, create a new ForumCategory with this data.
     */
    create: XOR<ForumCategoryCreateInput, ForumCategoryUncheckedCreateInput>
    /**
     * In case the ForumCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumCategoryUpdateInput, ForumCategoryUncheckedUpdateInput>
  }

  /**
   * ForumCategory delete
   */
  export type ForumCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
    /**
     * Filter which ForumCategory to delete.
     */
    where: ForumCategoryWhereUniqueInput
  }

  /**
   * ForumCategory deleteMany
   */
  export type ForumCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumCategories to delete
     */
    where?: ForumCategoryWhereInput
    /**
     * Limit how many ForumCategories to delete.
     */
    limit?: number
  }

  /**
   * ForumCategory.posts
   */
  export type ForumCategory$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    where?: ForumPostWhereInput
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    cursor?: ForumPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * ForumCategory without action
   */
  export type ForumCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumCategory
     */
    select?: ForumCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumCategory
     */
    omit?: ForumCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCategoryInclude<ExtArgs> | null
  }


  /**
   * Model ForumPost
   */

  export type AggregateForumPost = {
    _count: ForumPostCountAggregateOutputType | null
    _min: ForumPostMinAggregateOutputType | null
    _max: ForumPostMaxAggregateOutputType | null
  }

  export type ForumPostMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    author_id: string | null
    category_id: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
    notify_on_reply: boolean | null
  }

  export type ForumPostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    author_id: string | null
    category_id: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
    notify_on_reply: boolean | null
  }

  export type ForumPostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    author_id: number
    category_id: number
    status: number
    created_at: number
    updated_at: number
    notify_on_reply: number
    _all: number
  }


  export type ForumPostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    author_id?: true
    category_id?: true
    status?: true
    created_at?: true
    updated_at?: true
    notify_on_reply?: true
  }

  export type ForumPostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    author_id?: true
    category_id?: true
    status?: true
    created_at?: true
    updated_at?: true
    notify_on_reply?: true
  }

  export type ForumPostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    author_id?: true
    category_id?: true
    status?: true
    created_at?: true
    updated_at?: true
    notify_on_reply?: true
    _all?: true
  }

  export type ForumPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPost to aggregate.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumPosts
    **/
    _count?: true | ForumPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumPostMaxAggregateInputType
  }

  export type GetForumPostAggregateType<T extends ForumPostAggregateArgs> = {
        [P in keyof T & keyof AggregateForumPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumPost[P]>
      : GetScalarType<T[P], AggregateForumPost[P]>
  }




  export type ForumPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostWhereInput
    orderBy?: ForumPostOrderByWithAggregationInput | ForumPostOrderByWithAggregationInput[]
    by: ForumPostScalarFieldEnum[] | ForumPostScalarFieldEnum
    having?: ForumPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumPostCountAggregateInputType | true
    _min?: ForumPostMinAggregateInputType
    _max?: ForumPostMaxAggregateInputType
  }

  export type ForumPostGroupByOutputType = {
    id: string
    title: string
    content: string
    author_id: string
    category_id: string
    status: string
    created_at: Date | null
    updated_at: Date | null
    notify_on_reply: boolean
    _count: ForumPostCountAggregateOutputType | null
    _min: ForumPostMinAggregateOutputType | null
    _max: ForumPostMaxAggregateOutputType | null
  }

  type GetForumPostGroupByPayload<T extends ForumPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumPostGroupByOutputType[P]>
            : GetScalarType<T[P], ForumPostGroupByOutputType[P]>
        }
      >
    >


  export type ForumPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    category_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    notify_on_reply?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ForumCategoryDefaultArgs<ExtArgs>
    comments?: boolean | ForumPost$commentsArgs<ExtArgs>
    likes?: boolean | ForumPost$likesArgs<ExtArgs>
    views?: boolean | ForumPost$viewsArgs<ExtArgs>
    tags?: boolean | ForumPost$tagsArgs<ExtArgs>
    saved_by?: boolean | ForumPost$saved_byArgs<ExtArgs>
    notification_preferences?: boolean | ForumPost$notification_preferencesArgs<ExtArgs>
    _count?: boolean | ForumPostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPost"]>

  export type ForumPostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    category_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    notify_on_reply?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ForumCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPost"]>

  export type ForumPostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    category_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    notify_on_reply?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ForumCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPost"]>

  export type ForumPostSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    category_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    notify_on_reply?: boolean
  }

  export type ForumPostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "author_id" | "category_id" | "status" | "created_at" | "updated_at" | "notify_on_reply", ExtArgs["result"]["forumPost"]>
  export type ForumPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ForumCategoryDefaultArgs<ExtArgs>
    comments?: boolean | ForumPost$commentsArgs<ExtArgs>
    likes?: boolean | ForumPost$likesArgs<ExtArgs>
    views?: boolean | ForumPost$viewsArgs<ExtArgs>
    tags?: boolean | ForumPost$tagsArgs<ExtArgs>
    saved_by?: boolean | ForumPost$saved_byArgs<ExtArgs>
    notification_preferences?: boolean | ForumPost$notification_preferencesArgs<ExtArgs>
    _count?: boolean | ForumPostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ForumPostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ForumCategoryDefaultArgs<ExtArgs>
  }
  export type ForumPostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | ForumCategoryDefaultArgs<ExtArgs>
  }

  export type $ForumPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumPost"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$ForumCategoryPayload<ExtArgs>
      comments: Prisma.$ForumCommentPayload<ExtArgs>[]
      likes: Prisma.$ForumLikePayload<ExtArgs>[]
      views: Prisma.$ForumViewPayload<ExtArgs>[]
      tags: Prisma.$ForumPostTagPayload<ExtArgs>[]
      saved_by: Prisma.$ForumSavedPayload<ExtArgs>[]
      notification_preferences: Prisma.$ForumNotificationPreferencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      author_id: string
      category_id: string
      status: string
      created_at: Date | null
      updated_at: Date | null
      notify_on_reply: boolean
    }, ExtArgs["result"]["forumPost"]>
    composites: {}
  }

  type ForumPostGetPayload<S extends boolean | null | undefined | ForumPostDefaultArgs> = $Result.GetResult<Prisma.$ForumPostPayload, S>

  type ForumPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumPostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumPostCountAggregateInputType | true
    }

  export interface ForumPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumPost'], meta: { name: 'ForumPost' } }
    /**
     * Find zero or one ForumPost that matches the filter.
     * @param {ForumPostFindUniqueArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumPostFindUniqueArgs>(args: SelectSubset<T, ForumPostFindUniqueArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumPost that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumPostFindUniqueOrThrowArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumPostFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostFindFirstArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumPostFindFirstArgs>(args?: SelectSubset<T, ForumPostFindFirstArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostFindFirstOrThrowArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumPostFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumPosts
     * const forumPosts = await prisma.forumPost.findMany()
     * 
     * // Get first 10 ForumPosts
     * const forumPosts = await prisma.forumPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumPostWithIdOnly = await prisma.forumPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumPostFindManyArgs>(args?: SelectSubset<T, ForumPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumPost.
     * @param {ForumPostCreateArgs} args - Arguments to create a ForumPost.
     * @example
     * // Create one ForumPost
     * const ForumPost = await prisma.forumPost.create({
     *   data: {
     *     // ... data to create a ForumPost
     *   }
     * })
     * 
     */
    create<T extends ForumPostCreateArgs>(args: SelectSubset<T, ForumPostCreateArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumPosts.
     * @param {ForumPostCreateManyArgs} args - Arguments to create many ForumPosts.
     * @example
     * // Create many ForumPosts
     * const forumPost = await prisma.forumPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumPostCreateManyArgs>(args?: SelectSubset<T, ForumPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumPosts and returns the data saved in the database.
     * @param {ForumPostCreateManyAndReturnArgs} args - Arguments to create many ForumPosts.
     * @example
     * // Create many ForumPosts
     * const forumPost = await prisma.forumPost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumPosts and only return the `id`
     * const forumPostWithIdOnly = await prisma.forumPost.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumPostCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumPostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumPost.
     * @param {ForumPostDeleteArgs} args - Arguments to delete one ForumPost.
     * @example
     * // Delete one ForumPost
     * const ForumPost = await prisma.forumPost.delete({
     *   where: {
     *     // ... filter to delete one ForumPost
     *   }
     * })
     * 
     */
    delete<T extends ForumPostDeleteArgs>(args: SelectSubset<T, ForumPostDeleteArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumPost.
     * @param {ForumPostUpdateArgs} args - Arguments to update one ForumPost.
     * @example
     * // Update one ForumPost
     * const forumPost = await prisma.forumPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumPostUpdateArgs>(args: SelectSubset<T, ForumPostUpdateArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumPosts.
     * @param {ForumPostDeleteManyArgs} args - Arguments to filter ForumPosts to delete.
     * @example
     * // Delete a few ForumPosts
     * const { count } = await prisma.forumPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumPostDeleteManyArgs>(args?: SelectSubset<T, ForumPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumPosts
     * const forumPost = await prisma.forumPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumPostUpdateManyArgs>(args: SelectSubset<T, ForumPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPosts and returns the data updated in the database.
     * @param {ForumPostUpdateManyAndReturnArgs} args - Arguments to update many ForumPosts.
     * @example
     * // Update many ForumPosts
     * const forumPost = await prisma.forumPost.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumPosts and only return the `id`
     * const forumPostWithIdOnly = await prisma.forumPost.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumPostUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumPostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumPost.
     * @param {ForumPostUpsertArgs} args - Arguments to update or create a ForumPost.
     * @example
     * // Update or create a ForumPost
     * const forumPost = await prisma.forumPost.upsert({
     *   create: {
     *     // ... data to create a ForumPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumPost we want to update
     *   }
     * })
     */
    upsert<T extends ForumPostUpsertArgs>(args: SelectSubset<T, ForumPostUpsertArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostCountArgs} args - Arguments to filter ForumPosts to count.
     * @example
     * // Count the number of ForumPosts
     * const count = await prisma.forumPost.count({
     *   where: {
     *     // ... the filter for the ForumPosts we want to count
     *   }
     * })
    **/
    count<T extends ForumPostCountArgs>(
      args?: Subset<T, ForumPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumPostAggregateArgs>(args: Subset<T, ForumPostAggregateArgs>): Prisma.PrismaPromise<GetForumPostAggregateType<T>>

    /**
     * Group by ForumPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumPostGroupByArgs['orderBy'] }
        : { orderBy?: ForumPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumPost model
   */
  readonly fields: ForumPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends ForumCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumCategoryDefaultArgs<ExtArgs>>): Prisma__ForumCategoryClient<$Result.GetResult<Prisma.$ForumCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comments<T extends ForumPost$commentsArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends ForumPost$likesArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    views<T extends ForumPost$viewsArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$viewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tags<T extends ForumPost$tagsArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    saved_by<T extends ForumPost$saved_byArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$saved_byArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notification_preferences<T extends ForumPost$notification_preferencesArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$notification_preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumPost model
   */
  interface ForumPostFieldRefs {
    readonly id: FieldRef<"ForumPost", 'String'>
    readonly title: FieldRef<"ForumPost", 'String'>
    readonly content: FieldRef<"ForumPost", 'String'>
    readonly author_id: FieldRef<"ForumPost", 'String'>
    readonly category_id: FieldRef<"ForumPost", 'String'>
    readonly status: FieldRef<"ForumPost", 'String'>
    readonly created_at: FieldRef<"ForumPost", 'DateTime'>
    readonly updated_at: FieldRef<"ForumPost", 'DateTime'>
    readonly notify_on_reply: FieldRef<"ForumPost", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ForumPost findUnique
   */
  export type ForumPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost findUniqueOrThrow
   */
  export type ForumPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost findFirst
   */
  export type ForumPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPosts.
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPosts.
     */
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * ForumPost findFirstOrThrow
   */
  export type ForumPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPosts.
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPosts.
     */
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * ForumPost findMany
   */
  export type ForumPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPosts to fetch.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumPosts.
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * ForumPost create
   */
  export type ForumPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumPost.
     */
    data: XOR<ForumPostCreateInput, ForumPostUncheckedCreateInput>
  }

  /**
   * ForumPost createMany
   */
  export type ForumPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumPosts.
     */
    data: ForumPostCreateManyInput | ForumPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumPost createManyAndReturn
   */
  export type ForumPostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * The data used to create many ForumPosts.
     */
    data: ForumPostCreateManyInput | ForumPostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPost update
   */
  export type ForumPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumPost.
     */
    data: XOR<ForumPostUpdateInput, ForumPostUncheckedUpdateInput>
    /**
     * Choose, which ForumPost to update.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost updateMany
   */
  export type ForumPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumPosts.
     */
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyInput>
    /**
     * Filter which ForumPosts to update
     */
    where?: ForumPostWhereInput
    /**
     * Limit how many ForumPosts to update.
     */
    limit?: number
  }

  /**
   * ForumPost updateManyAndReturn
   */
  export type ForumPostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * The data used to update ForumPosts.
     */
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyInput>
    /**
     * Filter which ForumPosts to update
     */
    where?: ForumPostWhereInput
    /**
     * Limit how many ForumPosts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPost upsert
   */
  export type ForumPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumPost to update in case it exists.
     */
    where: ForumPostWhereUniqueInput
    /**
     * In case the ForumPost found by the `where` argument doesn't exist, create a new ForumPost with this data.
     */
    create: XOR<ForumPostCreateInput, ForumPostUncheckedCreateInput>
    /**
     * In case the ForumPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumPostUpdateInput, ForumPostUncheckedUpdateInput>
  }

  /**
   * ForumPost delete
   */
  export type ForumPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter which ForumPost to delete.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost deleteMany
   */
  export type ForumPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPosts to delete
     */
    where?: ForumPostWhereInput
    /**
     * Limit how many ForumPosts to delete.
     */
    limit?: number
  }

  /**
   * ForumPost.comments
   */
  export type ForumPost$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    where?: ForumCommentWhereInput
    orderBy?: ForumCommentOrderByWithRelationInput | ForumCommentOrderByWithRelationInput[]
    cursor?: ForumCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumCommentScalarFieldEnum | ForumCommentScalarFieldEnum[]
  }

  /**
   * ForumPost.likes
   */
  export type ForumPost$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    where?: ForumLikeWhereInput
    orderBy?: ForumLikeOrderByWithRelationInput | ForumLikeOrderByWithRelationInput[]
    cursor?: ForumLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumLikeScalarFieldEnum | ForumLikeScalarFieldEnum[]
  }

  /**
   * ForumPost.views
   */
  export type ForumPost$viewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    where?: ForumViewWhereInput
    orderBy?: ForumViewOrderByWithRelationInput | ForumViewOrderByWithRelationInput[]
    cursor?: ForumViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumViewScalarFieldEnum | ForumViewScalarFieldEnum[]
  }

  /**
   * ForumPost.tags
   */
  export type ForumPost$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    where?: ForumPostTagWhereInput
    orderBy?: ForumPostTagOrderByWithRelationInput | ForumPostTagOrderByWithRelationInput[]
    cursor?: ForumPostTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumPostTagScalarFieldEnum | ForumPostTagScalarFieldEnum[]
  }

  /**
   * ForumPost.saved_by
   */
  export type ForumPost$saved_byArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    where?: ForumSavedWhereInput
    orderBy?: ForumSavedOrderByWithRelationInput | ForumSavedOrderByWithRelationInput[]
    cursor?: ForumSavedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumSavedScalarFieldEnum | ForumSavedScalarFieldEnum[]
  }

  /**
   * ForumPost.notification_preferences
   */
  export type ForumPost$notification_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    where?: ForumNotificationPreferenceWhereInput
    orderBy?: ForumNotificationPreferenceOrderByWithRelationInput | ForumNotificationPreferenceOrderByWithRelationInput[]
    cursor?: ForumNotificationPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumNotificationPreferenceScalarFieldEnum | ForumNotificationPreferenceScalarFieldEnum[]
  }

  /**
   * ForumPost without action
   */
  export type ForumPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
  }


  /**
   * Model ForumComment
   */

  export type AggregateForumComment = {
    _count: ForumCommentCountAggregateOutputType | null
    _avg: ForumCommentAvgAggregateOutputType | null
    _sum: ForumCommentSumAggregateOutputType | null
    _min: ForumCommentMinAggregateOutputType | null
    _max: ForumCommentMaxAggregateOutputType | null
  }

  export type ForumCommentAvgAggregateOutputType = {
    like_count: number | null
    dislike_count: number | null
  }

  export type ForumCommentSumAggregateOutputType = {
    like_count: number | null
    dislike_count: number | null
  }

  export type ForumCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    post_id: string | null
    author_id: string | null
    parent_id: string | null
    created_at: Date | null
    updated_at: Date | null
    like_count: number | null
    dislike_count: number | null
  }

  export type ForumCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    post_id: string | null
    author_id: string | null
    parent_id: string | null
    created_at: Date | null
    updated_at: Date | null
    like_count: number | null
    dislike_count: number | null
  }

  export type ForumCommentCountAggregateOutputType = {
    id: number
    content: number
    post_id: number
    author_id: number
    parent_id: number
    created_at: number
    updated_at: number
    like_count: number
    dislike_count: number
    _all: number
  }


  export type ForumCommentAvgAggregateInputType = {
    like_count?: true
    dislike_count?: true
  }

  export type ForumCommentSumAggregateInputType = {
    like_count?: true
    dislike_count?: true
  }

  export type ForumCommentMinAggregateInputType = {
    id?: true
    content?: true
    post_id?: true
    author_id?: true
    parent_id?: true
    created_at?: true
    updated_at?: true
    like_count?: true
    dislike_count?: true
  }

  export type ForumCommentMaxAggregateInputType = {
    id?: true
    content?: true
    post_id?: true
    author_id?: true
    parent_id?: true
    created_at?: true
    updated_at?: true
    like_count?: true
    dislike_count?: true
  }

  export type ForumCommentCountAggregateInputType = {
    id?: true
    content?: true
    post_id?: true
    author_id?: true
    parent_id?: true
    created_at?: true
    updated_at?: true
    like_count?: true
    dislike_count?: true
    _all?: true
  }

  export type ForumCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumComment to aggregate.
     */
    where?: ForumCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumComments to fetch.
     */
    orderBy?: ForumCommentOrderByWithRelationInput | ForumCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumComments
    **/
    _count?: true | ForumCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ForumCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ForumCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumCommentMaxAggregateInputType
  }

  export type GetForumCommentAggregateType<T extends ForumCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateForumComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumComment[P]>
      : GetScalarType<T[P], AggregateForumComment[P]>
  }




  export type ForumCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumCommentWhereInput
    orderBy?: ForumCommentOrderByWithAggregationInput | ForumCommentOrderByWithAggregationInput[]
    by: ForumCommentScalarFieldEnum[] | ForumCommentScalarFieldEnum
    having?: ForumCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumCommentCountAggregateInputType | true
    _avg?: ForumCommentAvgAggregateInputType
    _sum?: ForumCommentSumAggregateInputType
    _min?: ForumCommentMinAggregateInputType
    _max?: ForumCommentMaxAggregateInputType
  }

  export type ForumCommentGroupByOutputType = {
    id: string
    content: string
    post_id: string
    author_id: string
    parent_id: string | null
    created_at: Date | null
    updated_at: Date | null
    like_count: number
    dislike_count: number
    _count: ForumCommentCountAggregateOutputType | null
    _avg: ForumCommentAvgAggregateOutputType | null
    _sum: ForumCommentSumAggregateOutputType | null
    _min: ForumCommentMinAggregateOutputType | null
    _max: ForumCommentMaxAggregateOutputType | null
  }

  type GetForumCommentGroupByPayload<T extends ForumCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumCommentGroupByOutputType[P]>
            : GetScalarType<T[P], ForumCommentGroupByOutputType[P]>
        }
      >
    >


  export type ForumCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    post_id?: boolean
    author_id?: boolean
    parent_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    like_count?: boolean
    dislike_count?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    parent?: boolean | ForumComment$parentArgs<ExtArgs>
    replies?: boolean | ForumComment$repliesArgs<ExtArgs>
    _count?: boolean | ForumCommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumComment"]>

  export type ForumCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    post_id?: boolean
    author_id?: boolean
    parent_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    like_count?: boolean
    dislike_count?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    parent?: boolean | ForumComment$parentArgs<ExtArgs>
  }, ExtArgs["result"]["forumComment"]>

  export type ForumCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    post_id?: boolean
    author_id?: boolean
    parent_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    like_count?: boolean
    dislike_count?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    parent?: boolean | ForumComment$parentArgs<ExtArgs>
  }, ExtArgs["result"]["forumComment"]>

  export type ForumCommentSelectScalar = {
    id?: boolean
    content?: boolean
    post_id?: boolean
    author_id?: boolean
    parent_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    like_count?: boolean
    dislike_count?: boolean
  }

  export type ForumCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "post_id" | "author_id" | "parent_id" | "created_at" | "updated_at" | "like_count" | "dislike_count", ExtArgs["result"]["forumComment"]>
  export type ForumCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    parent?: boolean | ForumComment$parentArgs<ExtArgs>
    replies?: boolean | ForumComment$repliesArgs<ExtArgs>
    _count?: boolean | ForumCommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ForumCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    parent?: boolean | ForumComment$parentArgs<ExtArgs>
  }
  export type ForumCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    parent?: boolean | ForumComment$parentArgs<ExtArgs>
  }

  export type $ForumCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumComment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$ForumPostPayload<ExtArgs>
      parent: Prisma.$ForumCommentPayload<ExtArgs> | null
      replies: Prisma.$ForumCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      post_id: string
      author_id: string
      parent_id: string | null
      created_at: Date | null
      updated_at: Date | null
      like_count: number
      dislike_count: number
    }, ExtArgs["result"]["forumComment"]>
    composites: {}
  }

  type ForumCommentGetPayload<S extends boolean | null | undefined | ForumCommentDefaultArgs> = $Result.GetResult<Prisma.$ForumCommentPayload, S>

  type ForumCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumCommentCountAggregateInputType | true
    }

  export interface ForumCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumComment'], meta: { name: 'ForumComment' } }
    /**
     * Find zero or one ForumComment that matches the filter.
     * @param {ForumCommentFindUniqueArgs} args - Arguments to find a ForumComment
     * @example
     * // Get one ForumComment
     * const forumComment = await prisma.forumComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumCommentFindUniqueArgs>(args: SelectSubset<T, ForumCommentFindUniqueArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumCommentFindUniqueOrThrowArgs} args - Arguments to find a ForumComment
     * @example
     * // Get one ForumComment
     * const forumComment = await prisma.forumComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCommentFindFirstArgs} args - Arguments to find a ForumComment
     * @example
     * // Get one ForumComment
     * const forumComment = await prisma.forumComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumCommentFindFirstArgs>(args?: SelectSubset<T, ForumCommentFindFirstArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCommentFindFirstOrThrowArgs} args - Arguments to find a ForumComment
     * @example
     * // Get one ForumComment
     * const forumComment = await prisma.forumComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumComments
     * const forumComments = await prisma.forumComment.findMany()
     * 
     * // Get first 10 ForumComments
     * const forumComments = await prisma.forumComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumCommentWithIdOnly = await prisma.forumComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumCommentFindManyArgs>(args?: SelectSubset<T, ForumCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumComment.
     * @param {ForumCommentCreateArgs} args - Arguments to create a ForumComment.
     * @example
     * // Create one ForumComment
     * const ForumComment = await prisma.forumComment.create({
     *   data: {
     *     // ... data to create a ForumComment
     *   }
     * })
     * 
     */
    create<T extends ForumCommentCreateArgs>(args: SelectSubset<T, ForumCommentCreateArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumComments.
     * @param {ForumCommentCreateManyArgs} args - Arguments to create many ForumComments.
     * @example
     * // Create many ForumComments
     * const forumComment = await prisma.forumComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumCommentCreateManyArgs>(args?: SelectSubset<T, ForumCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumComments and returns the data saved in the database.
     * @param {ForumCommentCreateManyAndReturnArgs} args - Arguments to create many ForumComments.
     * @example
     * // Create many ForumComments
     * const forumComment = await prisma.forumComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumComments and only return the `id`
     * const forumCommentWithIdOnly = await prisma.forumComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumComment.
     * @param {ForumCommentDeleteArgs} args - Arguments to delete one ForumComment.
     * @example
     * // Delete one ForumComment
     * const ForumComment = await prisma.forumComment.delete({
     *   where: {
     *     // ... filter to delete one ForumComment
     *   }
     * })
     * 
     */
    delete<T extends ForumCommentDeleteArgs>(args: SelectSubset<T, ForumCommentDeleteArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumComment.
     * @param {ForumCommentUpdateArgs} args - Arguments to update one ForumComment.
     * @example
     * // Update one ForumComment
     * const forumComment = await prisma.forumComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumCommentUpdateArgs>(args: SelectSubset<T, ForumCommentUpdateArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumComments.
     * @param {ForumCommentDeleteManyArgs} args - Arguments to filter ForumComments to delete.
     * @example
     * // Delete a few ForumComments
     * const { count } = await prisma.forumComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumCommentDeleteManyArgs>(args?: SelectSubset<T, ForumCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumComments
     * const forumComment = await prisma.forumComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumCommentUpdateManyArgs>(args: SelectSubset<T, ForumCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumComments and returns the data updated in the database.
     * @param {ForumCommentUpdateManyAndReturnArgs} args - Arguments to update many ForumComments.
     * @example
     * // Update many ForumComments
     * const forumComment = await prisma.forumComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumComments and only return the `id`
     * const forumCommentWithIdOnly = await prisma.forumComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumComment.
     * @param {ForumCommentUpsertArgs} args - Arguments to update or create a ForumComment.
     * @example
     * // Update or create a ForumComment
     * const forumComment = await prisma.forumComment.upsert({
     *   create: {
     *     // ... data to create a ForumComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumComment we want to update
     *   }
     * })
     */
    upsert<T extends ForumCommentUpsertArgs>(args: SelectSubset<T, ForumCommentUpsertArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCommentCountArgs} args - Arguments to filter ForumComments to count.
     * @example
     * // Count the number of ForumComments
     * const count = await prisma.forumComment.count({
     *   where: {
     *     // ... the filter for the ForumComments we want to count
     *   }
     * })
    **/
    count<T extends ForumCommentCountArgs>(
      args?: Subset<T, ForumCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumCommentAggregateArgs>(args: Subset<T, ForumCommentAggregateArgs>): Prisma.PrismaPromise<GetForumCommentAggregateType<T>>

    /**
     * Group by ForumComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumCommentGroupByArgs['orderBy'] }
        : { orderBy?: ForumCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumComment model
   */
  readonly fields: ForumCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends ForumComment$parentArgs<ExtArgs> = {}>(args?: Subset<T, ForumComment$parentArgs<ExtArgs>>): Prisma__ForumCommentClient<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    replies<T extends ForumComment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, ForumComment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumComment model
   */
  interface ForumCommentFieldRefs {
    readonly id: FieldRef<"ForumComment", 'String'>
    readonly content: FieldRef<"ForumComment", 'String'>
    readonly post_id: FieldRef<"ForumComment", 'String'>
    readonly author_id: FieldRef<"ForumComment", 'String'>
    readonly parent_id: FieldRef<"ForumComment", 'String'>
    readonly created_at: FieldRef<"ForumComment", 'DateTime'>
    readonly updated_at: FieldRef<"ForumComment", 'DateTime'>
    readonly like_count: FieldRef<"ForumComment", 'Int'>
    readonly dislike_count: FieldRef<"ForumComment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ForumComment findUnique
   */
  export type ForumCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * Filter, which ForumComment to fetch.
     */
    where: ForumCommentWhereUniqueInput
  }

  /**
   * ForumComment findUniqueOrThrow
   */
  export type ForumCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * Filter, which ForumComment to fetch.
     */
    where: ForumCommentWhereUniqueInput
  }

  /**
   * ForumComment findFirst
   */
  export type ForumCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * Filter, which ForumComment to fetch.
     */
    where?: ForumCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumComments to fetch.
     */
    orderBy?: ForumCommentOrderByWithRelationInput | ForumCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumComments.
     */
    cursor?: ForumCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumComments.
     */
    distinct?: ForumCommentScalarFieldEnum | ForumCommentScalarFieldEnum[]
  }

  /**
   * ForumComment findFirstOrThrow
   */
  export type ForumCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * Filter, which ForumComment to fetch.
     */
    where?: ForumCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumComments to fetch.
     */
    orderBy?: ForumCommentOrderByWithRelationInput | ForumCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumComments.
     */
    cursor?: ForumCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumComments.
     */
    distinct?: ForumCommentScalarFieldEnum | ForumCommentScalarFieldEnum[]
  }

  /**
   * ForumComment findMany
   */
  export type ForumCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * Filter, which ForumComments to fetch.
     */
    where?: ForumCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumComments to fetch.
     */
    orderBy?: ForumCommentOrderByWithRelationInput | ForumCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumComments.
     */
    cursor?: ForumCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumComments.
     */
    skip?: number
    distinct?: ForumCommentScalarFieldEnum | ForumCommentScalarFieldEnum[]
  }

  /**
   * ForumComment create
   */
  export type ForumCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumComment.
     */
    data: XOR<ForumCommentCreateInput, ForumCommentUncheckedCreateInput>
  }

  /**
   * ForumComment createMany
   */
  export type ForumCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumComments.
     */
    data: ForumCommentCreateManyInput | ForumCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumComment createManyAndReturn
   */
  export type ForumCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * The data used to create many ForumComments.
     */
    data: ForumCommentCreateManyInput | ForumCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumComment update
   */
  export type ForumCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumComment.
     */
    data: XOR<ForumCommentUpdateInput, ForumCommentUncheckedUpdateInput>
    /**
     * Choose, which ForumComment to update.
     */
    where: ForumCommentWhereUniqueInput
  }

  /**
   * ForumComment updateMany
   */
  export type ForumCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumComments.
     */
    data: XOR<ForumCommentUpdateManyMutationInput, ForumCommentUncheckedUpdateManyInput>
    /**
     * Filter which ForumComments to update
     */
    where?: ForumCommentWhereInput
    /**
     * Limit how many ForumComments to update.
     */
    limit?: number
  }

  /**
   * ForumComment updateManyAndReturn
   */
  export type ForumCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * The data used to update ForumComments.
     */
    data: XOR<ForumCommentUpdateManyMutationInput, ForumCommentUncheckedUpdateManyInput>
    /**
     * Filter which ForumComments to update
     */
    where?: ForumCommentWhereInput
    /**
     * Limit how many ForumComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumComment upsert
   */
  export type ForumCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumComment to update in case it exists.
     */
    where: ForumCommentWhereUniqueInput
    /**
     * In case the ForumComment found by the `where` argument doesn't exist, create a new ForumComment with this data.
     */
    create: XOR<ForumCommentCreateInput, ForumCommentUncheckedCreateInput>
    /**
     * In case the ForumComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumCommentUpdateInput, ForumCommentUncheckedUpdateInput>
  }

  /**
   * ForumComment delete
   */
  export type ForumCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    /**
     * Filter which ForumComment to delete.
     */
    where: ForumCommentWhereUniqueInput
  }

  /**
   * ForumComment deleteMany
   */
  export type ForumCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumComments to delete
     */
    where?: ForumCommentWhereInput
    /**
     * Limit how many ForumComments to delete.
     */
    limit?: number
  }

  /**
   * ForumComment.parent
   */
  export type ForumComment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    where?: ForumCommentWhereInput
  }

  /**
   * ForumComment.replies
   */
  export type ForumComment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
    where?: ForumCommentWhereInput
    orderBy?: ForumCommentOrderByWithRelationInput | ForumCommentOrderByWithRelationInput[]
    cursor?: ForumCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumCommentScalarFieldEnum | ForumCommentScalarFieldEnum[]
  }

  /**
   * ForumComment without action
   */
  export type ForumCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumComment
     */
    select?: ForumCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumComment
     */
    omit?: ForumCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumCommentInclude<ExtArgs> | null
  }


  /**
   * Model ForumLike
   */

  export type AggregateForumLike = {
    _count: ForumLikeCountAggregateOutputType | null
    _min: ForumLikeMinAggregateOutputType | null
    _max: ForumLikeMaxAggregateOutputType | null
  }

  export type ForumLikeMinAggregateOutputType = {
    id: string | null
    post_id: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type ForumLikeMaxAggregateOutputType = {
    id: string | null
    post_id: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type ForumLikeCountAggregateOutputType = {
    id: number
    post_id: number
    user_id: number
    created_at: number
    _all: number
  }


  export type ForumLikeMinAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    created_at?: true
  }

  export type ForumLikeMaxAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    created_at?: true
  }

  export type ForumLikeCountAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    created_at?: true
    _all?: true
  }

  export type ForumLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumLike to aggregate.
     */
    where?: ForumLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumLikes to fetch.
     */
    orderBy?: ForumLikeOrderByWithRelationInput | ForumLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumLikes
    **/
    _count?: true | ForumLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumLikeMaxAggregateInputType
  }

  export type GetForumLikeAggregateType<T extends ForumLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateForumLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumLike[P]>
      : GetScalarType<T[P], AggregateForumLike[P]>
  }




  export type ForumLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumLikeWhereInput
    orderBy?: ForumLikeOrderByWithAggregationInput | ForumLikeOrderByWithAggregationInput[]
    by: ForumLikeScalarFieldEnum[] | ForumLikeScalarFieldEnum
    having?: ForumLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumLikeCountAggregateInputType | true
    _min?: ForumLikeMinAggregateInputType
    _max?: ForumLikeMaxAggregateInputType
  }

  export type ForumLikeGroupByOutputType = {
    id: string
    post_id: string
    user_id: string
    created_at: Date | null
    _count: ForumLikeCountAggregateOutputType | null
    _min: ForumLikeMinAggregateOutputType | null
    _max: ForumLikeMaxAggregateOutputType | null
  }

  type GetForumLikeGroupByPayload<T extends ForumLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumLikeGroupByOutputType[P]>
            : GetScalarType<T[P], ForumLikeGroupByOutputType[P]>
        }
      >
    >


  export type ForumLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumLike"]>

  export type ForumLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumLike"]>

  export type ForumLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumLike"]>

  export type ForumLikeSelectScalar = {
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
  }

  export type ForumLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "post_id" | "user_id" | "created_at", ExtArgs["result"]["forumLike"]>
  export type ForumLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ForumLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumLike"
    objects: {
      post: Prisma.$ForumPostPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      post_id: string
      user_id: string
      created_at: Date | null
    }, ExtArgs["result"]["forumLike"]>
    composites: {}
  }

  type ForumLikeGetPayload<S extends boolean | null | undefined | ForumLikeDefaultArgs> = $Result.GetResult<Prisma.$ForumLikePayload, S>

  type ForumLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumLikeCountAggregateInputType | true
    }

  export interface ForumLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumLike'], meta: { name: 'ForumLike' } }
    /**
     * Find zero or one ForumLike that matches the filter.
     * @param {ForumLikeFindUniqueArgs} args - Arguments to find a ForumLike
     * @example
     * // Get one ForumLike
     * const forumLike = await prisma.forumLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumLikeFindUniqueArgs>(args: SelectSubset<T, ForumLikeFindUniqueArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumLikeFindUniqueOrThrowArgs} args - Arguments to find a ForumLike
     * @example
     * // Get one ForumLike
     * const forumLike = await prisma.forumLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumLikeFindFirstArgs} args - Arguments to find a ForumLike
     * @example
     * // Get one ForumLike
     * const forumLike = await prisma.forumLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumLikeFindFirstArgs>(args?: SelectSubset<T, ForumLikeFindFirstArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumLikeFindFirstOrThrowArgs} args - Arguments to find a ForumLike
     * @example
     * // Get one ForumLike
     * const forumLike = await prisma.forumLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumLikes
     * const forumLikes = await prisma.forumLike.findMany()
     * 
     * // Get first 10 ForumLikes
     * const forumLikes = await prisma.forumLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumLikeWithIdOnly = await prisma.forumLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumLikeFindManyArgs>(args?: SelectSubset<T, ForumLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumLike.
     * @param {ForumLikeCreateArgs} args - Arguments to create a ForumLike.
     * @example
     * // Create one ForumLike
     * const ForumLike = await prisma.forumLike.create({
     *   data: {
     *     // ... data to create a ForumLike
     *   }
     * })
     * 
     */
    create<T extends ForumLikeCreateArgs>(args: SelectSubset<T, ForumLikeCreateArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumLikes.
     * @param {ForumLikeCreateManyArgs} args - Arguments to create many ForumLikes.
     * @example
     * // Create many ForumLikes
     * const forumLike = await prisma.forumLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumLikeCreateManyArgs>(args?: SelectSubset<T, ForumLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumLikes and returns the data saved in the database.
     * @param {ForumLikeCreateManyAndReturnArgs} args - Arguments to create many ForumLikes.
     * @example
     * // Create many ForumLikes
     * const forumLike = await prisma.forumLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumLikes and only return the `id`
     * const forumLikeWithIdOnly = await prisma.forumLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumLike.
     * @param {ForumLikeDeleteArgs} args - Arguments to delete one ForumLike.
     * @example
     * // Delete one ForumLike
     * const ForumLike = await prisma.forumLike.delete({
     *   where: {
     *     // ... filter to delete one ForumLike
     *   }
     * })
     * 
     */
    delete<T extends ForumLikeDeleteArgs>(args: SelectSubset<T, ForumLikeDeleteArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumLike.
     * @param {ForumLikeUpdateArgs} args - Arguments to update one ForumLike.
     * @example
     * // Update one ForumLike
     * const forumLike = await prisma.forumLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumLikeUpdateArgs>(args: SelectSubset<T, ForumLikeUpdateArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumLikes.
     * @param {ForumLikeDeleteManyArgs} args - Arguments to filter ForumLikes to delete.
     * @example
     * // Delete a few ForumLikes
     * const { count } = await prisma.forumLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumLikeDeleteManyArgs>(args?: SelectSubset<T, ForumLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumLikes
     * const forumLike = await prisma.forumLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumLikeUpdateManyArgs>(args: SelectSubset<T, ForumLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumLikes and returns the data updated in the database.
     * @param {ForumLikeUpdateManyAndReturnArgs} args - Arguments to update many ForumLikes.
     * @example
     * // Update many ForumLikes
     * const forumLike = await prisma.forumLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumLikes and only return the `id`
     * const forumLikeWithIdOnly = await prisma.forumLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumLike.
     * @param {ForumLikeUpsertArgs} args - Arguments to update or create a ForumLike.
     * @example
     * // Update or create a ForumLike
     * const forumLike = await prisma.forumLike.upsert({
     *   create: {
     *     // ... data to create a ForumLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumLike we want to update
     *   }
     * })
     */
    upsert<T extends ForumLikeUpsertArgs>(args: SelectSubset<T, ForumLikeUpsertArgs<ExtArgs>>): Prisma__ForumLikeClient<$Result.GetResult<Prisma.$ForumLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumLikeCountArgs} args - Arguments to filter ForumLikes to count.
     * @example
     * // Count the number of ForumLikes
     * const count = await prisma.forumLike.count({
     *   where: {
     *     // ... the filter for the ForumLikes we want to count
     *   }
     * })
    **/
    count<T extends ForumLikeCountArgs>(
      args?: Subset<T, ForumLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumLikeAggregateArgs>(args: Subset<T, ForumLikeAggregateArgs>): Prisma.PrismaPromise<GetForumLikeAggregateType<T>>

    /**
     * Group by ForumLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumLikeGroupByArgs['orderBy'] }
        : { orderBy?: ForumLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumLike model
   */
  readonly fields: ForumLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumLike model
   */
  interface ForumLikeFieldRefs {
    readonly id: FieldRef<"ForumLike", 'String'>
    readonly post_id: FieldRef<"ForumLike", 'String'>
    readonly user_id: FieldRef<"ForumLike", 'String'>
    readonly created_at: FieldRef<"ForumLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumLike findUnique
   */
  export type ForumLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumLike to fetch.
     */
    where: ForumLikeWhereUniqueInput
  }

  /**
   * ForumLike findUniqueOrThrow
   */
  export type ForumLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumLike to fetch.
     */
    where: ForumLikeWhereUniqueInput
  }

  /**
   * ForumLike findFirst
   */
  export type ForumLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumLike to fetch.
     */
    where?: ForumLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumLikes to fetch.
     */
    orderBy?: ForumLikeOrderByWithRelationInput | ForumLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumLikes.
     */
    cursor?: ForumLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumLikes.
     */
    distinct?: ForumLikeScalarFieldEnum | ForumLikeScalarFieldEnum[]
  }

  /**
   * ForumLike findFirstOrThrow
   */
  export type ForumLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumLike to fetch.
     */
    where?: ForumLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumLikes to fetch.
     */
    orderBy?: ForumLikeOrderByWithRelationInput | ForumLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumLikes.
     */
    cursor?: ForumLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumLikes.
     */
    distinct?: ForumLikeScalarFieldEnum | ForumLikeScalarFieldEnum[]
  }

  /**
   * ForumLike findMany
   */
  export type ForumLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumLikes to fetch.
     */
    where?: ForumLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumLikes to fetch.
     */
    orderBy?: ForumLikeOrderByWithRelationInput | ForumLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumLikes.
     */
    cursor?: ForumLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumLikes.
     */
    skip?: number
    distinct?: ForumLikeScalarFieldEnum | ForumLikeScalarFieldEnum[]
  }

  /**
   * ForumLike create
   */
  export type ForumLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumLike.
     */
    data: XOR<ForumLikeCreateInput, ForumLikeUncheckedCreateInput>
  }

  /**
   * ForumLike createMany
   */
  export type ForumLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumLikes.
     */
    data: ForumLikeCreateManyInput | ForumLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumLike createManyAndReturn
   */
  export type ForumLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * The data used to create many ForumLikes.
     */
    data: ForumLikeCreateManyInput | ForumLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumLike update
   */
  export type ForumLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumLike.
     */
    data: XOR<ForumLikeUpdateInput, ForumLikeUncheckedUpdateInput>
    /**
     * Choose, which ForumLike to update.
     */
    where: ForumLikeWhereUniqueInput
  }

  /**
   * ForumLike updateMany
   */
  export type ForumLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumLikes.
     */
    data: XOR<ForumLikeUpdateManyMutationInput, ForumLikeUncheckedUpdateManyInput>
    /**
     * Filter which ForumLikes to update
     */
    where?: ForumLikeWhereInput
    /**
     * Limit how many ForumLikes to update.
     */
    limit?: number
  }

  /**
   * ForumLike updateManyAndReturn
   */
  export type ForumLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * The data used to update ForumLikes.
     */
    data: XOR<ForumLikeUpdateManyMutationInput, ForumLikeUncheckedUpdateManyInput>
    /**
     * Filter which ForumLikes to update
     */
    where?: ForumLikeWhereInput
    /**
     * Limit how many ForumLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumLike upsert
   */
  export type ForumLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumLike to update in case it exists.
     */
    where: ForumLikeWhereUniqueInput
    /**
     * In case the ForumLike found by the `where` argument doesn't exist, create a new ForumLike with this data.
     */
    create: XOR<ForumLikeCreateInput, ForumLikeUncheckedCreateInput>
    /**
     * In case the ForumLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumLikeUpdateInput, ForumLikeUncheckedUpdateInput>
  }

  /**
   * ForumLike delete
   */
  export type ForumLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
    /**
     * Filter which ForumLike to delete.
     */
    where: ForumLikeWhereUniqueInput
  }

  /**
   * ForumLike deleteMany
   */
  export type ForumLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumLikes to delete
     */
    where?: ForumLikeWhereInput
    /**
     * Limit how many ForumLikes to delete.
     */
    limit?: number
  }

  /**
   * ForumLike without action
   */
  export type ForumLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumLike
     */
    select?: ForumLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumLike
     */
    omit?: ForumLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumLikeInclude<ExtArgs> | null
  }


  /**
   * Model ForumPostTag
   */

  export type AggregateForumPostTag = {
    _count: ForumPostTagCountAggregateOutputType | null
    _min: ForumPostTagMinAggregateOutputType | null
    _max: ForumPostTagMaxAggregateOutputType | null
  }

  export type ForumPostTagMinAggregateOutputType = {
    id: string | null
    post_id: string | null
    tag: string | null
    created_at: Date | null
  }

  export type ForumPostTagMaxAggregateOutputType = {
    id: string | null
    post_id: string | null
    tag: string | null
    created_at: Date | null
  }

  export type ForumPostTagCountAggregateOutputType = {
    id: number
    post_id: number
    tag: number
    created_at: number
    _all: number
  }


  export type ForumPostTagMinAggregateInputType = {
    id?: true
    post_id?: true
    tag?: true
    created_at?: true
  }

  export type ForumPostTagMaxAggregateInputType = {
    id?: true
    post_id?: true
    tag?: true
    created_at?: true
  }

  export type ForumPostTagCountAggregateInputType = {
    id?: true
    post_id?: true
    tag?: true
    created_at?: true
    _all?: true
  }

  export type ForumPostTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPostTag to aggregate.
     */
    where?: ForumPostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostTags to fetch.
     */
    orderBy?: ForumPostTagOrderByWithRelationInput | ForumPostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumPostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumPostTags
    **/
    _count?: true | ForumPostTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumPostTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumPostTagMaxAggregateInputType
  }

  export type GetForumPostTagAggregateType<T extends ForumPostTagAggregateArgs> = {
        [P in keyof T & keyof AggregateForumPostTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumPostTag[P]>
      : GetScalarType<T[P], AggregateForumPostTag[P]>
  }




  export type ForumPostTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostTagWhereInput
    orderBy?: ForumPostTagOrderByWithAggregationInput | ForumPostTagOrderByWithAggregationInput[]
    by: ForumPostTagScalarFieldEnum[] | ForumPostTagScalarFieldEnum
    having?: ForumPostTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumPostTagCountAggregateInputType | true
    _min?: ForumPostTagMinAggregateInputType
    _max?: ForumPostTagMaxAggregateInputType
  }

  export type ForumPostTagGroupByOutputType = {
    id: string
    post_id: string
    tag: string
    created_at: Date | null
    _count: ForumPostTagCountAggregateOutputType | null
    _min: ForumPostTagMinAggregateOutputType | null
    _max: ForumPostTagMaxAggregateOutputType | null
  }

  type GetForumPostTagGroupByPayload<T extends ForumPostTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumPostTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumPostTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumPostTagGroupByOutputType[P]>
            : GetScalarType<T[P], ForumPostTagGroupByOutputType[P]>
        }
      >
    >


  export type ForumPostTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    tag?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPostTag"]>

  export type ForumPostTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    tag?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPostTag"]>

  export type ForumPostTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    tag?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPostTag"]>

  export type ForumPostTagSelectScalar = {
    id?: boolean
    post_id?: boolean
    tag?: boolean
    created_at?: boolean
  }

  export type ForumPostTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "post_id" | "tag" | "created_at", ExtArgs["result"]["forumPostTag"]>
  export type ForumPostTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
  }
  export type ForumPostTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
  }
  export type ForumPostTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
  }

  export type $ForumPostTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumPostTag"
    objects: {
      post: Prisma.$ForumPostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      post_id: string
      tag: string
      created_at: Date | null
    }, ExtArgs["result"]["forumPostTag"]>
    composites: {}
  }

  type ForumPostTagGetPayload<S extends boolean | null | undefined | ForumPostTagDefaultArgs> = $Result.GetResult<Prisma.$ForumPostTagPayload, S>

  type ForumPostTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumPostTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumPostTagCountAggregateInputType | true
    }

  export interface ForumPostTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumPostTag'], meta: { name: 'ForumPostTag' } }
    /**
     * Find zero or one ForumPostTag that matches the filter.
     * @param {ForumPostTagFindUniqueArgs} args - Arguments to find a ForumPostTag
     * @example
     * // Get one ForumPostTag
     * const forumPostTag = await prisma.forumPostTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumPostTagFindUniqueArgs>(args: SelectSubset<T, ForumPostTagFindUniqueArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumPostTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumPostTagFindUniqueOrThrowArgs} args - Arguments to find a ForumPostTag
     * @example
     * // Get one ForumPostTag
     * const forumPostTag = await prisma.forumPostTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumPostTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumPostTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPostTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostTagFindFirstArgs} args - Arguments to find a ForumPostTag
     * @example
     * // Get one ForumPostTag
     * const forumPostTag = await prisma.forumPostTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumPostTagFindFirstArgs>(args?: SelectSubset<T, ForumPostTagFindFirstArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPostTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostTagFindFirstOrThrowArgs} args - Arguments to find a ForumPostTag
     * @example
     * // Get one ForumPostTag
     * const forumPostTag = await prisma.forumPostTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumPostTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumPostTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumPostTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumPostTags
     * const forumPostTags = await prisma.forumPostTag.findMany()
     * 
     * // Get first 10 ForumPostTags
     * const forumPostTags = await prisma.forumPostTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumPostTagWithIdOnly = await prisma.forumPostTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumPostTagFindManyArgs>(args?: SelectSubset<T, ForumPostTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumPostTag.
     * @param {ForumPostTagCreateArgs} args - Arguments to create a ForumPostTag.
     * @example
     * // Create one ForumPostTag
     * const ForumPostTag = await prisma.forumPostTag.create({
     *   data: {
     *     // ... data to create a ForumPostTag
     *   }
     * })
     * 
     */
    create<T extends ForumPostTagCreateArgs>(args: SelectSubset<T, ForumPostTagCreateArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumPostTags.
     * @param {ForumPostTagCreateManyArgs} args - Arguments to create many ForumPostTags.
     * @example
     * // Create many ForumPostTags
     * const forumPostTag = await prisma.forumPostTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumPostTagCreateManyArgs>(args?: SelectSubset<T, ForumPostTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumPostTags and returns the data saved in the database.
     * @param {ForumPostTagCreateManyAndReturnArgs} args - Arguments to create many ForumPostTags.
     * @example
     * // Create many ForumPostTags
     * const forumPostTag = await prisma.forumPostTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumPostTags and only return the `id`
     * const forumPostTagWithIdOnly = await prisma.forumPostTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumPostTagCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumPostTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumPostTag.
     * @param {ForumPostTagDeleteArgs} args - Arguments to delete one ForumPostTag.
     * @example
     * // Delete one ForumPostTag
     * const ForumPostTag = await prisma.forumPostTag.delete({
     *   where: {
     *     // ... filter to delete one ForumPostTag
     *   }
     * })
     * 
     */
    delete<T extends ForumPostTagDeleteArgs>(args: SelectSubset<T, ForumPostTagDeleteArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumPostTag.
     * @param {ForumPostTagUpdateArgs} args - Arguments to update one ForumPostTag.
     * @example
     * // Update one ForumPostTag
     * const forumPostTag = await prisma.forumPostTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumPostTagUpdateArgs>(args: SelectSubset<T, ForumPostTagUpdateArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumPostTags.
     * @param {ForumPostTagDeleteManyArgs} args - Arguments to filter ForumPostTags to delete.
     * @example
     * // Delete a few ForumPostTags
     * const { count } = await prisma.forumPostTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumPostTagDeleteManyArgs>(args?: SelectSubset<T, ForumPostTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPostTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumPostTags
     * const forumPostTag = await prisma.forumPostTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumPostTagUpdateManyArgs>(args: SelectSubset<T, ForumPostTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPostTags and returns the data updated in the database.
     * @param {ForumPostTagUpdateManyAndReturnArgs} args - Arguments to update many ForumPostTags.
     * @example
     * // Update many ForumPostTags
     * const forumPostTag = await prisma.forumPostTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumPostTags and only return the `id`
     * const forumPostTagWithIdOnly = await prisma.forumPostTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumPostTagUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumPostTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumPostTag.
     * @param {ForumPostTagUpsertArgs} args - Arguments to update or create a ForumPostTag.
     * @example
     * // Update or create a ForumPostTag
     * const forumPostTag = await prisma.forumPostTag.upsert({
     *   create: {
     *     // ... data to create a ForumPostTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumPostTag we want to update
     *   }
     * })
     */
    upsert<T extends ForumPostTagUpsertArgs>(args: SelectSubset<T, ForumPostTagUpsertArgs<ExtArgs>>): Prisma__ForumPostTagClient<$Result.GetResult<Prisma.$ForumPostTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumPostTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostTagCountArgs} args - Arguments to filter ForumPostTags to count.
     * @example
     * // Count the number of ForumPostTags
     * const count = await prisma.forumPostTag.count({
     *   where: {
     *     // ... the filter for the ForumPostTags we want to count
     *   }
     * })
    **/
    count<T extends ForumPostTagCountArgs>(
      args?: Subset<T, ForumPostTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumPostTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumPostTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumPostTagAggregateArgs>(args: Subset<T, ForumPostTagAggregateArgs>): Prisma.PrismaPromise<GetForumPostTagAggregateType<T>>

    /**
     * Group by ForumPostTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumPostTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumPostTagGroupByArgs['orderBy'] }
        : { orderBy?: ForumPostTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumPostTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumPostTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumPostTag model
   */
  readonly fields: ForumPostTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumPostTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumPostTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumPostTag model
   */
  interface ForumPostTagFieldRefs {
    readonly id: FieldRef<"ForumPostTag", 'String'>
    readonly post_id: FieldRef<"ForumPostTag", 'String'>
    readonly tag: FieldRef<"ForumPostTag", 'String'>
    readonly created_at: FieldRef<"ForumPostTag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumPostTag findUnique
   */
  export type ForumPostTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostTag to fetch.
     */
    where: ForumPostTagWhereUniqueInput
  }

  /**
   * ForumPostTag findUniqueOrThrow
   */
  export type ForumPostTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostTag to fetch.
     */
    where: ForumPostTagWhereUniqueInput
  }

  /**
   * ForumPostTag findFirst
   */
  export type ForumPostTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostTag to fetch.
     */
    where?: ForumPostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostTags to fetch.
     */
    orderBy?: ForumPostTagOrderByWithRelationInput | ForumPostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPostTags.
     */
    cursor?: ForumPostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPostTags.
     */
    distinct?: ForumPostTagScalarFieldEnum | ForumPostTagScalarFieldEnum[]
  }

  /**
   * ForumPostTag findFirstOrThrow
   */
  export type ForumPostTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostTag to fetch.
     */
    where?: ForumPostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostTags to fetch.
     */
    orderBy?: ForumPostTagOrderByWithRelationInput | ForumPostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPostTags.
     */
    cursor?: ForumPostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPostTags.
     */
    distinct?: ForumPostTagScalarFieldEnum | ForumPostTagScalarFieldEnum[]
  }

  /**
   * ForumPostTag findMany
   */
  export type ForumPostTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostTags to fetch.
     */
    where?: ForumPostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostTags to fetch.
     */
    orderBy?: ForumPostTagOrderByWithRelationInput | ForumPostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumPostTags.
     */
    cursor?: ForumPostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostTags.
     */
    skip?: number
    distinct?: ForumPostTagScalarFieldEnum | ForumPostTagScalarFieldEnum[]
  }

  /**
   * ForumPostTag create
   */
  export type ForumPostTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumPostTag.
     */
    data: XOR<ForumPostTagCreateInput, ForumPostTagUncheckedCreateInput>
  }

  /**
   * ForumPostTag createMany
   */
  export type ForumPostTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumPostTags.
     */
    data: ForumPostTagCreateManyInput | ForumPostTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumPostTag createManyAndReturn
   */
  export type ForumPostTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * The data used to create many ForumPostTags.
     */
    data: ForumPostTagCreateManyInput | ForumPostTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPostTag update
   */
  export type ForumPostTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumPostTag.
     */
    data: XOR<ForumPostTagUpdateInput, ForumPostTagUncheckedUpdateInput>
    /**
     * Choose, which ForumPostTag to update.
     */
    where: ForumPostTagWhereUniqueInput
  }

  /**
   * ForumPostTag updateMany
   */
  export type ForumPostTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumPostTags.
     */
    data: XOR<ForumPostTagUpdateManyMutationInput, ForumPostTagUncheckedUpdateManyInput>
    /**
     * Filter which ForumPostTags to update
     */
    where?: ForumPostTagWhereInput
    /**
     * Limit how many ForumPostTags to update.
     */
    limit?: number
  }

  /**
   * ForumPostTag updateManyAndReturn
   */
  export type ForumPostTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * The data used to update ForumPostTags.
     */
    data: XOR<ForumPostTagUpdateManyMutationInput, ForumPostTagUncheckedUpdateManyInput>
    /**
     * Filter which ForumPostTags to update
     */
    where?: ForumPostTagWhereInput
    /**
     * Limit how many ForumPostTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPostTag upsert
   */
  export type ForumPostTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumPostTag to update in case it exists.
     */
    where: ForumPostTagWhereUniqueInput
    /**
     * In case the ForumPostTag found by the `where` argument doesn't exist, create a new ForumPostTag with this data.
     */
    create: XOR<ForumPostTagCreateInput, ForumPostTagUncheckedCreateInput>
    /**
     * In case the ForumPostTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumPostTagUpdateInput, ForumPostTagUncheckedUpdateInput>
  }

  /**
   * ForumPostTag delete
   */
  export type ForumPostTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
    /**
     * Filter which ForumPostTag to delete.
     */
    where: ForumPostTagWhereUniqueInput
  }

  /**
   * ForumPostTag deleteMany
   */
  export type ForumPostTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPostTags to delete
     */
    where?: ForumPostTagWhereInput
    /**
     * Limit how many ForumPostTags to delete.
     */
    limit?: number
  }

  /**
   * ForumPostTag without action
   */
  export type ForumPostTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostTag
     */
    select?: ForumPostTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostTag
     */
    omit?: ForumPostTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostTagInclude<ExtArgs> | null
  }


  /**
   * Model ForumView
   */

  export type AggregateForumView = {
    _count: ForumViewCountAggregateOutputType | null
    _min: ForumViewMinAggregateOutputType | null
    _max: ForumViewMaxAggregateOutputType | null
  }

  export type ForumViewMinAggregateOutputType = {
    id: string | null
    post_id: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type ForumViewMaxAggregateOutputType = {
    id: string | null
    post_id: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type ForumViewCountAggregateOutputType = {
    id: number
    post_id: number
    user_id: number
    created_at: number
    _all: number
  }


  export type ForumViewMinAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    created_at?: true
  }

  export type ForumViewMaxAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    created_at?: true
  }

  export type ForumViewCountAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    created_at?: true
    _all?: true
  }

  export type ForumViewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumView to aggregate.
     */
    where?: ForumViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumViews to fetch.
     */
    orderBy?: ForumViewOrderByWithRelationInput | ForumViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumViews
    **/
    _count?: true | ForumViewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumViewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumViewMaxAggregateInputType
  }

  export type GetForumViewAggregateType<T extends ForumViewAggregateArgs> = {
        [P in keyof T & keyof AggregateForumView]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumView[P]>
      : GetScalarType<T[P], AggregateForumView[P]>
  }




  export type ForumViewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumViewWhereInput
    orderBy?: ForumViewOrderByWithAggregationInput | ForumViewOrderByWithAggregationInput[]
    by: ForumViewScalarFieldEnum[] | ForumViewScalarFieldEnum
    having?: ForumViewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumViewCountAggregateInputType | true
    _min?: ForumViewMinAggregateInputType
    _max?: ForumViewMaxAggregateInputType
  }

  export type ForumViewGroupByOutputType = {
    id: string
    post_id: string
    user_id: string
    created_at: Date | null
    _count: ForumViewCountAggregateOutputType | null
    _min: ForumViewMinAggregateOutputType | null
    _max: ForumViewMaxAggregateOutputType | null
  }

  type GetForumViewGroupByPayload<T extends ForumViewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumViewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumViewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumViewGroupByOutputType[P]>
            : GetScalarType<T[P], ForumViewGroupByOutputType[P]>
        }
      >
    >


  export type ForumViewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumView"]>

  export type ForumViewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumView"]>

  export type ForumViewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumView"]>

  export type ForumViewSelectScalar = {
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    created_at?: boolean
  }

  export type ForumViewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "post_id" | "user_id" | "created_at", ExtArgs["result"]["forumView"]>
  export type ForumViewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumViewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumViewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ForumViewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumView"
    objects: {
      post: Prisma.$ForumPostPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      post_id: string
      user_id: string
      created_at: Date | null
    }, ExtArgs["result"]["forumView"]>
    composites: {}
  }

  type ForumViewGetPayload<S extends boolean | null | undefined | ForumViewDefaultArgs> = $Result.GetResult<Prisma.$ForumViewPayload, S>

  type ForumViewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumViewCountAggregateInputType | true
    }

  export interface ForumViewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumView'], meta: { name: 'ForumView' } }
    /**
     * Find zero or one ForumView that matches the filter.
     * @param {ForumViewFindUniqueArgs} args - Arguments to find a ForumView
     * @example
     * // Get one ForumView
     * const forumView = await prisma.forumView.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumViewFindUniqueArgs>(args: SelectSubset<T, ForumViewFindUniqueArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumView that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumViewFindUniqueOrThrowArgs} args - Arguments to find a ForumView
     * @example
     * // Get one ForumView
     * const forumView = await prisma.forumView.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumViewFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumView that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumViewFindFirstArgs} args - Arguments to find a ForumView
     * @example
     * // Get one ForumView
     * const forumView = await prisma.forumView.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumViewFindFirstArgs>(args?: SelectSubset<T, ForumViewFindFirstArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumView that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumViewFindFirstOrThrowArgs} args - Arguments to find a ForumView
     * @example
     * // Get one ForumView
     * const forumView = await prisma.forumView.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumViewFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumViewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumViewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumViews
     * const forumViews = await prisma.forumView.findMany()
     * 
     * // Get first 10 ForumViews
     * const forumViews = await prisma.forumView.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumViewWithIdOnly = await prisma.forumView.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumViewFindManyArgs>(args?: SelectSubset<T, ForumViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumView.
     * @param {ForumViewCreateArgs} args - Arguments to create a ForumView.
     * @example
     * // Create one ForumView
     * const ForumView = await prisma.forumView.create({
     *   data: {
     *     // ... data to create a ForumView
     *   }
     * })
     * 
     */
    create<T extends ForumViewCreateArgs>(args: SelectSubset<T, ForumViewCreateArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumViews.
     * @param {ForumViewCreateManyArgs} args - Arguments to create many ForumViews.
     * @example
     * // Create many ForumViews
     * const forumView = await prisma.forumView.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumViewCreateManyArgs>(args?: SelectSubset<T, ForumViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumViews and returns the data saved in the database.
     * @param {ForumViewCreateManyAndReturnArgs} args - Arguments to create many ForumViews.
     * @example
     * // Create many ForumViews
     * const forumView = await prisma.forumView.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumViews and only return the `id`
     * const forumViewWithIdOnly = await prisma.forumView.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumViewCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumView.
     * @param {ForumViewDeleteArgs} args - Arguments to delete one ForumView.
     * @example
     * // Delete one ForumView
     * const ForumView = await prisma.forumView.delete({
     *   where: {
     *     // ... filter to delete one ForumView
     *   }
     * })
     * 
     */
    delete<T extends ForumViewDeleteArgs>(args: SelectSubset<T, ForumViewDeleteArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumView.
     * @param {ForumViewUpdateArgs} args - Arguments to update one ForumView.
     * @example
     * // Update one ForumView
     * const forumView = await prisma.forumView.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumViewUpdateArgs>(args: SelectSubset<T, ForumViewUpdateArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumViews.
     * @param {ForumViewDeleteManyArgs} args - Arguments to filter ForumViews to delete.
     * @example
     * // Delete a few ForumViews
     * const { count } = await prisma.forumView.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumViewDeleteManyArgs>(args?: SelectSubset<T, ForumViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumViewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumViews
     * const forumView = await prisma.forumView.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumViewUpdateManyArgs>(args: SelectSubset<T, ForumViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumViews and returns the data updated in the database.
     * @param {ForumViewUpdateManyAndReturnArgs} args - Arguments to update many ForumViews.
     * @example
     * // Update many ForumViews
     * const forumView = await prisma.forumView.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumViews and only return the `id`
     * const forumViewWithIdOnly = await prisma.forumView.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumViewUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumView.
     * @param {ForumViewUpsertArgs} args - Arguments to update or create a ForumView.
     * @example
     * // Update or create a ForumView
     * const forumView = await prisma.forumView.upsert({
     *   create: {
     *     // ... data to create a ForumView
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumView we want to update
     *   }
     * })
     */
    upsert<T extends ForumViewUpsertArgs>(args: SelectSubset<T, ForumViewUpsertArgs<ExtArgs>>): Prisma__ForumViewClient<$Result.GetResult<Prisma.$ForumViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumViewCountArgs} args - Arguments to filter ForumViews to count.
     * @example
     * // Count the number of ForumViews
     * const count = await prisma.forumView.count({
     *   where: {
     *     // ... the filter for the ForumViews we want to count
     *   }
     * })
    **/
    count<T extends ForumViewCountArgs>(
      args?: Subset<T, ForumViewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumViewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumViewAggregateArgs>(args: Subset<T, ForumViewAggregateArgs>): Prisma.PrismaPromise<GetForumViewAggregateType<T>>

    /**
     * Group by ForumView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumViewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumViewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumViewGroupByArgs['orderBy'] }
        : { orderBy?: ForumViewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumView model
   */
  readonly fields: ForumViewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumView.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumViewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumView model
   */
  interface ForumViewFieldRefs {
    readonly id: FieldRef<"ForumView", 'String'>
    readonly post_id: FieldRef<"ForumView", 'String'>
    readonly user_id: FieldRef<"ForumView", 'String'>
    readonly created_at: FieldRef<"ForumView", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumView findUnique
   */
  export type ForumViewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * Filter, which ForumView to fetch.
     */
    where: ForumViewWhereUniqueInput
  }

  /**
   * ForumView findUniqueOrThrow
   */
  export type ForumViewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * Filter, which ForumView to fetch.
     */
    where: ForumViewWhereUniqueInput
  }

  /**
   * ForumView findFirst
   */
  export type ForumViewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * Filter, which ForumView to fetch.
     */
    where?: ForumViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumViews to fetch.
     */
    orderBy?: ForumViewOrderByWithRelationInput | ForumViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumViews.
     */
    cursor?: ForumViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumViews.
     */
    distinct?: ForumViewScalarFieldEnum | ForumViewScalarFieldEnum[]
  }

  /**
   * ForumView findFirstOrThrow
   */
  export type ForumViewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * Filter, which ForumView to fetch.
     */
    where?: ForumViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumViews to fetch.
     */
    orderBy?: ForumViewOrderByWithRelationInput | ForumViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumViews.
     */
    cursor?: ForumViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumViews.
     */
    distinct?: ForumViewScalarFieldEnum | ForumViewScalarFieldEnum[]
  }

  /**
   * ForumView findMany
   */
  export type ForumViewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * Filter, which ForumViews to fetch.
     */
    where?: ForumViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumViews to fetch.
     */
    orderBy?: ForumViewOrderByWithRelationInput | ForumViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumViews.
     */
    cursor?: ForumViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumViews.
     */
    skip?: number
    distinct?: ForumViewScalarFieldEnum | ForumViewScalarFieldEnum[]
  }

  /**
   * ForumView create
   */
  export type ForumViewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumView.
     */
    data: XOR<ForumViewCreateInput, ForumViewUncheckedCreateInput>
  }

  /**
   * ForumView createMany
   */
  export type ForumViewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumViews.
     */
    data: ForumViewCreateManyInput | ForumViewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumView createManyAndReturn
   */
  export type ForumViewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * The data used to create many ForumViews.
     */
    data: ForumViewCreateManyInput | ForumViewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumView update
   */
  export type ForumViewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumView.
     */
    data: XOR<ForumViewUpdateInput, ForumViewUncheckedUpdateInput>
    /**
     * Choose, which ForumView to update.
     */
    where: ForumViewWhereUniqueInput
  }

  /**
   * ForumView updateMany
   */
  export type ForumViewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumViews.
     */
    data: XOR<ForumViewUpdateManyMutationInput, ForumViewUncheckedUpdateManyInput>
    /**
     * Filter which ForumViews to update
     */
    where?: ForumViewWhereInput
    /**
     * Limit how many ForumViews to update.
     */
    limit?: number
  }

  /**
   * ForumView updateManyAndReturn
   */
  export type ForumViewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * The data used to update ForumViews.
     */
    data: XOR<ForumViewUpdateManyMutationInput, ForumViewUncheckedUpdateManyInput>
    /**
     * Filter which ForumViews to update
     */
    where?: ForumViewWhereInput
    /**
     * Limit how many ForumViews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumView upsert
   */
  export type ForumViewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumView to update in case it exists.
     */
    where: ForumViewWhereUniqueInput
    /**
     * In case the ForumView found by the `where` argument doesn't exist, create a new ForumView with this data.
     */
    create: XOR<ForumViewCreateInput, ForumViewUncheckedCreateInput>
    /**
     * In case the ForumView was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumViewUpdateInput, ForumViewUncheckedUpdateInput>
  }

  /**
   * ForumView delete
   */
  export type ForumViewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
    /**
     * Filter which ForumView to delete.
     */
    where: ForumViewWhereUniqueInput
  }

  /**
   * ForumView deleteMany
   */
  export type ForumViewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumViews to delete
     */
    where?: ForumViewWhereInput
    /**
     * Limit how many ForumViews to delete.
     */
    limit?: number
  }

  /**
   * ForumView without action
   */
  export type ForumViewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumView
     */
    select?: ForumViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumView
     */
    omit?: ForumViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumViewInclude<ExtArgs> | null
  }


  /**
   * Model ForumSaved
   */

  export type AggregateForumSaved = {
    _count: ForumSavedCountAggregateOutputType | null
    _min: ForumSavedMinAggregateOutputType | null
    _max: ForumSavedMaxAggregateOutputType | null
  }

  export type ForumSavedMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    post_id: string | null
    created_at: Date | null
  }

  export type ForumSavedMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    post_id: string | null
    created_at: Date | null
  }

  export type ForumSavedCountAggregateOutputType = {
    id: number
    user_id: number
    post_id: number
    created_at: number
    _all: number
  }


  export type ForumSavedMinAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    created_at?: true
  }

  export type ForumSavedMaxAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    created_at?: true
  }

  export type ForumSavedCountAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    created_at?: true
    _all?: true
  }

  export type ForumSavedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumSaved to aggregate.
     */
    where?: ForumSavedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumSaveds to fetch.
     */
    orderBy?: ForumSavedOrderByWithRelationInput | ForumSavedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumSavedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumSaveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumSaveds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumSaveds
    **/
    _count?: true | ForumSavedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumSavedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumSavedMaxAggregateInputType
  }

  export type GetForumSavedAggregateType<T extends ForumSavedAggregateArgs> = {
        [P in keyof T & keyof AggregateForumSaved]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumSaved[P]>
      : GetScalarType<T[P], AggregateForumSaved[P]>
  }




  export type ForumSavedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumSavedWhereInput
    orderBy?: ForumSavedOrderByWithAggregationInput | ForumSavedOrderByWithAggregationInput[]
    by: ForumSavedScalarFieldEnum[] | ForumSavedScalarFieldEnum
    having?: ForumSavedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumSavedCountAggregateInputType | true
    _min?: ForumSavedMinAggregateInputType
    _max?: ForumSavedMaxAggregateInputType
  }

  export type ForumSavedGroupByOutputType = {
    id: string
    user_id: string
    post_id: string
    created_at: Date | null
    _count: ForumSavedCountAggregateOutputType | null
    _min: ForumSavedMinAggregateOutputType | null
    _max: ForumSavedMaxAggregateOutputType | null
  }

  type GetForumSavedGroupByPayload<T extends ForumSavedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumSavedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumSavedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumSavedGroupByOutputType[P]>
            : GetScalarType<T[P], ForumSavedGroupByOutputType[P]>
        }
      >
    >


  export type ForumSavedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    post_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumSaved"]>

  export type ForumSavedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    post_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumSaved"]>

  export type ForumSavedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    post_id?: boolean
    created_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumSaved"]>

  export type ForumSavedSelectScalar = {
    id?: boolean
    user_id?: boolean
    post_id?: boolean
    created_at?: boolean
  }

  export type ForumSavedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "post_id" | "created_at", ExtArgs["result"]["forumSaved"]>
  export type ForumSavedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumSavedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumSavedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ForumSavedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumSaved"
    objects: {
      post: Prisma.$ForumPostPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      post_id: string
      created_at: Date | null
    }, ExtArgs["result"]["forumSaved"]>
    composites: {}
  }

  type ForumSavedGetPayload<S extends boolean | null | undefined | ForumSavedDefaultArgs> = $Result.GetResult<Prisma.$ForumSavedPayload, S>

  type ForumSavedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumSavedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumSavedCountAggregateInputType | true
    }

  export interface ForumSavedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumSaved'], meta: { name: 'ForumSaved' } }
    /**
     * Find zero or one ForumSaved that matches the filter.
     * @param {ForumSavedFindUniqueArgs} args - Arguments to find a ForumSaved
     * @example
     * // Get one ForumSaved
     * const forumSaved = await prisma.forumSaved.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumSavedFindUniqueArgs>(args: SelectSubset<T, ForumSavedFindUniqueArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumSaved that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumSavedFindUniqueOrThrowArgs} args - Arguments to find a ForumSaved
     * @example
     * // Get one ForumSaved
     * const forumSaved = await prisma.forumSaved.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumSavedFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumSavedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumSaved that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumSavedFindFirstArgs} args - Arguments to find a ForumSaved
     * @example
     * // Get one ForumSaved
     * const forumSaved = await prisma.forumSaved.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumSavedFindFirstArgs>(args?: SelectSubset<T, ForumSavedFindFirstArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumSaved that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumSavedFindFirstOrThrowArgs} args - Arguments to find a ForumSaved
     * @example
     * // Get one ForumSaved
     * const forumSaved = await prisma.forumSaved.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumSavedFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumSavedFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumSaveds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumSavedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumSaveds
     * const forumSaveds = await prisma.forumSaved.findMany()
     * 
     * // Get first 10 ForumSaveds
     * const forumSaveds = await prisma.forumSaved.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumSavedWithIdOnly = await prisma.forumSaved.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumSavedFindManyArgs>(args?: SelectSubset<T, ForumSavedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumSaved.
     * @param {ForumSavedCreateArgs} args - Arguments to create a ForumSaved.
     * @example
     * // Create one ForumSaved
     * const ForumSaved = await prisma.forumSaved.create({
     *   data: {
     *     // ... data to create a ForumSaved
     *   }
     * })
     * 
     */
    create<T extends ForumSavedCreateArgs>(args: SelectSubset<T, ForumSavedCreateArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumSaveds.
     * @param {ForumSavedCreateManyArgs} args - Arguments to create many ForumSaveds.
     * @example
     * // Create many ForumSaveds
     * const forumSaved = await prisma.forumSaved.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumSavedCreateManyArgs>(args?: SelectSubset<T, ForumSavedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumSaveds and returns the data saved in the database.
     * @param {ForumSavedCreateManyAndReturnArgs} args - Arguments to create many ForumSaveds.
     * @example
     * // Create many ForumSaveds
     * const forumSaved = await prisma.forumSaved.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumSaveds and only return the `id`
     * const forumSavedWithIdOnly = await prisma.forumSaved.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumSavedCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumSavedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumSaved.
     * @param {ForumSavedDeleteArgs} args - Arguments to delete one ForumSaved.
     * @example
     * // Delete one ForumSaved
     * const ForumSaved = await prisma.forumSaved.delete({
     *   where: {
     *     // ... filter to delete one ForumSaved
     *   }
     * })
     * 
     */
    delete<T extends ForumSavedDeleteArgs>(args: SelectSubset<T, ForumSavedDeleteArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumSaved.
     * @param {ForumSavedUpdateArgs} args - Arguments to update one ForumSaved.
     * @example
     * // Update one ForumSaved
     * const forumSaved = await prisma.forumSaved.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumSavedUpdateArgs>(args: SelectSubset<T, ForumSavedUpdateArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumSaveds.
     * @param {ForumSavedDeleteManyArgs} args - Arguments to filter ForumSaveds to delete.
     * @example
     * // Delete a few ForumSaveds
     * const { count } = await prisma.forumSaved.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumSavedDeleteManyArgs>(args?: SelectSubset<T, ForumSavedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumSaveds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumSavedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumSaveds
     * const forumSaved = await prisma.forumSaved.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumSavedUpdateManyArgs>(args: SelectSubset<T, ForumSavedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumSaveds and returns the data updated in the database.
     * @param {ForumSavedUpdateManyAndReturnArgs} args - Arguments to update many ForumSaveds.
     * @example
     * // Update many ForumSaveds
     * const forumSaved = await prisma.forumSaved.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumSaveds and only return the `id`
     * const forumSavedWithIdOnly = await prisma.forumSaved.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumSavedUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumSavedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumSaved.
     * @param {ForumSavedUpsertArgs} args - Arguments to update or create a ForumSaved.
     * @example
     * // Update or create a ForumSaved
     * const forumSaved = await prisma.forumSaved.upsert({
     *   create: {
     *     // ... data to create a ForumSaved
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumSaved we want to update
     *   }
     * })
     */
    upsert<T extends ForumSavedUpsertArgs>(args: SelectSubset<T, ForumSavedUpsertArgs<ExtArgs>>): Prisma__ForumSavedClient<$Result.GetResult<Prisma.$ForumSavedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumSaveds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumSavedCountArgs} args - Arguments to filter ForumSaveds to count.
     * @example
     * // Count the number of ForumSaveds
     * const count = await prisma.forumSaved.count({
     *   where: {
     *     // ... the filter for the ForumSaveds we want to count
     *   }
     * })
    **/
    count<T extends ForumSavedCountArgs>(
      args?: Subset<T, ForumSavedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumSavedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumSaved.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumSavedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumSavedAggregateArgs>(args: Subset<T, ForumSavedAggregateArgs>): Prisma.PrismaPromise<GetForumSavedAggregateType<T>>

    /**
     * Group by ForumSaved.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumSavedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumSavedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumSavedGroupByArgs['orderBy'] }
        : { orderBy?: ForumSavedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumSavedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumSavedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumSaved model
   */
  readonly fields: ForumSavedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumSaved.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumSavedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumSaved model
   */
  interface ForumSavedFieldRefs {
    readonly id: FieldRef<"ForumSaved", 'String'>
    readonly user_id: FieldRef<"ForumSaved", 'String'>
    readonly post_id: FieldRef<"ForumSaved", 'String'>
    readonly created_at: FieldRef<"ForumSaved", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumSaved findUnique
   */
  export type ForumSavedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * Filter, which ForumSaved to fetch.
     */
    where: ForumSavedWhereUniqueInput
  }

  /**
   * ForumSaved findUniqueOrThrow
   */
  export type ForumSavedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * Filter, which ForumSaved to fetch.
     */
    where: ForumSavedWhereUniqueInput
  }

  /**
   * ForumSaved findFirst
   */
  export type ForumSavedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * Filter, which ForumSaved to fetch.
     */
    where?: ForumSavedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumSaveds to fetch.
     */
    orderBy?: ForumSavedOrderByWithRelationInput | ForumSavedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumSaveds.
     */
    cursor?: ForumSavedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumSaveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumSaveds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumSaveds.
     */
    distinct?: ForumSavedScalarFieldEnum | ForumSavedScalarFieldEnum[]
  }

  /**
   * ForumSaved findFirstOrThrow
   */
  export type ForumSavedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * Filter, which ForumSaved to fetch.
     */
    where?: ForumSavedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumSaveds to fetch.
     */
    orderBy?: ForumSavedOrderByWithRelationInput | ForumSavedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumSaveds.
     */
    cursor?: ForumSavedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumSaveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumSaveds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumSaveds.
     */
    distinct?: ForumSavedScalarFieldEnum | ForumSavedScalarFieldEnum[]
  }

  /**
   * ForumSaved findMany
   */
  export type ForumSavedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * Filter, which ForumSaveds to fetch.
     */
    where?: ForumSavedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumSaveds to fetch.
     */
    orderBy?: ForumSavedOrderByWithRelationInput | ForumSavedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumSaveds.
     */
    cursor?: ForumSavedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumSaveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumSaveds.
     */
    skip?: number
    distinct?: ForumSavedScalarFieldEnum | ForumSavedScalarFieldEnum[]
  }

  /**
   * ForumSaved create
   */
  export type ForumSavedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumSaved.
     */
    data: XOR<ForumSavedCreateInput, ForumSavedUncheckedCreateInput>
  }

  /**
   * ForumSaved createMany
   */
  export type ForumSavedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumSaveds.
     */
    data: ForumSavedCreateManyInput | ForumSavedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumSaved createManyAndReturn
   */
  export type ForumSavedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * The data used to create many ForumSaveds.
     */
    data: ForumSavedCreateManyInput | ForumSavedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumSaved update
   */
  export type ForumSavedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumSaved.
     */
    data: XOR<ForumSavedUpdateInput, ForumSavedUncheckedUpdateInput>
    /**
     * Choose, which ForumSaved to update.
     */
    where: ForumSavedWhereUniqueInput
  }

  /**
   * ForumSaved updateMany
   */
  export type ForumSavedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumSaveds.
     */
    data: XOR<ForumSavedUpdateManyMutationInput, ForumSavedUncheckedUpdateManyInput>
    /**
     * Filter which ForumSaveds to update
     */
    where?: ForumSavedWhereInput
    /**
     * Limit how many ForumSaveds to update.
     */
    limit?: number
  }

  /**
   * ForumSaved updateManyAndReturn
   */
  export type ForumSavedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * The data used to update ForumSaveds.
     */
    data: XOR<ForumSavedUpdateManyMutationInput, ForumSavedUncheckedUpdateManyInput>
    /**
     * Filter which ForumSaveds to update
     */
    where?: ForumSavedWhereInput
    /**
     * Limit how many ForumSaveds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumSaved upsert
   */
  export type ForumSavedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumSaved to update in case it exists.
     */
    where: ForumSavedWhereUniqueInput
    /**
     * In case the ForumSaved found by the `where` argument doesn't exist, create a new ForumSaved with this data.
     */
    create: XOR<ForumSavedCreateInput, ForumSavedUncheckedCreateInput>
    /**
     * In case the ForumSaved was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumSavedUpdateInput, ForumSavedUncheckedUpdateInput>
  }

  /**
   * ForumSaved delete
   */
  export type ForumSavedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
    /**
     * Filter which ForumSaved to delete.
     */
    where: ForumSavedWhereUniqueInput
  }

  /**
   * ForumSaved deleteMany
   */
  export type ForumSavedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumSaveds to delete
     */
    where?: ForumSavedWhereInput
    /**
     * Limit how many ForumSaveds to delete.
     */
    limit?: number
  }

  /**
   * ForumSaved without action
   */
  export type ForumSavedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumSaved
     */
    select?: ForumSavedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumSaved
     */
    omit?: ForumSavedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumSavedInclude<ExtArgs> | null
  }


  /**
   * Model ForumNotificationPreference
   */

  export type AggregateForumNotificationPreference = {
    _count: ForumNotificationPreferenceCountAggregateOutputType | null
    _min: ForumNotificationPreferenceMinAggregateOutputType | null
    _max: ForumNotificationPreferenceMaxAggregateOutputType | null
  }

  export type ForumNotificationPreferenceMinAggregateOutputType = {
    id: string | null
    post_id: string | null
    user_id: string | null
    notify_on_reply: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ForumNotificationPreferenceMaxAggregateOutputType = {
    id: string | null
    post_id: string | null
    user_id: string | null
    notify_on_reply: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ForumNotificationPreferenceCountAggregateOutputType = {
    id: number
    post_id: number
    user_id: number
    notify_on_reply: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ForumNotificationPreferenceMinAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    notify_on_reply?: true
    created_at?: true
    updated_at?: true
  }

  export type ForumNotificationPreferenceMaxAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    notify_on_reply?: true
    created_at?: true
    updated_at?: true
  }

  export type ForumNotificationPreferenceCountAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
    notify_on_reply?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ForumNotificationPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumNotificationPreference to aggregate.
     */
    where?: ForumNotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumNotificationPreferences to fetch.
     */
    orderBy?: ForumNotificationPreferenceOrderByWithRelationInput | ForumNotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumNotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumNotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumNotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumNotificationPreferences
    **/
    _count?: true | ForumNotificationPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumNotificationPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumNotificationPreferenceMaxAggregateInputType
  }

  export type GetForumNotificationPreferenceAggregateType<T extends ForumNotificationPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateForumNotificationPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumNotificationPreference[P]>
      : GetScalarType<T[P], AggregateForumNotificationPreference[P]>
  }




  export type ForumNotificationPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumNotificationPreferenceWhereInput
    orderBy?: ForumNotificationPreferenceOrderByWithAggregationInput | ForumNotificationPreferenceOrderByWithAggregationInput[]
    by: ForumNotificationPreferenceScalarFieldEnum[] | ForumNotificationPreferenceScalarFieldEnum
    having?: ForumNotificationPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumNotificationPreferenceCountAggregateInputType | true
    _min?: ForumNotificationPreferenceMinAggregateInputType
    _max?: ForumNotificationPreferenceMaxAggregateInputType
  }

  export type ForumNotificationPreferenceGroupByOutputType = {
    id: string
    post_id: string
    user_id: string
    notify_on_reply: boolean
    created_at: Date | null
    updated_at: Date | null
    _count: ForumNotificationPreferenceCountAggregateOutputType | null
    _min: ForumNotificationPreferenceMinAggregateOutputType | null
    _max: ForumNotificationPreferenceMaxAggregateOutputType | null
  }

  type GetForumNotificationPreferenceGroupByPayload<T extends ForumNotificationPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumNotificationPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumNotificationPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumNotificationPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], ForumNotificationPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type ForumNotificationPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    notify_on_reply?: boolean
    created_at?: boolean
    updated_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumNotificationPreference"]>

  export type ForumNotificationPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    notify_on_reply?: boolean
    created_at?: boolean
    updated_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumNotificationPreference"]>

  export type ForumNotificationPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    notify_on_reply?: boolean
    created_at?: boolean
    updated_at?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumNotificationPreference"]>

  export type ForumNotificationPreferenceSelectScalar = {
    id?: boolean
    post_id?: boolean
    user_id?: boolean
    notify_on_reply?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ForumNotificationPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "post_id" | "user_id" | "notify_on_reply" | "created_at" | "updated_at", ExtArgs["result"]["forumNotificationPreference"]>
  export type ForumNotificationPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumNotificationPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumNotificationPreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ForumNotificationPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumNotificationPreference"
    objects: {
      post: Prisma.$ForumPostPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      post_id: string
      user_id: string
      notify_on_reply: boolean
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["forumNotificationPreference"]>
    composites: {}
  }

  type ForumNotificationPreferenceGetPayload<S extends boolean | null | undefined | ForumNotificationPreferenceDefaultArgs> = $Result.GetResult<Prisma.$ForumNotificationPreferencePayload, S>

  type ForumNotificationPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumNotificationPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumNotificationPreferenceCountAggregateInputType | true
    }

  export interface ForumNotificationPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumNotificationPreference'], meta: { name: 'ForumNotificationPreference' } }
    /**
     * Find zero or one ForumNotificationPreference that matches the filter.
     * @param {ForumNotificationPreferenceFindUniqueArgs} args - Arguments to find a ForumNotificationPreference
     * @example
     * // Get one ForumNotificationPreference
     * const forumNotificationPreference = await prisma.forumNotificationPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumNotificationPreferenceFindUniqueArgs>(args: SelectSubset<T, ForumNotificationPreferenceFindUniqueArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumNotificationPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumNotificationPreferenceFindUniqueOrThrowArgs} args - Arguments to find a ForumNotificationPreference
     * @example
     * // Get one ForumNotificationPreference
     * const forumNotificationPreference = await prisma.forumNotificationPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumNotificationPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumNotificationPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumNotificationPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumNotificationPreferenceFindFirstArgs} args - Arguments to find a ForumNotificationPreference
     * @example
     * // Get one ForumNotificationPreference
     * const forumNotificationPreference = await prisma.forumNotificationPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumNotificationPreferenceFindFirstArgs>(args?: SelectSubset<T, ForumNotificationPreferenceFindFirstArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumNotificationPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumNotificationPreferenceFindFirstOrThrowArgs} args - Arguments to find a ForumNotificationPreference
     * @example
     * // Get one ForumNotificationPreference
     * const forumNotificationPreference = await prisma.forumNotificationPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumNotificationPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumNotificationPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumNotificationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumNotificationPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumNotificationPreferences
     * const forumNotificationPreferences = await prisma.forumNotificationPreference.findMany()
     * 
     * // Get first 10 ForumNotificationPreferences
     * const forumNotificationPreferences = await prisma.forumNotificationPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumNotificationPreferenceWithIdOnly = await prisma.forumNotificationPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumNotificationPreferenceFindManyArgs>(args?: SelectSubset<T, ForumNotificationPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumNotificationPreference.
     * @param {ForumNotificationPreferenceCreateArgs} args - Arguments to create a ForumNotificationPreference.
     * @example
     * // Create one ForumNotificationPreference
     * const ForumNotificationPreference = await prisma.forumNotificationPreference.create({
     *   data: {
     *     // ... data to create a ForumNotificationPreference
     *   }
     * })
     * 
     */
    create<T extends ForumNotificationPreferenceCreateArgs>(args: SelectSubset<T, ForumNotificationPreferenceCreateArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumNotificationPreferences.
     * @param {ForumNotificationPreferenceCreateManyArgs} args - Arguments to create many ForumNotificationPreferences.
     * @example
     * // Create many ForumNotificationPreferences
     * const forumNotificationPreference = await prisma.forumNotificationPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumNotificationPreferenceCreateManyArgs>(args?: SelectSubset<T, ForumNotificationPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumNotificationPreferences and returns the data saved in the database.
     * @param {ForumNotificationPreferenceCreateManyAndReturnArgs} args - Arguments to create many ForumNotificationPreferences.
     * @example
     * // Create many ForumNotificationPreferences
     * const forumNotificationPreference = await prisma.forumNotificationPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumNotificationPreferences and only return the `id`
     * const forumNotificationPreferenceWithIdOnly = await prisma.forumNotificationPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumNotificationPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumNotificationPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumNotificationPreference.
     * @param {ForumNotificationPreferenceDeleteArgs} args - Arguments to delete one ForumNotificationPreference.
     * @example
     * // Delete one ForumNotificationPreference
     * const ForumNotificationPreference = await prisma.forumNotificationPreference.delete({
     *   where: {
     *     // ... filter to delete one ForumNotificationPreference
     *   }
     * })
     * 
     */
    delete<T extends ForumNotificationPreferenceDeleteArgs>(args: SelectSubset<T, ForumNotificationPreferenceDeleteArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumNotificationPreference.
     * @param {ForumNotificationPreferenceUpdateArgs} args - Arguments to update one ForumNotificationPreference.
     * @example
     * // Update one ForumNotificationPreference
     * const forumNotificationPreference = await prisma.forumNotificationPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumNotificationPreferenceUpdateArgs>(args: SelectSubset<T, ForumNotificationPreferenceUpdateArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumNotificationPreferences.
     * @param {ForumNotificationPreferenceDeleteManyArgs} args - Arguments to filter ForumNotificationPreferences to delete.
     * @example
     * // Delete a few ForumNotificationPreferences
     * const { count } = await prisma.forumNotificationPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumNotificationPreferenceDeleteManyArgs>(args?: SelectSubset<T, ForumNotificationPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumNotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumNotificationPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumNotificationPreferences
     * const forumNotificationPreference = await prisma.forumNotificationPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumNotificationPreferenceUpdateManyArgs>(args: SelectSubset<T, ForumNotificationPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumNotificationPreferences and returns the data updated in the database.
     * @param {ForumNotificationPreferenceUpdateManyAndReturnArgs} args - Arguments to update many ForumNotificationPreferences.
     * @example
     * // Update many ForumNotificationPreferences
     * const forumNotificationPreference = await prisma.forumNotificationPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumNotificationPreferences and only return the `id`
     * const forumNotificationPreferenceWithIdOnly = await prisma.forumNotificationPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumNotificationPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumNotificationPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumNotificationPreference.
     * @param {ForumNotificationPreferenceUpsertArgs} args - Arguments to update or create a ForumNotificationPreference.
     * @example
     * // Update or create a ForumNotificationPreference
     * const forumNotificationPreference = await prisma.forumNotificationPreference.upsert({
     *   create: {
     *     // ... data to create a ForumNotificationPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumNotificationPreference we want to update
     *   }
     * })
     */
    upsert<T extends ForumNotificationPreferenceUpsertArgs>(args: SelectSubset<T, ForumNotificationPreferenceUpsertArgs<ExtArgs>>): Prisma__ForumNotificationPreferenceClient<$Result.GetResult<Prisma.$ForumNotificationPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumNotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumNotificationPreferenceCountArgs} args - Arguments to filter ForumNotificationPreferences to count.
     * @example
     * // Count the number of ForumNotificationPreferences
     * const count = await prisma.forumNotificationPreference.count({
     *   where: {
     *     // ... the filter for the ForumNotificationPreferences we want to count
     *   }
     * })
    **/
    count<T extends ForumNotificationPreferenceCountArgs>(
      args?: Subset<T, ForumNotificationPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumNotificationPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumNotificationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumNotificationPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumNotificationPreferenceAggregateArgs>(args: Subset<T, ForumNotificationPreferenceAggregateArgs>): Prisma.PrismaPromise<GetForumNotificationPreferenceAggregateType<T>>

    /**
     * Group by ForumNotificationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumNotificationPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumNotificationPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumNotificationPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: ForumNotificationPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumNotificationPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumNotificationPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumNotificationPreference model
   */
  readonly fields: ForumNotificationPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumNotificationPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumNotificationPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumNotificationPreference model
   */
  interface ForumNotificationPreferenceFieldRefs {
    readonly id: FieldRef<"ForumNotificationPreference", 'String'>
    readonly post_id: FieldRef<"ForumNotificationPreference", 'String'>
    readonly user_id: FieldRef<"ForumNotificationPreference", 'String'>
    readonly notify_on_reply: FieldRef<"ForumNotificationPreference", 'Boolean'>
    readonly created_at: FieldRef<"ForumNotificationPreference", 'DateTime'>
    readonly updated_at: FieldRef<"ForumNotificationPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumNotificationPreference findUnique
   */
  export type ForumNotificationPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ForumNotificationPreference to fetch.
     */
    where: ForumNotificationPreferenceWhereUniqueInput
  }

  /**
   * ForumNotificationPreference findUniqueOrThrow
   */
  export type ForumNotificationPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ForumNotificationPreference to fetch.
     */
    where: ForumNotificationPreferenceWhereUniqueInput
  }

  /**
   * ForumNotificationPreference findFirst
   */
  export type ForumNotificationPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ForumNotificationPreference to fetch.
     */
    where?: ForumNotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumNotificationPreferences to fetch.
     */
    orderBy?: ForumNotificationPreferenceOrderByWithRelationInput | ForumNotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumNotificationPreferences.
     */
    cursor?: ForumNotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumNotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumNotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumNotificationPreferences.
     */
    distinct?: ForumNotificationPreferenceScalarFieldEnum | ForumNotificationPreferenceScalarFieldEnum[]
  }

  /**
   * ForumNotificationPreference findFirstOrThrow
   */
  export type ForumNotificationPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ForumNotificationPreference to fetch.
     */
    where?: ForumNotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumNotificationPreferences to fetch.
     */
    orderBy?: ForumNotificationPreferenceOrderByWithRelationInput | ForumNotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumNotificationPreferences.
     */
    cursor?: ForumNotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumNotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumNotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumNotificationPreferences.
     */
    distinct?: ForumNotificationPreferenceScalarFieldEnum | ForumNotificationPreferenceScalarFieldEnum[]
  }

  /**
   * ForumNotificationPreference findMany
   */
  export type ForumNotificationPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ForumNotificationPreferences to fetch.
     */
    where?: ForumNotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumNotificationPreferences to fetch.
     */
    orderBy?: ForumNotificationPreferenceOrderByWithRelationInput | ForumNotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumNotificationPreferences.
     */
    cursor?: ForumNotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumNotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumNotificationPreferences.
     */
    skip?: number
    distinct?: ForumNotificationPreferenceScalarFieldEnum | ForumNotificationPreferenceScalarFieldEnum[]
  }

  /**
   * ForumNotificationPreference create
   */
  export type ForumNotificationPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumNotificationPreference.
     */
    data: XOR<ForumNotificationPreferenceCreateInput, ForumNotificationPreferenceUncheckedCreateInput>
  }

  /**
   * ForumNotificationPreference createMany
   */
  export type ForumNotificationPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumNotificationPreferences.
     */
    data: ForumNotificationPreferenceCreateManyInput | ForumNotificationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumNotificationPreference createManyAndReturn
   */
  export type ForumNotificationPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many ForumNotificationPreferences.
     */
    data: ForumNotificationPreferenceCreateManyInput | ForumNotificationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumNotificationPreference update
   */
  export type ForumNotificationPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumNotificationPreference.
     */
    data: XOR<ForumNotificationPreferenceUpdateInput, ForumNotificationPreferenceUncheckedUpdateInput>
    /**
     * Choose, which ForumNotificationPreference to update.
     */
    where: ForumNotificationPreferenceWhereUniqueInput
  }

  /**
   * ForumNotificationPreference updateMany
   */
  export type ForumNotificationPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumNotificationPreferences.
     */
    data: XOR<ForumNotificationPreferenceUpdateManyMutationInput, ForumNotificationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which ForumNotificationPreferences to update
     */
    where?: ForumNotificationPreferenceWhereInput
    /**
     * Limit how many ForumNotificationPreferences to update.
     */
    limit?: number
  }

  /**
   * ForumNotificationPreference updateManyAndReturn
   */
  export type ForumNotificationPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update ForumNotificationPreferences.
     */
    data: XOR<ForumNotificationPreferenceUpdateManyMutationInput, ForumNotificationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which ForumNotificationPreferences to update
     */
    where?: ForumNotificationPreferenceWhereInput
    /**
     * Limit how many ForumNotificationPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumNotificationPreference upsert
   */
  export type ForumNotificationPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumNotificationPreference to update in case it exists.
     */
    where: ForumNotificationPreferenceWhereUniqueInput
    /**
     * In case the ForumNotificationPreference found by the `where` argument doesn't exist, create a new ForumNotificationPreference with this data.
     */
    create: XOR<ForumNotificationPreferenceCreateInput, ForumNotificationPreferenceUncheckedCreateInput>
    /**
     * In case the ForumNotificationPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumNotificationPreferenceUpdateInput, ForumNotificationPreferenceUncheckedUpdateInput>
  }

  /**
   * ForumNotificationPreference delete
   */
  export type ForumNotificationPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter which ForumNotificationPreference to delete.
     */
    where: ForumNotificationPreferenceWhereUniqueInput
  }

  /**
   * ForumNotificationPreference deleteMany
   */
  export type ForumNotificationPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumNotificationPreferences to delete
     */
    where?: ForumNotificationPreferenceWhereInput
    /**
     * Limit how many ForumNotificationPreferences to delete.
     */
    limit?: number
  }

  /**
   * ForumNotificationPreference without action
   */
  export type ForumNotificationPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumNotificationPreference
     */
    select?: ForumNotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumNotificationPreference
     */
    omit?: ForumNotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumNotificationPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model CourseCategory
   */

  export type AggregateCourseCategory = {
    _count: CourseCategoryCountAggregateOutputType | null
    _min: CourseCategoryMinAggregateOutputType | null
    _max: CourseCategoryMaxAggregateOutputType | null
  }

  export type CourseCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    createdAt: Date | null
  }

  export type CourseCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    createdAt: Date | null
  }

  export type CourseCategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    createdAt: number
    _all: number
  }


  export type CourseCategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
  }

  export type CourseCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
  }

  export type CourseCategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
    _all?: true
  }

  export type CourseCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseCategory to aggregate.
     */
    where?: CourseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategories to fetch.
     */
    orderBy?: CourseCategoryOrderByWithRelationInput | CourseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseCategories
    **/
    _count?: true | CourseCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseCategoryMaxAggregateInputType
  }

  export type GetCourseCategoryAggregateType<T extends CourseCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseCategory[P]>
      : GetScalarType<T[P], AggregateCourseCategory[P]>
  }




  export type CourseCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseCategoryWhereInput
    orderBy?: CourseCategoryOrderByWithAggregationInput | CourseCategoryOrderByWithAggregationInput[]
    by: CourseCategoryScalarFieldEnum[] | CourseCategoryScalarFieldEnum
    having?: CourseCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCategoryCountAggregateInputType | true
    _min?: CourseCategoryMinAggregateInputType
    _max?: CourseCategoryMaxAggregateInputType
  }

  export type CourseCategoryGroupByOutputType = {
    id: string
    name: string
    slug: string
    createdAt: Date | null
    _count: CourseCategoryCountAggregateOutputType | null
    _min: CourseCategoryMinAggregateOutputType | null
    _max: CourseCategoryMaxAggregateOutputType | null
  }

  type GetCourseCategoryGroupByPayload<T extends CourseCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CourseCategoryGroupByOutputType[P]>
        }
      >
    >


  export type CourseCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
    courses?: boolean | CourseCategory$coursesArgs<ExtArgs>
    _count?: boolean | CourseCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseCategory"]>

  export type CourseCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["courseCategory"]>

  export type CourseCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["courseCategory"]>

  export type CourseCategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
  }

  export type CourseCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "createdAt", ExtArgs["result"]["courseCategory"]>
  export type CourseCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | CourseCategory$coursesArgs<ExtArgs>
    _count?: boolean | CourseCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CourseCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CourseCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseCategory"
    objects: {
      courses: Prisma.$CourseCategoryJunctionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      createdAt: Date | null
    }, ExtArgs["result"]["courseCategory"]>
    composites: {}
  }

  type CourseCategoryGetPayload<S extends boolean | null | undefined | CourseCategoryDefaultArgs> = $Result.GetResult<Prisma.$CourseCategoryPayload, S>

  type CourseCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCategoryCountAggregateInputType | true
    }

  export interface CourseCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseCategory'], meta: { name: 'CourseCategory' } }
    /**
     * Find zero or one CourseCategory that matches the filter.
     * @param {CourseCategoryFindUniqueArgs} args - Arguments to find a CourseCategory
     * @example
     * // Get one CourseCategory
     * const courseCategory = await prisma.courseCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseCategoryFindUniqueArgs>(args: SelectSubset<T, CourseCategoryFindUniqueArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseCategoryFindUniqueOrThrowArgs} args - Arguments to find a CourseCategory
     * @example
     * // Get one CourseCategory
     * const courseCategory = await prisma.courseCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryFindFirstArgs} args - Arguments to find a CourseCategory
     * @example
     * // Get one CourseCategory
     * const courseCategory = await prisma.courseCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseCategoryFindFirstArgs>(args?: SelectSubset<T, CourseCategoryFindFirstArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryFindFirstOrThrowArgs} args - Arguments to find a CourseCategory
     * @example
     * // Get one CourseCategory
     * const courseCategory = await prisma.courseCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseCategories
     * const courseCategories = await prisma.courseCategory.findMany()
     * 
     * // Get first 10 CourseCategories
     * const courseCategories = await prisma.courseCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseCategoryWithIdOnly = await prisma.courseCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseCategoryFindManyArgs>(args?: SelectSubset<T, CourseCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseCategory.
     * @param {CourseCategoryCreateArgs} args - Arguments to create a CourseCategory.
     * @example
     * // Create one CourseCategory
     * const CourseCategory = await prisma.courseCategory.create({
     *   data: {
     *     // ... data to create a CourseCategory
     *   }
     * })
     * 
     */
    create<T extends CourseCategoryCreateArgs>(args: SelectSubset<T, CourseCategoryCreateArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseCategories.
     * @param {CourseCategoryCreateManyArgs} args - Arguments to create many CourseCategories.
     * @example
     * // Create many CourseCategories
     * const courseCategory = await prisma.courseCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCategoryCreateManyArgs>(args?: SelectSubset<T, CourseCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseCategories and returns the data saved in the database.
     * @param {CourseCategoryCreateManyAndReturnArgs} args - Arguments to create many CourseCategories.
     * @example
     * // Create many CourseCategories
     * const courseCategory = await prisma.courseCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseCategories and only return the `id`
     * const courseCategoryWithIdOnly = await prisma.courseCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseCategory.
     * @param {CourseCategoryDeleteArgs} args - Arguments to delete one CourseCategory.
     * @example
     * // Delete one CourseCategory
     * const CourseCategory = await prisma.courseCategory.delete({
     *   where: {
     *     // ... filter to delete one CourseCategory
     *   }
     * })
     * 
     */
    delete<T extends CourseCategoryDeleteArgs>(args: SelectSubset<T, CourseCategoryDeleteArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseCategory.
     * @param {CourseCategoryUpdateArgs} args - Arguments to update one CourseCategory.
     * @example
     * // Update one CourseCategory
     * const courseCategory = await prisma.courseCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseCategoryUpdateArgs>(args: SelectSubset<T, CourseCategoryUpdateArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseCategories.
     * @param {CourseCategoryDeleteManyArgs} args - Arguments to filter CourseCategories to delete.
     * @example
     * // Delete a few CourseCategories
     * const { count } = await prisma.courseCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseCategoryDeleteManyArgs>(args?: SelectSubset<T, CourseCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseCategories
     * const courseCategory = await prisma.courseCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseCategoryUpdateManyArgs>(args: SelectSubset<T, CourseCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseCategories and returns the data updated in the database.
     * @param {CourseCategoryUpdateManyAndReturnArgs} args - Arguments to update many CourseCategories.
     * @example
     * // Update many CourseCategories
     * const courseCategory = await prisma.courseCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseCategories and only return the `id`
     * const courseCategoryWithIdOnly = await prisma.courseCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseCategory.
     * @param {CourseCategoryUpsertArgs} args - Arguments to update or create a CourseCategory.
     * @example
     * // Update or create a CourseCategory
     * const courseCategory = await prisma.courseCategory.upsert({
     *   create: {
     *     // ... data to create a CourseCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseCategory we want to update
     *   }
     * })
     */
    upsert<T extends CourseCategoryUpsertArgs>(args: SelectSubset<T, CourseCategoryUpsertArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryCountArgs} args - Arguments to filter CourseCategories to count.
     * @example
     * // Count the number of CourseCategories
     * const count = await prisma.courseCategory.count({
     *   where: {
     *     // ... the filter for the CourseCategories we want to count
     *   }
     * })
    **/
    count<T extends CourseCategoryCountArgs>(
      args?: Subset<T, CourseCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseCategoryAggregateArgs>(args: Subset<T, CourseCategoryAggregateArgs>): Prisma.PrismaPromise<GetCourseCategoryAggregateType<T>>

    /**
     * Group by CourseCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseCategoryGroupByArgs['orderBy'] }
        : { orderBy?: CourseCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseCategory model
   */
  readonly fields: CourseCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends CourseCategory$coursesArgs<ExtArgs> = {}>(args?: Subset<T, CourseCategory$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseCategory model
   */
  interface CourseCategoryFieldRefs {
    readonly id: FieldRef<"CourseCategory", 'String'>
    readonly name: FieldRef<"CourseCategory", 'String'>
    readonly slug: FieldRef<"CourseCategory", 'String'>
    readonly createdAt: FieldRef<"CourseCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseCategory findUnique
   */
  export type CourseCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategory to fetch.
     */
    where: CourseCategoryWhereUniqueInput
  }

  /**
   * CourseCategory findUniqueOrThrow
   */
  export type CourseCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategory to fetch.
     */
    where: CourseCategoryWhereUniqueInput
  }

  /**
   * CourseCategory findFirst
   */
  export type CourseCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategory to fetch.
     */
    where?: CourseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategories to fetch.
     */
    orderBy?: CourseCategoryOrderByWithRelationInput | CourseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseCategories.
     */
    cursor?: CourseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseCategories.
     */
    distinct?: CourseCategoryScalarFieldEnum | CourseCategoryScalarFieldEnum[]
  }

  /**
   * CourseCategory findFirstOrThrow
   */
  export type CourseCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategory to fetch.
     */
    where?: CourseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategories to fetch.
     */
    orderBy?: CourseCategoryOrderByWithRelationInput | CourseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseCategories.
     */
    cursor?: CourseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseCategories.
     */
    distinct?: CourseCategoryScalarFieldEnum | CourseCategoryScalarFieldEnum[]
  }

  /**
   * CourseCategory findMany
   */
  export type CourseCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategories to fetch.
     */
    where?: CourseCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategories to fetch.
     */
    orderBy?: CourseCategoryOrderByWithRelationInput | CourseCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseCategories.
     */
    cursor?: CourseCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategories.
     */
    skip?: number
    distinct?: CourseCategoryScalarFieldEnum | CourseCategoryScalarFieldEnum[]
  }

  /**
   * CourseCategory create
   */
  export type CourseCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseCategory.
     */
    data: XOR<CourseCategoryCreateInput, CourseCategoryUncheckedCreateInput>
  }

  /**
   * CourseCategory createMany
   */
  export type CourseCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseCategories.
     */
    data: CourseCategoryCreateManyInput | CourseCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseCategory createManyAndReturn
   */
  export type CourseCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many CourseCategories.
     */
    data: CourseCategoryCreateManyInput | CourseCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseCategory update
   */
  export type CourseCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseCategory.
     */
    data: XOR<CourseCategoryUpdateInput, CourseCategoryUncheckedUpdateInput>
    /**
     * Choose, which CourseCategory to update.
     */
    where: CourseCategoryWhereUniqueInput
  }

  /**
   * CourseCategory updateMany
   */
  export type CourseCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseCategories.
     */
    data: XOR<CourseCategoryUpdateManyMutationInput, CourseCategoryUncheckedUpdateManyInput>
    /**
     * Filter which CourseCategories to update
     */
    where?: CourseCategoryWhereInput
    /**
     * Limit how many CourseCategories to update.
     */
    limit?: number
  }

  /**
   * CourseCategory updateManyAndReturn
   */
  export type CourseCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * The data used to update CourseCategories.
     */
    data: XOR<CourseCategoryUpdateManyMutationInput, CourseCategoryUncheckedUpdateManyInput>
    /**
     * Filter which CourseCategories to update
     */
    where?: CourseCategoryWhereInput
    /**
     * Limit how many CourseCategories to update.
     */
    limit?: number
  }

  /**
   * CourseCategory upsert
   */
  export type CourseCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseCategory to update in case it exists.
     */
    where: CourseCategoryWhereUniqueInput
    /**
     * In case the CourseCategory found by the `where` argument doesn't exist, create a new CourseCategory with this data.
     */
    create: XOR<CourseCategoryCreateInput, CourseCategoryUncheckedCreateInput>
    /**
     * In case the CourseCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseCategoryUpdateInput, CourseCategoryUncheckedUpdateInput>
  }

  /**
   * CourseCategory delete
   */
  export type CourseCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
    /**
     * Filter which CourseCategory to delete.
     */
    where: CourseCategoryWhereUniqueInput
  }

  /**
   * CourseCategory deleteMany
   */
  export type CourseCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseCategories to delete
     */
    where?: CourseCategoryWhereInput
    /**
     * Limit how many CourseCategories to delete.
     */
    limit?: number
  }

  /**
   * CourseCategory.courses
   */
  export type CourseCategory$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    where?: CourseCategoryJunctionWhereInput
    orderBy?: CourseCategoryJunctionOrderByWithRelationInput | CourseCategoryJunctionOrderByWithRelationInput[]
    cursor?: CourseCategoryJunctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseCategoryJunctionScalarFieldEnum | CourseCategoryJunctionScalarFieldEnum[]
  }

  /**
   * CourseCategory without action
   */
  export type CourseCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategory
     */
    select?: CourseCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategory
     */
    omit?: CourseCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryInclude<ExtArgs> | null
  }


  /**
   * Model CourseCategoryJunction
   */

  export type AggregateCourseCategoryJunction = {
    _count: CourseCategoryJunctionCountAggregateOutputType | null
    _min: CourseCategoryJunctionMinAggregateOutputType | null
    _max: CourseCategoryJunctionMaxAggregateOutputType | null
  }

  export type CourseCategoryJunctionMinAggregateOutputType = {
    courseId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type CourseCategoryJunctionMaxAggregateOutputType = {
    courseId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type CourseCategoryJunctionCountAggregateOutputType = {
    courseId: number
    categoryId: number
    createdAt: number
    _all: number
  }


  export type CourseCategoryJunctionMinAggregateInputType = {
    courseId?: true
    categoryId?: true
    createdAt?: true
  }

  export type CourseCategoryJunctionMaxAggregateInputType = {
    courseId?: true
    categoryId?: true
    createdAt?: true
  }

  export type CourseCategoryJunctionCountAggregateInputType = {
    courseId?: true
    categoryId?: true
    createdAt?: true
    _all?: true
  }

  export type CourseCategoryJunctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseCategoryJunction to aggregate.
     */
    where?: CourseCategoryJunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategoryJunctions to fetch.
     */
    orderBy?: CourseCategoryJunctionOrderByWithRelationInput | CourseCategoryJunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseCategoryJunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategoryJunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategoryJunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseCategoryJunctions
    **/
    _count?: true | CourseCategoryJunctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseCategoryJunctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseCategoryJunctionMaxAggregateInputType
  }

  export type GetCourseCategoryJunctionAggregateType<T extends CourseCategoryJunctionAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseCategoryJunction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseCategoryJunction[P]>
      : GetScalarType<T[P], AggregateCourseCategoryJunction[P]>
  }




  export type CourseCategoryJunctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseCategoryJunctionWhereInput
    orderBy?: CourseCategoryJunctionOrderByWithAggregationInput | CourseCategoryJunctionOrderByWithAggregationInput[]
    by: CourseCategoryJunctionScalarFieldEnum[] | CourseCategoryJunctionScalarFieldEnum
    having?: CourseCategoryJunctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCategoryJunctionCountAggregateInputType | true
    _min?: CourseCategoryJunctionMinAggregateInputType
    _max?: CourseCategoryJunctionMaxAggregateInputType
  }

  export type CourseCategoryJunctionGroupByOutputType = {
    courseId: string
    categoryId: string
    createdAt: Date | null
    _count: CourseCategoryJunctionCountAggregateOutputType | null
    _min: CourseCategoryJunctionMinAggregateOutputType | null
    _max: CourseCategoryJunctionMaxAggregateOutputType | null
  }

  type GetCourseCategoryJunctionGroupByPayload<T extends CourseCategoryJunctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseCategoryJunctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseCategoryJunctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseCategoryJunctionGroupByOutputType[P]>
            : GetScalarType<T[P], CourseCategoryJunctionGroupByOutputType[P]>
        }
      >
    >


  export type CourseCategoryJunctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    courseId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    category?: boolean | CourseCategoryDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseCategoryJunction"]>

  export type CourseCategoryJunctionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    courseId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    category?: boolean | CourseCategoryDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseCategoryJunction"]>

  export type CourseCategoryJunctionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    courseId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    category?: boolean | CourseCategoryDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseCategoryJunction"]>

  export type CourseCategoryJunctionSelectScalar = {
    courseId?: boolean
    categoryId?: boolean
    createdAt?: boolean
  }

  export type CourseCategoryJunctionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"courseId" | "categoryId" | "createdAt", ExtArgs["result"]["courseCategoryJunction"]>
  export type CourseCategoryJunctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CourseCategoryDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CourseCategoryJunctionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CourseCategoryDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CourseCategoryJunctionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CourseCategoryDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $CourseCategoryJunctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseCategoryJunction"
    objects: {
      category: Prisma.$CourseCategoryPayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      courseId: string
      categoryId: string
      createdAt: Date | null
    }, ExtArgs["result"]["courseCategoryJunction"]>
    composites: {}
  }

  type CourseCategoryJunctionGetPayload<S extends boolean | null | undefined | CourseCategoryJunctionDefaultArgs> = $Result.GetResult<Prisma.$CourseCategoryJunctionPayload, S>

  type CourseCategoryJunctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseCategoryJunctionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCategoryJunctionCountAggregateInputType | true
    }

  export interface CourseCategoryJunctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseCategoryJunction'], meta: { name: 'CourseCategoryJunction' } }
    /**
     * Find zero or one CourseCategoryJunction that matches the filter.
     * @param {CourseCategoryJunctionFindUniqueArgs} args - Arguments to find a CourseCategoryJunction
     * @example
     * // Get one CourseCategoryJunction
     * const courseCategoryJunction = await prisma.courseCategoryJunction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseCategoryJunctionFindUniqueArgs>(args: SelectSubset<T, CourseCategoryJunctionFindUniqueArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseCategoryJunction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseCategoryJunctionFindUniqueOrThrowArgs} args - Arguments to find a CourseCategoryJunction
     * @example
     * // Get one CourseCategoryJunction
     * const courseCategoryJunction = await prisma.courseCategoryJunction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseCategoryJunctionFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseCategoryJunctionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseCategoryJunction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryJunctionFindFirstArgs} args - Arguments to find a CourseCategoryJunction
     * @example
     * // Get one CourseCategoryJunction
     * const courseCategoryJunction = await prisma.courseCategoryJunction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseCategoryJunctionFindFirstArgs>(args?: SelectSubset<T, CourseCategoryJunctionFindFirstArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseCategoryJunction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryJunctionFindFirstOrThrowArgs} args - Arguments to find a CourseCategoryJunction
     * @example
     * // Get one CourseCategoryJunction
     * const courseCategoryJunction = await prisma.courseCategoryJunction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseCategoryJunctionFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseCategoryJunctionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseCategoryJunctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryJunctionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseCategoryJunctions
     * const courseCategoryJunctions = await prisma.courseCategoryJunction.findMany()
     * 
     * // Get first 10 CourseCategoryJunctions
     * const courseCategoryJunctions = await prisma.courseCategoryJunction.findMany({ take: 10 })
     * 
     * // Only select the `courseId`
     * const courseCategoryJunctionWithCourseIdOnly = await prisma.courseCategoryJunction.findMany({ select: { courseId: true } })
     * 
     */
    findMany<T extends CourseCategoryJunctionFindManyArgs>(args?: SelectSubset<T, CourseCategoryJunctionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseCategoryJunction.
     * @param {CourseCategoryJunctionCreateArgs} args - Arguments to create a CourseCategoryJunction.
     * @example
     * // Create one CourseCategoryJunction
     * const CourseCategoryJunction = await prisma.courseCategoryJunction.create({
     *   data: {
     *     // ... data to create a CourseCategoryJunction
     *   }
     * })
     * 
     */
    create<T extends CourseCategoryJunctionCreateArgs>(args: SelectSubset<T, CourseCategoryJunctionCreateArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseCategoryJunctions.
     * @param {CourseCategoryJunctionCreateManyArgs} args - Arguments to create many CourseCategoryJunctions.
     * @example
     * // Create many CourseCategoryJunctions
     * const courseCategoryJunction = await prisma.courseCategoryJunction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCategoryJunctionCreateManyArgs>(args?: SelectSubset<T, CourseCategoryJunctionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseCategoryJunctions and returns the data saved in the database.
     * @param {CourseCategoryJunctionCreateManyAndReturnArgs} args - Arguments to create many CourseCategoryJunctions.
     * @example
     * // Create many CourseCategoryJunctions
     * const courseCategoryJunction = await prisma.courseCategoryJunction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseCategoryJunctions and only return the `courseId`
     * const courseCategoryJunctionWithCourseIdOnly = await prisma.courseCategoryJunction.createManyAndReturn({
     *   select: { courseId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCategoryJunctionCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCategoryJunctionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseCategoryJunction.
     * @param {CourseCategoryJunctionDeleteArgs} args - Arguments to delete one CourseCategoryJunction.
     * @example
     * // Delete one CourseCategoryJunction
     * const CourseCategoryJunction = await prisma.courseCategoryJunction.delete({
     *   where: {
     *     // ... filter to delete one CourseCategoryJunction
     *   }
     * })
     * 
     */
    delete<T extends CourseCategoryJunctionDeleteArgs>(args: SelectSubset<T, CourseCategoryJunctionDeleteArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseCategoryJunction.
     * @param {CourseCategoryJunctionUpdateArgs} args - Arguments to update one CourseCategoryJunction.
     * @example
     * // Update one CourseCategoryJunction
     * const courseCategoryJunction = await prisma.courseCategoryJunction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseCategoryJunctionUpdateArgs>(args: SelectSubset<T, CourseCategoryJunctionUpdateArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseCategoryJunctions.
     * @param {CourseCategoryJunctionDeleteManyArgs} args - Arguments to filter CourseCategoryJunctions to delete.
     * @example
     * // Delete a few CourseCategoryJunctions
     * const { count } = await prisma.courseCategoryJunction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseCategoryJunctionDeleteManyArgs>(args?: SelectSubset<T, CourseCategoryJunctionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseCategoryJunctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryJunctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseCategoryJunctions
     * const courseCategoryJunction = await prisma.courseCategoryJunction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseCategoryJunctionUpdateManyArgs>(args: SelectSubset<T, CourseCategoryJunctionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseCategoryJunctions and returns the data updated in the database.
     * @param {CourseCategoryJunctionUpdateManyAndReturnArgs} args - Arguments to update many CourseCategoryJunctions.
     * @example
     * // Update many CourseCategoryJunctions
     * const courseCategoryJunction = await prisma.courseCategoryJunction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseCategoryJunctions and only return the `courseId`
     * const courseCategoryJunctionWithCourseIdOnly = await prisma.courseCategoryJunction.updateManyAndReturn({
     *   select: { courseId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseCategoryJunctionUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseCategoryJunctionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseCategoryJunction.
     * @param {CourseCategoryJunctionUpsertArgs} args - Arguments to update or create a CourseCategoryJunction.
     * @example
     * // Update or create a CourseCategoryJunction
     * const courseCategoryJunction = await prisma.courseCategoryJunction.upsert({
     *   create: {
     *     // ... data to create a CourseCategoryJunction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseCategoryJunction we want to update
     *   }
     * })
     */
    upsert<T extends CourseCategoryJunctionUpsertArgs>(args: SelectSubset<T, CourseCategoryJunctionUpsertArgs<ExtArgs>>): Prisma__CourseCategoryJunctionClient<$Result.GetResult<Prisma.$CourseCategoryJunctionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseCategoryJunctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryJunctionCountArgs} args - Arguments to filter CourseCategoryJunctions to count.
     * @example
     * // Count the number of CourseCategoryJunctions
     * const count = await prisma.courseCategoryJunction.count({
     *   where: {
     *     // ... the filter for the CourseCategoryJunctions we want to count
     *   }
     * })
    **/
    count<T extends CourseCategoryJunctionCountArgs>(
      args?: Subset<T, CourseCategoryJunctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCategoryJunctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseCategoryJunction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryJunctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseCategoryJunctionAggregateArgs>(args: Subset<T, CourseCategoryJunctionAggregateArgs>): Prisma.PrismaPromise<GetCourseCategoryJunctionAggregateType<T>>

    /**
     * Group by CourseCategoryJunction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCategoryJunctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseCategoryJunctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseCategoryJunctionGroupByArgs['orderBy'] }
        : { orderBy?: CourseCategoryJunctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseCategoryJunctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseCategoryJunctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseCategoryJunction model
   */
  readonly fields: CourseCategoryJunctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseCategoryJunction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseCategoryJunctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CourseCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseCategoryDefaultArgs<ExtArgs>>): Prisma__CourseCategoryClient<$Result.GetResult<Prisma.$CourseCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseCategoryJunction model
   */
  interface CourseCategoryJunctionFieldRefs {
    readonly courseId: FieldRef<"CourseCategoryJunction", 'String'>
    readonly categoryId: FieldRef<"CourseCategoryJunction", 'String'>
    readonly createdAt: FieldRef<"CourseCategoryJunction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseCategoryJunction findUnique
   */
  export type CourseCategoryJunctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategoryJunction to fetch.
     */
    where: CourseCategoryJunctionWhereUniqueInput
  }

  /**
   * CourseCategoryJunction findUniqueOrThrow
   */
  export type CourseCategoryJunctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategoryJunction to fetch.
     */
    where: CourseCategoryJunctionWhereUniqueInput
  }

  /**
   * CourseCategoryJunction findFirst
   */
  export type CourseCategoryJunctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategoryJunction to fetch.
     */
    where?: CourseCategoryJunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategoryJunctions to fetch.
     */
    orderBy?: CourseCategoryJunctionOrderByWithRelationInput | CourseCategoryJunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseCategoryJunctions.
     */
    cursor?: CourseCategoryJunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategoryJunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategoryJunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseCategoryJunctions.
     */
    distinct?: CourseCategoryJunctionScalarFieldEnum | CourseCategoryJunctionScalarFieldEnum[]
  }

  /**
   * CourseCategoryJunction findFirstOrThrow
   */
  export type CourseCategoryJunctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategoryJunction to fetch.
     */
    where?: CourseCategoryJunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategoryJunctions to fetch.
     */
    orderBy?: CourseCategoryJunctionOrderByWithRelationInput | CourseCategoryJunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseCategoryJunctions.
     */
    cursor?: CourseCategoryJunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategoryJunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategoryJunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseCategoryJunctions.
     */
    distinct?: CourseCategoryJunctionScalarFieldEnum | CourseCategoryJunctionScalarFieldEnum[]
  }

  /**
   * CourseCategoryJunction findMany
   */
  export type CourseCategoryJunctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCategoryJunctions to fetch.
     */
    where?: CourseCategoryJunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCategoryJunctions to fetch.
     */
    orderBy?: CourseCategoryJunctionOrderByWithRelationInput | CourseCategoryJunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseCategoryJunctions.
     */
    cursor?: CourseCategoryJunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCategoryJunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCategoryJunctions.
     */
    skip?: number
    distinct?: CourseCategoryJunctionScalarFieldEnum | CourseCategoryJunctionScalarFieldEnum[]
  }

  /**
   * CourseCategoryJunction create
   */
  export type CourseCategoryJunctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseCategoryJunction.
     */
    data: XOR<CourseCategoryJunctionCreateInput, CourseCategoryJunctionUncheckedCreateInput>
  }

  /**
   * CourseCategoryJunction createMany
   */
  export type CourseCategoryJunctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseCategoryJunctions.
     */
    data: CourseCategoryJunctionCreateManyInput | CourseCategoryJunctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseCategoryJunction createManyAndReturn
   */
  export type CourseCategoryJunctionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * The data used to create many CourseCategoryJunctions.
     */
    data: CourseCategoryJunctionCreateManyInput | CourseCategoryJunctionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseCategoryJunction update
   */
  export type CourseCategoryJunctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseCategoryJunction.
     */
    data: XOR<CourseCategoryJunctionUpdateInput, CourseCategoryJunctionUncheckedUpdateInput>
    /**
     * Choose, which CourseCategoryJunction to update.
     */
    where: CourseCategoryJunctionWhereUniqueInput
  }

  /**
   * CourseCategoryJunction updateMany
   */
  export type CourseCategoryJunctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseCategoryJunctions.
     */
    data: XOR<CourseCategoryJunctionUpdateManyMutationInput, CourseCategoryJunctionUncheckedUpdateManyInput>
    /**
     * Filter which CourseCategoryJunctions to update
     */
    where?: CourseCategoryJunctionWhereInput
    /**
     * Limit how many CourseCategoryJunctions to update.
     */
    limit?: number
  }

  /**
   * CourseCategoryJunction updateManyAndReturn
   */
  export type CourseCategoryJunctionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * The data used to update CourseCategoryJunctions.
     */
    data: XOR<CourseCategoryJunctionUpdateManyMutationInput, CourseCategoryJunctionUncheckedUpdateManyInput>
    /**
     * Filter which CourseCategoryJunctions to update
     */
    where?: CourseCategoryJunctionWhereInput
    /**
     * Limit how many CourseCategoryJunctions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseCategoryJunction upsert
   */
  export type CourseCategoryJunctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseCategoryJunction to update in case it exists.
     */
    where: CourseCategoryJunctionWhereUniqueInput
    /**
     * In case the CourseCategoryJunction found by the `where` argument doesn't exist, create a new CourseCategoryJunction with this data.
     */
    create: XOR<CourseCategoryJunctionCreateInput, CourseCategoryJunctionUncheckedCreateInput>
    /**
     * In case the CourseCategoryJunction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseCategoryJunctionUpdateInput, CourseCategoryJunctionUncheckedUpdateInput>
  }

  /**
   * CourseCategoryJunction delete
   */
  export type CourseCategoryJunctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
    /**
     * Filter which CourseCategoryJunction to delete.
     */
    where: CourseCategoryJunctionWhereUniqueInput
  }

  /**
   * CourseCategoryJunction deleteMany
   */
  export type CourseCategoryJunctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseCategoryJunctions to delete
     */
    where?: CourseCategoryJunctionWhereInput
    /**
     * Limit how many CourseCategoryJunctions to delete.
     */
    limit?: number
  }

  /**
   * CourseCategoryJunction without action
   */
  export type CourseCategoryJunctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCategoryJunction
     */
    select?: CourseCategoryJunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCategoryJunction
     */
    omit?: CourseCategoryJunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCategoryJunctionInclude<ExtArgs> | null
  }


  /**
   * Model course_reviews
   */

  export type AggregateCourse_reviews = {
    _count: Course_reviewsCountAggregateOutputType | null
    _avg: Course_reviewsAvgAggregateOutputType | null
    _sum: Course_reviewsSumAggregateOutputType | null
    _min: Course_reviewsMinAggregateOutputType | null
    _max: Course_reviewsMaxAggregateOutputType | null
  }

  export type Course_reviewsAvgAggregateOutputType = {
    rating: number | null
    difficulty: number | null
    workload: number | null
    overall_rating: Decimal | null
  }

  export type Course_reviewsSumAggregateOutputType = {
    rating: number | null
    difficulty: number | null
    workload: number | null
    overall_rating: Decimal | null
  }

  export type Course_reviewsMinAggregateOutputType = {
    id: string | null
    course_id: string | null
    author_id: string | null
    rating: number | null
    difficulty: number | null
    workload: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
    overall_rating: Decimal | null
  }

  export type Course_reviewsMaxAggregateOutputType = {
    id: string | null
    course_id: string | null
    author_id: string | null
    rating: number | null
    difficulty: number | null
    workload: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
    overall_rating: Decimal | null
  }

  export type Course_reviewsCountAggregateOutputType = {
    id: number
    course_id: number
    author_id: number
    rating: number
    difficulty: number
    workload: number
    content: number
    created_at: number
    updated_at: number
    overall_rating: number
    _all: number
  }


  export type Course_reviewsAvgAggregateInputType = {
    rating?: true
    difficulty?: true
    workload?: true
    overall_rating?: true
  }

  export type Course_reviewsSumAggregateInputType = {
    rating?: true
    difficulty?: true
    workload?: true
    overall_rating?: true
  }

  export type Course_reviewsMinAggregateInputType = {
    id?: true
    course_id?: true
    author_id?: true
    rating?: true
    difficulty?: true
    workload?: true
    content?: true
    created_at?: true
    updated_at?: true
    overall_rating?: true
  }

  export type Course_reviewsMaxAggregateInputType = {
    id?: true
    course_id?: true
    author_id?: true
    rating?: true
    difficulty?: true
    workload?: true
    content?: true
    created_at?: true
    updated_at?: true
    overall_rating?: true
  }

  export type Course_reviewsCountAggregateInputType = {
    id?: true
    course_id?: true
    author_id?: true
    rating?: true
    difficulty?: true
    workload?: true
    content?: true
    created_at?: true
    updated_at?: true
    overall_rating?: true
    _all?: true
  }

  export type Course_reviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which course_reviews to aggregate.
     */
    where?: course_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_reviews to fetch.
     */
    orderBy?: course_reviewsOrderByWithRelationInput | course_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: course_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned course_reviews
    **/
    _count?: true | Course_reviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Course_reviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Course_reviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Course_reviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Course_reviewsMaxAggregateInputType
  }

  export type GetCourse_reviewsAggregateType<T extends Course_reviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse_reviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse_reviews[P]>
      : GetScalarType<T[P], AggregateCourse_reviews[P]>
  }




  export type course_reviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_reviewsWhereInput
    orderBy?: course_reviewsOrderByWithAggregationInput | course_reviewsOrderByWithAggregationInput[]
    by: Course_reviewsScalarFieldEnum[] | Course_reviewsScalarFieldEnum
    having?: course_reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Course_reviewsCountAggregateInputType | true
    _avg?: Course_reviewsAvgAggregateInputType
    _sum?: Course_reviewsSumAggregateInputType
    _min?: Course_reviewsMinAggregateInputType
    _max?: Course_reviewsMaxAggregateInputType
  }

  export type Course_reviewsGroupByOutputType = {
    id: string
    course_id: string
    author_id: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at: Date | null
    updated_at: Date | null
    overall_rating: Decimal
    _count: Course_reviewsCountAggregateOutputType | null
    _avg: Course_reviewsAvgAggregateOutputType | null
    _sum: Course_reviewsSumAggregateOutputType | null
    _min: Course_reviewsMinAggregateOutputType | null
    _max: Course_reviewsMaxAggregateOutputType | null
  }

  type GetCourse_reviewsGroupByPayload<T extends course_reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Course_reviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Course_reviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Course_reviewsGroupByOutputType[P]>
            : GetScalarType<T[P], Course_reviewsGroupByOutputType[P]>
        }
      >
    >


  export type course_reviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course_id?: boolean
    author_id?: boolean
    rating?: boolean
    difficulty?: boolean
    workload?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    overall_rating?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course_reviews"]>

  export type course_reviewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course_id?: boolean
    author_id?: boolean
    rating?: boolean
    difficulty?: boolean
    workload?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    overall_rating?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course_reviews"]>

  export type course_reviewsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course_id?: boolean
    author_id?: boolean
    rating?: boolean
    difficulty?: boolean
    workload?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    overall_rating?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course_reviews"]>

  export type course_reviewsSelectScalar = {
    id?: boolean
    course_id?: boolean
    author_id?: boolean
    rating?: boolean
    difficulty?: boolean
    workload?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    overall_rating?: boolean
  }

  export type course_reviewsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "course_id" | "author_id" | "rating" | "difficulty" | "workload" | "content" | "created_at" | "updated_at" | "overall_rating", ExtArgs["result"]["course_reviews"]>
  export type course_reviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type course_reviewsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type course_reviewsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $course_reviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "course_reviews"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
      courses: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      course_id: string
      author_id: string
      rating: number
      difficulty: number
      workload: number
      content: string
      created_at: Date | null
      updated_at: Date | null
      overall_rating: Prisma.Decimal
    }, ExtArgs["result"]["course_reviews"]>
    composites: {}
  }

  type course_reviewsGetPayload<S extends boolean | null | undefined | course_reviewsDefaultArgs> = $Result.GetResult<Prisma.$course_reviewsPayload, S>

  type course_reviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<course_reviewsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Course_reviewsCountAggregateInputType | true
    }

  export interface course_reviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['course_reviews'], meta: { name: 'course_reviews' } }
    /**
     * Find zero or one Course_reviews that matches the filter.
     * @param {course_reviewsFindUniqueArgs} args - Arguments to find a Course_reviews
     * @example
     * // Get one Course_reviews
     * const course_reviews = await prisma.course_reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends course_reviewsFindUniqueArgs>(args: SelectSubset<T, course_reviewsFindUniqueArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course_reviews that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {course_reviewsFindUniqueOrThrowArgs} args - Arguments to find a Course_reviews
     * @example
     * // Get one Course_reviews
     * const course_reviews = await prisma.course_reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends course_reviewsFindUniqueOrThrowArgs>(args: SelectSubset<T, course_reviewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course_reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_reviewsFindFirstArgs} args - Arguments to find a Course_reviews
     * @example
     * // Get one Course_reviews
     * const course_reviews = await prisma.course_reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends course_reviewsFindFirstArgs>(args?: SelectSubset<T, course_reviewsFindFirstArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course_reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_reviewsFindFirstOrThrowArgs} args - Arguments to find a Course_reviews
     * @example
     * // Get one Course_reviews
     * const course_reviews = await prisma.course_reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends course_reviewsFindFirstOrThrowArgs>(args?: SelectSubset<T, course_reviewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Course_reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_reviewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Course_reviews
     * const course_reviews = await prisma.course_reviews.findMany()
     * 
     * // Get first 10 Course_reviews
     * const course_reviews = await prisma.course_reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const course_reviewsWithIdOnly = await prisma.course_reviews.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends course_reviewsFindManyArgs>(args?: SelectSubset<T, course_reviewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course_reviews.
     * @param {course_reviewsCreateArgs} args - Arguments to create a Course_reviews.
     * @example
     * // Create one Course_reviews
     * const Course_reviews = await prisma.course_reviews.create({
     *   data: {
     *     // ... data to create a Course_reviews
     *   }
     * })
     * 
     */
    create<T extends course_reviewsCreateArgs>(args: SelectSubset<T, course_reviewsCreateArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Course_reviews.
     * @param {course_reviewsCreateManyArgs} args - Arguments to create many Course_reviews.
     * @example
     * // Create many Course_reviews
     * const course_reviews = await prisma.course_reviews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends course_reviewsCreateManyArgs>(args?: SelectSubset<T, course_reviewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Course_reviews and returns the data saved in the database.
     * @param {course_reviewsCreateManyAndReturnArgs} args - Arguments to create many Course_reviews.
     * @example
     * // Create many Course_reviews
     * const course_reviews = await prisma.course_reviews.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Course_reviews and only return the `id`
     * const course_reviewsWithIdOnly = await prisma.course_reviews.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends course_reviewsCreateManyAndReturnArgs>(args?: SelectSubset<T, course_reviewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course_reviews.
     * @param {course_reviewsDeleteArgs} args - Arguments to delete one Course_reviews.
     * @example
     * // Delete one Course_reviews
     * const Course_reviews = await prisma.course_reviews.delete({
     *   where: {
     *     // ... filter to delete one Course_reviews
     *   }
     * })
     * 
     */
    delete<T extends course_reviewsDeleteArgs>(args: SelectSubset<T, course_reviewsDeleteArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course_reviews.
     * @param {course_reviewsUpdateArgs} args - Arguments to update one Course_reviews.
     * @example
     * // Update one Course_reviews
     * const course_reviews = await prisma.course_reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends course_reviewsUpdateArgs>(args: SelectSubset<T, course_reviewsUpdateArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Course_reviews.
     * @param {course_reviewsDeleteManyArgs} args - Arguments to filter Course_reviews to delete.
     * @example
     * // Delete a few Course_reviews
     * const { count } = await prisma.course_reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends course_reviewsDeleteManyArgs>(args?: SelectSubset<T, course_reviewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Course_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Course_reviews
     * const course_reviews = await prisma.course_reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends course_reviewsUpdateManyArgs>(args: SelectSubset<T, course_reviewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Course_reviews and returns the data updated in the database.
     * @param {course_reviewsUpdateManyAndReturnArgs} args - Arguments to update many Course_reviews.
     * @example
     * // Update many Course_reviews
     * const course_reviews = await prisma.course_reviews.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Course_reviews and only return the `id`
     * const course_reviewsWithIdOnly = await prisma.course_reviews.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends course_reviewsUpdateManyAndReturnArgs>(args: SelectSubset<T, course_reviewsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course_reviews.
     * @param {course_reviewsUpsertArgs} args - Arguments to update or create a Course_reviews.
     * @example
     * // Update or create a Course_reviews
     * const course_reviews = await prisma.course_reviews.upsert({
     *   create: {
     *     // ... data to create a Course_reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course_reviews we want to update
     *   }
     * })
     */
    upsert<T extends course_reviewsUpsertArgs>(args: SelectSubset<T, course_reviewsUpsertArgs<ExtArgs>>): Prisma__course_reviewsClient<$Result.GetResult<Prisma.$course_reviewsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Course_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_reviewsCountArgs} args - Arguments to filter Course_reviews to count.
     * @example
     * // Count the number of Course_reviews
     * const count = await prisma.course_reviews.count({
     *   where: {
     *     // ... the filter for the Course_reviews we want to count
     *   }
     * })
    **/
    count<T extends course_reviewsCountArgs>(
      args?: Subset<T, course_reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Course_reviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Course_reviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Course_reviewsAggregateArgs>(args: Subset<T, Course_reviewsAggregateArgs>): Prisma.PrismaPromise<GetCourse_reviewsAggregateType<T>>

    /**
     * Group by Course_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends course_reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: course_reviewsGroupByArgs['orderBy'] }
        : { orderBy?: course_reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, course_reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourse_reviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the course_reviews model
   */
  readonly fields: course_reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for course_reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__course_reviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    courses<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the course_reviews model
   */
  interface course_reviewsFieldRefs {
    readonly id: FieldRef<"course_reviews", 'String'>
    readonly course_id: FieldRef<"course_reviews", 'String'>
    readonly author_id: FieldRef<"course_reviews", 'String'>
    readonly rating: FieldRef<"course_reviews", 'Int'>
    readonly difficulty: FieldRef<"course_reviews", 'Int'>
    readonly workload: FieldRef<"course_reviews", 'Int'>
    readonly content: FieldRef<"course_reviews", 'String'>
    readonly created_at: FieldRef<"course_reviews", 'DateTime'>
    readonly updated_at: FieldRef<"course_reviews", 'DateTime'>
    readonly overall_rating: FieldRef<"course_reviews", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * course_reviews findUnique
   */
  export type course_reviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which course_reviews to fetch.
     */
    where: course_reviewsWhereUniqueInput
  }

  /**
   * course_reviews findUniqueOrThrow
   */
  export type course_reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which course_reviews to fetch.
     */
    where: course_reviewsWhereUniqueInput
  }

  /**
   * course_reviews findFirst
   */
  export type course_reviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which course_reviews to fetch.
     */
    where?: course_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_reviews to fetch.
     */
    orderBy?: course_reviewsOrderByWithRelationInput | course_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for course_reviews.
     */
    cursor?: course_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of course_reviews.
     */
    distinct?: Course_reviewsScalarFieldEnum | Course_reviewsScalarFieldEnum[]
  }

  /**
   * course_reviews findFirstOrThrow
   */
  export type course_reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which course_reviews to fetch.
     */
    where?: course_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_reviews to fetch.
     */
    orderBy?: course_reviewsOrderByWithRelationInput | course_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for course_reviews.
     */
    cursor?: course_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of course_reviews.
     */
    distinct?: Course_reviewsScalarFieldEnum | Course_reviewsScalarFieldEnum[]
  }

  /**
   * course_reviews findMany
   */
  export type course_reviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which course_reviews to fetch.
     */
    where?: course_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_reviews to fetch.
     */
    orderBy?: course_reviewsOrderByWithRelationInput | course_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing course_reviews.
     */
    cursor?: course_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_reviews.
     */
    skip?: number
    distinct?: Course_reviewsScalarFieldEnum | Course_reviewsScalarFieldEnum[]
  }

  /**
   * course_reviews create
   */
  export type course_reviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a course_reviews.
     */
    data: XOR<course_reviewsCreateInput, course_reviewsUncheckedCreateInput>
  }

  /**
   * course_reviews createMany
   */
  export type course_reviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many course_reviews.
     */
    data: course_reviewsCreateManyInput | course_reviewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * course_reviews createManyAndReturn
   */
  export type course_reviewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * The data used to create many course_reviews.
     */
    data: course_reviewsCreateManyInput | course_reviewsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * course_reviews update
   */
  export type course_reviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a course_reviews.
     */
    data: XOR<course_reviewsUpdateInput, course_reviewsUncheckedUpdateInput>
    /**
     * Choose, which course_reviews to update.
     */
    where: course_reviewsWhereUniqueInput
  }

  /**
   * course_reviews updateMany
   */
  export type course_reviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update course_reviews.
     */
    data: XOR<course_reviewsUpdateManyMutationInput, course_reviewsUncheckedUpdateManyInput>
    /**
     * Filter which course_reviews to update
     */
    where?: course_reviewsWhereInput
    /**
     * Limit how many course_reviews to update.
     */
    limit?: number
  }

  /**
   * course_reviews updateManyAndReturn
   */
  export type course_reviewsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * The data used to update course_reviews.
     */
    data: XOR<course_reviewsUpdateManyMutationInput, course_reviewsUncheckedUpdateManyInput>
    /**
     * Filter which course_reviews to update
     */
    where?: course_reviewsWhereInput
    /**
     * Limit how many course_reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * course_reviews upsert
   */
  export type course_reviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the course_reviews to update in case it exists.
     */
    where: course_reviewsWhereUniqueInput
    /**
     * In case the course_reviews found by the `where` argument doesn't exist, create a new course_reviews with this data.
     */
    create: XOR<course_reviewsCreateInput, course_reviewsUncheckedCreateInput>
    /**
     * In case the course_reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<course_reviewsUpdateInput, course_reviewsUncheckedUpdateInput>
  }

  /**
   * course_reviews delete
   */
  export type course_reviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
    /**
     * Filter which course_reviews to delete.
     */
    where: course_reviewsWhereUniqueInput
  }

  /**
   * course_reviews deleteMany
   */
  export type course_reviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which course_reviews to delete
     */
    where?: course_reviewsWhereInput
    /**
     * Limit how many course_reviews to delete.
     */
    limit?: number
  }

  /**
   * course_reviews without action
   */
  export type course_reviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_reviews
     */
    select?: course_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_reviews
     */
    omit?: course_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_reviewsInclude<ExtArgs> | null
  }


  /**
   * Model marketplace_items
   */

  export type AggregateMarketplace_items = {
    _count: Marketplace_itemsCountAggregateOutputType | null
    _avg: Marketplace_itemsAvgAggregateOutputType | null
    _sum: Marketplace_itemsSumAggregateOutputType | null
    _min: Marketplace_itemsMinAggregateOutputType | null
    _max: Marketplace_itemsMaxAggregateOutputType | null
  }

  export type Marketplace_itemsAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type Marketplace_itemsSumAggregateOutputType = {
    price: Decimal | null
  }

  export type Marketplace_itemsMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    price: Decimal | null
    category: string | null
    condition: string | null
    image_url: string | null
    seller_id: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Marketplace_itemsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    price: Decimal | null
    category: string | null
    condition: string | null
    image_url: string | null
    seller_id: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Marketplace_itemsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    price: number
    category: number
    condition: number
    image_url: number
    seller_id: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Marketplace_itemsAvgAggregateInputType = {
    price?: true
  }

  export type Marketplace_itemsSumAggregateInputType = {
    price?: true
  }

  export type Marketplace_itemsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    category?: true
    condition?: true
    image_url?: true
    seller_id?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type Marketplace_itemsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    category?: true
    condition?: true
    image_url?: true
    seller_id?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type Marketplace_itemsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    category?: true
    condition?: true
    image_url?: true
    seller_id?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Marketplace_itemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which marketplace_items to aggregate.
     */
    where?: marketplace_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marketplace_items to fetch.
     */
    orderBy?: marketplace_itemsOrderByWithRelationInput | marketplace_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: marketplace_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marketplace_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marketplace_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned marketplace_items
    **/
    _count?: true | Marketplace_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Marketplace_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Marketplace_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Marketplace_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Marketplace_itemsMaxAggregateInputType
  }

  export type GetMarketplace_itemsAggregateType<T extends Marketplace_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketplace_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketplace_items[P]>
      : GetScalarType<T[P], AggregateMarketplace_items[P]>
  }




  export type marketplace_itemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: marketplace_itemsWhereInput
    orderBy?: marketplace_itemsOrderByWithAggregationInput | marketplace_itemsOrderByWithAggregationInput[]
    by: Marketplace_itemsScalarFieldEnum[] | Marketplace_itemsScalarFieldEnum
    having?: marketplace_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Marketplace_itemsCountAggregateInputType | true
    _avg?: Marketplace_itemsAvgAggregateInputType
    _sum?: Marketplace_itemsSumAggregateInputType
    _min?: Marketplace_itemsMinAggregateInputType
    _max?: Marketplace_itemsMaxAggregateInputType
  }

  export type Marketplace_itemsGroupByOutputType = {
    id: string
    title: string
    description: string
    price: Decimal
    category: string
    condition: string
    image_url: string | null
    seller_id: string
    status: string
    created_at: Date | null
    updated_at: Date | null
    _count: Marketplace_itemsCountAggregateOutputType | null
    _avg: Marketplace_itemsAvgAggregateOutputType | null
    _sum: Marketplace_itemsSumAggregateOutputType | null
    _min: Marketplace_itemsMinAggregateOutputType | null
    _max: Marketplace_itemsMaxAggregateOutputType | null
  }

  type GetMarketplace_itemsGroupByPayload<T extends marketplace_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Marketplace_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Marketplace_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Marketplace_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Marketplace_itemsGroupByOutputType[P]>
        }
      >
    >


  export type marketplace_itemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    category?: boolean
    condition?: boolean
    image_url?: boolean
    seller_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplace_items"]>

  export type marketplace_itemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    category?: boolean
    condition?: boolean
    image_url?: boolean
    seller_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplace_items"]>

  export type marketplace_itemsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    category?: boolean
    condition?: boolean
    image_url?: boolean
    seller_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplace_items"]>

  export type marketplace_itemsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    category?: boolean
    condition?: boolean
    image_url?: boolean
    seller_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type marketplace_itemsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "price" | "category" | "condition" | "image_url" | "seller_id" | "status" | "created_at" | "updated_at", ExtArgs["result"]["marketplace_items"]>
  export type marketplace_itemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type marketplace_itemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type marketplace_itemsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $marketplace_itemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "marketplace_items"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      price: Prisma.Decimal
      category: string
      condition: string
      image_url: string | null
      seller_id: string
      status: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["marketplace_items"]>
    composites: {}
  }

  type marketplace_itemsGetPayload<S extends boolean | null | undefined | marketplace_itemsDefaultArgs> = $Result.GetResult<Prisma.$marketplace_itemsPayload, S>

  type marketplace_itemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<marketplace_itemsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Marketplace_itemsCountAggregateInputType | true
    }

  export interface marketplace_itemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['marketplace_items'], meta: { name: 'marketplace_items' } }
    /**
     * Find zero or one Marketplace_items that matches the filter.
     * @param {marketplace_itemsFindUniqueArgs} args - Arguments to find a Marketplace_items
     * @example
     * // Get one Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends marketplace_itemsFindUniqueArgs>(args: SelectSubset<T, marketplace_itemsFindUniqueArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Marketplace_items that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {marketplace_itemsFindUniqueOrThrowArgs} args - Arguments to find a Marketplace_items
     * @example
     * // Get one Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends marketplace_itemsFindUniqueOrThrowArgs>(args: SelectSubset<T, marketplace_itemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Marketplace_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketplace_itemsFindFirstArgs} args - Arguments to find a Marketplace_items
     * @example
     * // Get one Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends marketplace_itemsFindFirstArgs>(args?: SelectSubset<T, marketplace_itemsFindFirstArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Marketplace_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketplace_itemsFindFirstOrThrowArgs} args - Arguments to find a Marketplace_items
     * @example
     * // Get one Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends marketplace_itemsFindFirstOrThrowArgs>(args?: SelectSubset<T, marketplace_itemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Marketplace_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketplace_itemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.findMany()
     * 
     * // Get first 10 Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketplace_itemsWithIdOnly = await prisma.marketplace_items.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends marketplace_itemsFindManyArgs>(args?: SelectSubset<T, marketplace_itemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Marketplace_items.
     * @param {marketplace_itemsCreateArgs} args - Arguments to create a Marketplace_items.
     * @example
     * // Create one Marketplace_items
     * const Marketplace_items = await prisma.marketplace_items.create({
     *   data: {
     *     // ... data to create a Marketplace_items
     *   }
     * })
     * 
     */
    create<T extends marketplace_itemsCreateArgs>(args: SelectSubset<T, marketplace_itemsCreateArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Marketplace_items.
     * @param {marketplace_itemsCreateManyArgs} args - Arguments to create many Marketplace_items.
     * @example
     * // Create many Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends marketplace_itemsCreateManyArgs>(args?: SelectSubset<T, marketplace_itemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Marketplace_items and returns the data saved in the database.
     * @param {marketplace_itemsCreateManyAndReturnArgs} args - Arguments to create many Marketplace_items.
     * @example
     * // Create many Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Marketplace_items and only return the `id`
     * const marketplace_itemsWithIdOnly = await prisma.marketplace_items.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends marketplace_itemsCreateManyAndReturnArgs>(args?: SelectSubset<T, marketplace_itemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Marketplace_items.
     * @param {marketplace_itemsDeleteArgs} args - Arguments to delete one Marketplace_items.
     * @example
     * // Delete one Marketplace_items
     * const Marketplace_items = await prisma.marketplace_items.delete({
     *   where: {
     *     // ... filter to delete one Marketplace_items
     *   }
     * })
     * 
     */
    delete<T extends marketplace_itemsDeleteArgs>(args: SelectSubset<T, marketplace_itemsDeleteArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Marketplace_items.
     * @param {marketplace_itemsUpdateArgs} args - Arguments to update one Marketplace_items.
     * @example
     * // Update one Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends marketplace_itemsUpdateArgs>(args: SelectSubset<T, marketplace_itemsUpdateArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Marketplace_items.
     * @param {marketplace_itemsDeleteManyArgs} args - Arguments to filter Marketplace_items to delete.
     * @example
     * // Delete a few Marketplace_items
     * const { count } = await prisma.marketplace_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends marketplace_itemsDeleteManyArgs>(args?: SelectSubset<T, marketplace_itemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Marketplace_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketplace_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends marketplace_itemsUpdateManyArgs>(args: SelectSubset<T, marketplace_itemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Marketplace_items and returns the data updated in the database.
     * @param {marketplace_itemsUpdateManyAndReturnArgs} args - Arguments to update many Marketplace_items.
     * @example
     * // Update many Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Marketplace_items and only return the `id`
     * const marketplace_itemsWithIdOnly = await prisma.marketplace_items.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends marketplace_itemsUpdateManyAndReturnArgs>(args: SelectSubset<T, marketplace_itemsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Marketplace_items.
     * @param {marketplace_itemsUpsertArgs} args - Arguments to update or create a Marketplace_items.
     * @example
     * // Update or create a Marketplace_items
     * const marketplace_items = await prisma.marketplace_items.upsert({
     *   create: {
     *     // ... data to create a Marketplace_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Marketplace_items we want to update
     *   }
     * })
     */
    upsert<T extends marketplace_itemsUpsertArgs>(args: SelectSubset<T, marketplace_itemsUpsertArgs<ExtArgs>>): Prisma__marketplace_itemsClient<$Result.GetResult<Prisma.$marketplace_itemsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Marketplace_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketplace_itemsCountArgs} args - Arguments to filter Marketplace_items to count.
     * @example
     * // Count the number of Marketplace_items
     * const count = await prisma.marketplace_items.count({
     *   where: {
     *     // ... the filter for the Marketplace_items we want to count
     *   }
     * })
    **/
    count<T extends marketplace_itemsCountArgs>(
      args?: Subset<T, marketplace_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Marketplace_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Marketplace_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Marketplace_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Marketplace_itemsAggregateArgs>(args: Subset<T, Marketplace_itemsAggregateArgs>): Prisma.PrismaPromise<GetMarketplace_itemsAggregateType<T>>

    /**
     * Group by Marketplace_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketplace_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends marketplace_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: marketplace_itemsGroupByArgs['orderBy'] }
        : { orderBy?: marketplace_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, marketplace_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketplace_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the marketplace_items model
   */
  readonly fields: marketplace_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for marketplace_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__marketplace_itemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the marketplace_items model
   */
  interface marketplace_itemsFieldRefs {
    readonly id: FieldRef<"marketplace_items", 'String'>
    readonly title: FieldRef<"marketplace_items", 'String'>
    readonly description: FieldRef<"marketplace_items", 'String'>
    readonly price: FieldRef<"marketplace_items", 'Decimal'>
    readonly category: FieldRef<"marketplace_items", 'String'>
    readonly condition: FieldRef<"marketplace_items", 'String'>
    readonly image_url: FieldRef<"marketplace_items", 'String'>
    readonly seller_id: FieldRef<"marketplace_items", 'String'>
    readonly status: FieldRef<"marketplace_items", 'String'>
    readonly created_at: FieldRef<"marketplace_items", 'DateTime'>
    readonly updated_at: FieldRef<"marketplace_items", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * marketplace_items findUnique
   */
  export type marketplace_itemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * Filter, which marketplace_items to fetch.
     */
    where: marketplace_itemsWhereUniqueInput
  }

  /**
   * marketplace_items findUniqueOrThrow
   */
  export type marketplace_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * Filter, which marketplace_items to fetch.
     */
    where: marketplace_itemsWhereUniqueInput
  }

  /**
   * marketplace_items findFirst
   */
  export type marketplace_itemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * Filter, which marketplace_items to fetch.
     */
    where?: marketplace_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marketplace_items to fetch.
     */
    orderBy?: marketplace_itemsOrderByWithRelationInput | marketplace_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for marketplace_items.
     */
    cursor?: marketplace_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marketplace_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marketplace_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of marketplace_items.
     */
    distinct?: Marketplace_itemsScalarFieldEnum | Marketplace_itemsScalarFieldEnum[]
  }

  /**
   * marketplace_items findFirstOrThrow
   */
  export type marketplace_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * Filter, which marketplace_items to fetch.
     */
    where?: marketplace_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marketplace_items to fetch.
     */
    orderBy?: marketplace_itemsOrderByWithRelationInput | marketplace_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for marketplace_items.
     */
    cursor?: marketplace_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marketplace_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marketplace_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of marketplace_items.
     */
    distinct?: Marketplace_itemsScalarFieldEnum | Marketplace_itemsScalarFieldEnum[]
  }

  /**
   * marketplace_items findMany
   */
  export type marketplace_itemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * Filter, which marketplace_items to fetch.
     */
    where?: marketplace_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marketplace_items to fetch.
     */
    orderBy?: marketplace_itemsOrderByWithRelationInput | marketplace_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing marketplace_items.
     */
    cursor?: marketplace_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marketplace_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marketplace_items.
     */
    skip?: number
    distinct?: Marketplace_itemsScalarFieldEnum | Marketplace_itemsScalarFieldEnum[]
  }

  /**
   * marketplace_items create
   */
  export type marketplace_itemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a marketplace_items.
     */
    data: XOR<marketplace_itemsCreateInput, marketplace_itemsUncheckedCreateInput>
  }

  /**
   * marketplace_items createMany
   */
  export type marketplace_itemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many marketplace_items.
     */
    data: marketplace_itemsCreateManyInput | marketplace_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * marketplace_items createManyAndReturn
   */
  export type marketplace_itemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * The data used to create many marketplace_items.
     */
    data: marketplace_itemsCreateManyInput | marketplace_itemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * marketplace_items update
   */
  export type marketplace_itemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a marketplace_items.
     */
    data: XOR<marketplace_itemsUpdateInput, marketplace_itemsUncheckedUpdateInput>
    /**
     * Choose, which marketplace_items to update.
     */
    where: marketplace_itemsWhereUniqueInput
  }

  /**
   * marketplace_items updateMany
   */
  export type marketplace_itemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update marketplace_items.
     */
    data: XOR<marketplace_itemsUpdateManyMutationInput, marketplace_itemsUncheckedUpdateManyInput>
    /**
     * Filter which marketplace_items to update
     */
    where?: marketplace_itemsWhereInput
    /**
     * Limit how many marketplace_items to update.
     */
    limit?: number
  }

  /**
   * marketplace_items updateManyAndReturn
   */
  export type marketplace_itemsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * The data used to update marketplace_items.
     */
    data: XOR<marketplace_itemsUpdateManyMutationInput, marketplace_itemsUncheckedUpdateManyInput>
    /**
     * Filter which marketplace_items to update
     */
    where?: marketplace_itemsWhereInput
    /**
     * Limit how many marketplace_items to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * marketplace_items upsert
   */
  export type marketplace_itemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the marketplace_items to update in case it exists.
     */
    where: marketplace_itemsWhereUniqueInput
    /**
     * In case the marketplace_items found by the `where` argument doesn't exist, create a new marketplace_items with this data.
     */
    create: XOR<marketplace_itemsCreateInput, marketplace_itemsUncheckedCreateInput>
    /**
     * In case the marketplace_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<marketplace_itemsUpdateInput, marketplace_itemsUncheckedUpdateInput>
  }

  /**
   * marketplace_items delete
   */
  export type marketplace_itemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
    /**
     * Filter which marketplace_items to delete.
     */
    where: marketplace_itemsWhereUniqueInput
  }

  /**
   * marketplace_items deleteMany
   */
  export type marketplace_itemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which marketplace_items to delete
     */
    where?: marketplace_itemsWhereInput
    /**
     * Limit how many marketplace_items to delete.
     */
    limit?: number
  }

  /**
   * marketplace_items without action
   */
  export type marketplace_itemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marketplace_items
     */
    select?: marketplace_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marketplace_items
     */
    omit?: marketplace_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marketplace_itemsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CourseScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    credits: 'credits',
    department: 'department',
    semester: 'semester',
    year: 'year',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    professorId: 'professorId',
    fullCode: 'fullCode',
    concentration_core: 'concentration_core',
    concentration_elective: 'concentration_elective'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    avatar_url: 'avatar_url',
    created_at: 'created_at',
    updated_at: 'updated_at',
    program: 'program'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CourseScheduleScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    course_id: 'course_id',
    day: 'day',
    start_time: 'start_time',
    end_time: 'end_time',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CourseScheduleScalarFieldEnum = (typeof CourseScheduleScalarFieldEnum)[keyof typeof CourseScheduleScalarFieldEnum]


  export const CoursePlannerScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    course_id: 'course_id',
    requirement_type: 'requirement_type',
    semester: 'semester',
    year: 'year',
    status: 'status',
    notes: 'notes',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CoursePlannerScalarFieldEnum = (typeof CoursePlannerScalarFieldEnum)[keyof typeof CoursePlannerScalarFieldEnum]


  export const ForumCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slug: 'slug',
    created_at: 'created_at'
  };

  export type ForumCategoryScalarFieldEnum = (typeof ForumCategoryScalarFieldEnum)[keyof typeof ForumCategoryScalarFieldEnum]


  export const ForumPostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    author_id: 'author_id',
    category_id: 'category_id',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at',
    notify_on_reply: 'notify_on_reply'
  };

  export type ForumPostScalarFieldEnum = (typeof ForumPostScalarFieldEnum)[keyof typeof ForumPostScalarFieldEnum]


  export const ForumCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    post_id: 'post_id',
    author_id: 'author_id',
    parent_id: 'parent_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    like_count: 'like_count',
    dislike_count: 'dislike_count'
  };

  export type ForumCommentScalarFieldEnum = (typeof ForumCommentScalarFieldEnum)[keyof typeof ForumCommentScalarFieldEnum]


  export const ForumLikeScalarFieldEnum: {
    id: 'id',
    post_id: 'post_id',
    user_id: 'user_id',
    created_at: 'created_at'
  };

  export type ForumLikeScalarFieldEnum = (typeof ForumLikeScalarFieldEnum)[keyof typeof ForumLikeScalarFieldEnum]


  export const ForumPostTagScalarFieldEnum: {
    id: 'id',
    post_id: 'post_id',
    tag: 'tag',
    created_at: 'created_at'
  };

  export type ForumPostTagScalarFieldEnum = (typeof ForumPostTagScalarFieldEnum)[keyof typeof ForumPostTagScalarFieldEnum]


  export const ForumViewScalarFieldEnum: {
    id: 'id',
    post_id: 'post_id',
    user_id: 'user_id',
    created_at: 'created_at'
  };

  export type ForumViewScalarFieldEnum = (typeof ForumViewScalarFieldEnum)[keyof typeof ForumViewScalarFieldEnum]


  export const ForumSavedScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    post_id: 'post_id',
    created_at: 'created_at'
  };

  export type ForumSavedScalarFieldEnum = (typeof ForumSavedScalarFieldEnum)[keyof typeof ForumSavedScalarFieldEnum]


  export const ForumNotificationPreferenceScalarFieldEnum: {
    id: 'id',
    post_id: 'post_id',
    user_id: 'user_id',
    notify_on_reply: 'notify_on_reply',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ForumNotificationPreferenceScalarFieldEnum = (typeof ForumNotificationPreferenceScalarFieldEnum)[keyof typeof ForumNotificationPreferenceScalarFieldEnum]


  export const CourseCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    createdAt: 'createdAt'
  };

  export type CourseCategoryScalarFieldEnum = (typeof CourseCategoryScalarFieldEnum)[keyof typeof CourseCategoryScalarFieldEnum]


  export const CourseCategoryJunctionScalarFieldEnum: {
    courseId: 'courseId',
    categoryId: 'categoryId',
    createdAt: 'createdAt'
  };

  export type CourseCategoryJunctionScalarFieldEnum = (typeof CourseCategoryJunctionScalarFieldEnum)[keyof typeof CourseCategoryJunctionScalarFieldEnum]


  export const Course_reviewsScalarFieldEnum: {
    id: 'id',
    course_id: 'course_id',
    author_id: 'author_id',
    rating: 'rating',
    difficulty: 'difficulty',
    workload: 'workload',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at',
    overall_rating: 'overall_rating'
  };

  export type Course_reviewsScalarFieldEnum = (typeof Course_reviewsScalarFieldEnum)[keyof typeof Course_reviewsScalarFieldEnum]


  export const Marketplace_itemsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    price: 'price',
    category: 'category',
    condition: 'condition',
    image_url: 'image_url',
    seller_id: 'seller_id',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Marketplace_itemsScalarFieldEnum = (typeof Marketplace_itemsScalarFieldEnum)[keyof typeof Marketplace_itemsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: UuidFilter<"Course"> | string
    code?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringNullableFilter<"Course"> | string | null
    credits?: IntFilter<"Course"> | number
    department?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    year?: IntFilter<"Course"> | number
    createdAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    professorId?: StringFilter<"Course"> | string
    fullCode?: StringNullableFilter<"Course"> | string | null
    concentration_core?: StringNullableFilter<"Course"> | string | null
    concentration_elective?: StringNullableFilter<"Course"> | string | null
    categories?: CourseCategoryJunctionListRelationFilter
    planners?: CoursePlannerListRelationFilter
    course_reviews?: Course_reviewsListRelationFilter
    schedules?: CourseScheduleListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    credits?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    professorId?: SortOrder
    fullCode?: SortOrderInput | SortOrder
    concentration_core?: SortOrderInput | SortOrder
    concentration_elective?: SortOrderInput | SortOrder
    categories?: CourseCategoryJunctionOrderByRelationAggregateInput
    planners?: CoursePlannerOrderByRelationAggregateInput
    course_reviews?: course_reviewsOrderByRelationAggregateInput
    schedules?: CourseScheduleOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code_semester_year?: CourseCodeSemesterYearCompoundUniqueInput
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    code?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringNullableFilter<"Course"> | string | null
    credits?: IntFilter<"Course"> | number
    department?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    year?: IntFilter<"Course"> | number
    createdAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    professorId?: StringFilter<"Course"> | string
    fullCode?: StringNullableFilter<"Course"> | string | null
    concentration_core?: StringNullableFilter<"Course"> | string | null
    concentration_elective?: StringNullableFilter<"Course"> | string | null
    categories?: CourseCategoryJunctionListRelationFilter
    planners?: CoursePlannerListRelationFilter
    course_reviews?: Course_reviewsListRelationFilter
    schedules?: CourseScheduleListRelationFilter
  }, "id" | "code_semester_year">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    credits?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    professorId?: SortOrder
    fullCode?: SortOrderInput | SortOrder
    concentration_core?: SortOrderInput | SortOrder
    concentration_elective?: SortOrderInput | SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Course"> | string
    code?: StringWithAggregatesFilter<"Course"> | string
    name?: StringWithAggregatesFilter<"Course"> | string
    description?: StringNullableWithAggregatesFilter<"Course"> | string | null
    credits?: IntWithAggregatesFilter<"Course"> | number
    department?: StringWithAggregatesFilter<"Course"> | string
    semester?: StringWithAggregatesFilter<"Course"> | string
    year?: IntWithAggregatesFilter<"Course"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"Course"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Course"> | Date | string | null
    professorId?: StringWithAggregatesFilter<"Course"> | string
    fullCode?: StringNullableWithAggregatesFilter<"Course"> | string | null
    concentration_core?: StringNullableWithAggregatesFilter<"Course"> | string | null
    concentration_elective?: StringNullableWithAggregatesFilter<"Course"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar_url?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    program?: StringNullableFilter<"User"> | string | null
    forum_posts?: ForumPostListRelationFilter
    forum_comments?: ForumCommentListRelationFilter
    forum_likes?: ForumLikeListRelationFilter
    forum_views?: ForumViewListRelationFilter
    forum_saved?: ForumSavedListRelationFilter
    forum_notification_preferences?: ForumNotificationPreferenceListRelationFilter
    course_schedules?: CourseScheduleListRelationFilter
    course_planners?: CoursePlannerListRelationFilter
    course_reviews?: Course_reviewsListRelationFilter
    marketplace_listings?: Marketplace_itemsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar_url?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    program?: SortOrderInput | SortOrder
    forum_posts?: ForumPostOrderByRelationAggregateInput
    forum_comments?: ForumCommentOrderByRelationAggregateInput
    forum_likes?: ForumLikeOrderByRelationAggregateInput
    forum_views?: ForumViewOrderByRelationAggregateInput
    forum_saved?: ForumSavedOrderByRelationAggregateInput
    forum_notification_preferences?: ForumNotificationPreferenceOrderByRelationAggregateInput
    course_schedules?: CourseScheduleOrderByRelationAggregateInput
    course_planners?: CoursePlannerOrderByRelationAggregateInput
    course_reviews?: course_reviewsOrderByRelationAggregateInput
    marketplace_listings?: marketplace_itemsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    avatar_url?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    program?: StringNullableFilter<"User"> | string | null
    forum_posts?: ForumPostListRelationFilter
    forum_comments?: ForumCommentListRelationFilter
    forum_likes?: ForumLikeListRelationFilter
    forum_views?: ForumViewListRelationFilter
    forum_saved?: ForumSavedListRelationFilter
    forum_notification_preferences?: ForumNotificationPreferenceListRelationFilter
    course_schedules?: CourseScheduleListRelationFilter
    course_planners?: CoursePlannerListRelationFilter
    course_reviews?: Course_reviewsListRelationFilter
    marketplace_listings?: Marketplace_itemsListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar_url?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    program?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    avatar_url?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    program?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CourseScheduleWhereInput = {
    AND?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    OR?: CourseScheduleWhereInput[]
    NOT?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    id?: UuidFilter<"CourseSchedule"> | string
    user_id?: UuidFilter<"CourseSchedule"> | string
    course_id?: UuidFilter<"CourseSchedule"> | string
    day?: StringFilter<"CourseSchedule"> | string
    start_time?: StringFilter<"CourseSchedule"> | string
    end_time?: StringFilter<"CourseSchedule"> | string
    created_at?: DateTimeFilter<"CourseSchedule"> | Date | string
    updated_at?: DateTimeFilter<"CourseSchedule"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CourseScheduleOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    day?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    course?: CourseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CourseScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    OR?: CourseScheduleWhereInput[]
    NOT?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    user_id?: UuidFilter<"CourseSchedule"> | string
    course_id?: UuidFilter<"CourseSchedule"> | string
    day?: StringFilter<"CourseSchedule"> | string
    start_time?: StringFilter<"CourseSchedule"> | string
    end_time?: StringFilter<"CourseSchedule"> | string
    created_at?: DateTimeFilter<"CourseSchedule"> | Date | string
    updated_at?: DateTimeFilter<"CourseSchedule"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CourseScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    day?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CourseScheduleCountOrderByAggregateInput
    _max?: CourseScheduleMaxOrderByAggregateInput
    _min?: CourseScheduleMinOrderByAggregateInput
  }

  export type CourseScheduleScalarWhereWithAggregatesInput = {
    AND?: CourseScheduleScalarWhereWithAggregatesInput | CourseScheduleScalarWhereWithAggregatesInput[]
    OR?: CourseScheduleScalarWhereWithAggregatesInput[]
    NOT?: CourseScheduleScalarWhereWithAggregatesInput | CourseScheduleScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"CourseSchedule"> | string
    user_id?: UuidWithAggregatesFilter<"CourseSchedule"> | string
    course_id?: UuidWithAggregatesFilter<"CourseSchedule"> | string
    day?: StringWithAggregatesFilter<"CourseSchedule"> | string
    start_time?: StringWithAggregatesFilter<"CourseSchedule"> | string
    end_time?: StringWithAggregatesFilter<"CourseSchedule"> | string
    created_at?: DateTimeWithAggregatesFilter<"CourseSchedule"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CourseSchedule"> | Date | string
  }

  export type CoursePlannerWhereInput = {
    AND?: CoursePlannerWhereInput | CoursePlannerWhereInput[]
    OR?: CoursePlannerWhereInput[]
    NOT?: CoursePlannerWhereInput | CoursePlannerWhereInput[]
    id?: UuidFilter<"CoursePlanner"> | string
    user_id?: UuidFilter<"CoursePlanner"> | string
    course_id?: UuidFilter<"CoursePlanner"> | string
    requirement_type?: StringNullableFilter<"CoursePlanner"> | string | null
    semester?: StringFilter<"CoursePlanner"> | string
    year?: IntFilter<"CoursePlanner"> | number
    status?: StringNullableFilter<"CoursePlanner"> | string | null
    notes?: StringNullableFilter<"CoursePlanner"> | string | null
    created_at?: DateTimeNullableFilter<"CoursePlanner"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"CoursePlanner"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CoursePlannerOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    requirement_type?: SortOrderInput | SortOrder
    semester?: SortOrder
    year?: SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    course?: CourseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CoursePlannerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoursePlannerWhereInput | CoursePlannerWhereInput[]
    OR?: CoursePlannerWhereInput[]
    NOT?: CoursePlannerWhereInput | CoursePlannerWhereInput[]
    user_id?: UuidFilter<"CoursePlanner"> | string
    course_id?: UuidFilter<"CoursePlanner"> | string
    requirement_type?: StringNullableFilter<"CoursePlanner"> | string | null
    semester?: StringFilter<"CoursePlanner"> | string
    year?: IntFilter<"CoursePlanner"> | number
    status?: StringNullableFilter<"CoursePlanner"> | string | null
    notes?: StringNullableFilter<"CoursePlanner"> | string | null
    created_at?: DateTimeNullableFilter<"CoursePlanner"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"CoursePlanner"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CoursePlannerOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    requirement_type?: SortOrderInput | SortOrder
    semester?: SortOrder
    year?: SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: CoursePlannerCountOrderByAggregateInput
    _avg?: CoursePlannerAvgOrderByAggregateInput
    _max?: CoursePlannerMaxOrderByAggregateInput
    _min?: CoursePlannerMinOrderByAggregateInput
    _sum?: CoursePlannerSumOrderByAggregateInput
  }

  export type CoursePlannerScalarWhereWithAggregatesInput = {
    AND?: CoursePlannerScalarWhereWithAggregatesInput | CoursePlannerScalarWhereWithAggregatesInput[]
    OR?: CoursePlannerScalarWhereWithAggregatesInput[]
    NOT?: CoursePlannerScalarWhereWithAggregatesInput | CoursePlannerScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"CoursePlanner"> | string
    user_id?: UuidWithAggregatesFilter<"CoursePlanner"> | string
    course_id?: UuidWithAggregatesFilter<"CoursePlanner"> | string
    requirement_type?: StringNullableWithAggregatesFilter<"CoursePlanner"> | string | null
    semester?: StringWithAggregatesFilter<"CoursePlanner"> | string
    year?: IntWithAggregatesFilter<"CoursePlanner"> | number
    status?: StringNullableWithAggregatesFilter<"CoursePlanner"> | string | null
    notes?: StringNullableWithAggregatesFilter<"CoursePlanner"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"CoursePlanner"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"CoursePlanner"> | Date | string | null
  }

  export type ForumCategoryWhereInput = {
    AND?: ForumCategoryWhereInput | ForumCategoryWhereInput[]
    OR?: ForumCategoryWhereInput[]
    NOT?: ForumCategoryWhereInput | ForumCategoryWhereInput[]
    id?: UuidFilter<"ForumCategory"> | string
    name?: StringFilter<"ForumCategory"> | string
    description?: StringNullableFilter<"ForumCategory"> | string | null
    slug?: StringFilter<"ForumCategory"> | string
    created_at?: DateTimeNullableFilter<"ForumCategory"> | Date | string | null
    posts?: ForumPostListRelationFilter
  }

  export type ForumCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    created_at?: SortOrderInput | SortOrder
    posts?: ForumPostOrderByRelationAggregateInput
  }

  export type ForumCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: ForumCategoryWhereInput | ForumCategoryWhereInput[]
    OR?: ForumCategoryWhereInput[]
    NOT?: ForumCategoryWhereInput | ForumCategoryWhereInput[]
    name?: StringFilter<"ForumCategory"> | string
    description?: StringNullableFilter<"ForumCategory"> | string | null
    created_at?: DateTimeNullableFilter<"ForumCategory"> | Date | string | null
    posts?: ForumPostListRelationFilter
  }, "id" | "slug">

  export type ForumCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: ForumCategoryCountOrderByAggregateInput
    _max?: ForumCategoryMaxOrderByAggregateInput
    _min?: ForumCategoryMinOrderByAggregateInput
  }

  export type ForumCategoryScalarWhereWithAggregatesInput = {
    AND?: ForumCategoryScalarWhereWithAggregatesInput | ForumCategoryScalarWhereWithAggregatesInput[]
    OR?: ForumCategoryScalarWhereWithAggregatesInput[]
    NOT?: ForumCategoryScalarWhereWithAggregatesInput | ForumCategoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumCategory"> | string
    name?: StringWithAggregatesFilter<"ForumCategory"> | string
    description?: StringNullableWithAggregatesFilter<"ForumCategory"> | string | null
    slug?: StringWithAggregatesFilter<"ForumCategory"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumCategory"> | Date | string | null
  }

  export type ForumPostWhereInput = {
    AND?: ForumPostWhereInput | ForumPostWhereInput[]
    OR?: ForumPostWhereInput[]
    NOT?: ForumPostWhereInput | ForumPostWhereInput[]
    id?: UuidFilter<"ForumPost"> | string
    title?: StringFilter<"ForumPost"> | string
    content?: StringFilter<"ForumPost"> | string
    author_id?: UuidFilter<"ForumPost"> | string
    category_id?: UuidFilter<"ForumPost"> | string
    status?: StringFilter<"ForumPost"> | string
    created_at?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    notify_on_reply?: BoolFilter<"ForumPost"> | boolean
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<ForumCategoryScalarRelationFilter, ForumCategoryWhereInput>
    comments?: ForumCommentListRelationFilter
    likes?: ForumLikeListRelationFilter
    views?: ForumViewListRelationFilter
    tags?: ForumPostTagListRelationFilter
    saved_by?: ForumSavedListRelationFilter
    notification_preferences?: ForumNotificationPreferenceListRelationFilter
  }

  export type ForumPostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    notify_on_reply?: SortOrder
    author?: UserOrderByWithRelationInput
    category?: ForumCategoryOrderByWithRelationInput
    comments?: ForumCommentOrderByRelationAggregateInput
    likes?: ForumLikeOrderByRelationAggregateInput
    views?: ForumViewOrderByRelationAggregateInput
    tags?: ForumPostTagOrderByRelationAggregateInput
    saved_by?: ForumSavedOrderByRelationAggregateInput
    notification_preferences?: ForumNotificationPreferenceOrderByRelationAggregateInput
  }

  export type ForumPostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ForumPostWhereInput | ForumPostWhereInput[]
    OR?: ForumPostWhereInput[]
    NOT?: ForumPostWhereInput | ForumPostWhereInput[]
    title?: StringFilter<"ForumPost"> | string
    content?: StringFilter<"ForumPost"> | string
    author_id?: UuidFilter<"ForumPost"> | string
    category_id?: UuidFilter<"ForumPost"> | string
    status?: StringFilter<"ForumPost"> | string
    created_at?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    notify_on_reply?: BoolFilter<"ForumPost"> | boolean
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<ForumCategoryScalarRelationFilter, ForumCategoryWhereInput>
    comments?: ForumCommentListRelationFilter
    likes?: ForumLikeListRelationFilter
    views?: ForumViewListRelationFilter
    tags?: ForumPostTagListRelationFilter
    saved_by?: ForumSavedListRelationFilter
    notification_preferences?: ForumNotificationPreferenceListRelationFilter
  }, "id">

  export type ForumPostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    notify_on_reply?: SortOrder
    _count?: ForumPostCountOrderByAggregateInput
    _max?: ForumPostMaxOrderByAggregateInput
    _min?: ForumPostMinOrderByAggregateInput
  }

  export type ForumPostScalarWhereWithAggregatesInput = {
    AND?: ForumPostScalarWhereWithAggregatesInput | ForumPostScalarWhereWithAggregatesInput[]
    OR?: ForumPostScalarWhereWithAggregatesInput[]
    NOT?: ForumPostScalarWhereWithAggregatesInput | ForumPostScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumPost"> | string
    title?: StringWithAggregatesFilter<"ForumPost"> | string
    content?: StringWithAggregatesFilter<"ForumPost"> | string
    author_id?: UuidWithAggregatesFilter<"ForumPost"> | string
    category_id?: UuidWithAggregatesFilter<"ForumPost"> | string
    status?: StringWithAggregatesFilter<"ForumPost"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumPost"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"ForumPost"> | Date | string | null
    notify_on_reply?: BoolWithAggregatesFilter<"ForumPost"> | boolean
  }

  export type ForumCommentWhereInput = {
    AND?: ForumCommentWhereInput | ForumCommentWhereInput[]
    OR?: ForumCommentWhereInput[]
    NOT?: ForumCommentWhereInput | ForumCommentWhereInput[]
    id?: UuidFilter<"ForumComment"> | string
    content?: StringFilter<"ForumComment"> | string
    post_id?: UuidFilter<"ForumComment"> | string
    author_id?: UuidFilter<"ForumComment"> | string
    parent_id?: UuidNullableFilter<"ForumComment"> | string | null
    created_at?: DateTimeNullableFilter<"ForumComment"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumComment"> | Date | string | null
    like_count?: IntFilter<"ForumComment"> | number
    dislike_count?: IntFilter<"ForumComment"> | number
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    parent?: XOR<ForumCommentNullableScalarRelationFilter, ForumCommentWhereInput> | null
    replies?: ForumCommentListRelationFilter
  }

  export type ForumCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    post_id?: SortOrder
    author_id?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    like_count?: SortOrder
    dislike_count?: SortOrder
    author?: UserOrderByWithRelationInput
    post?: ForumPostOrderByWithRelationInput
    parent?: ForumCommentOrderByWithRelationInput
    replies?: ForumCommentOrderByRelationAggregateInput
  }

  export type ForumCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ForumCommentWhereInput | ForumCommentWhereInput[]
    OR?: ForumCommentWhereInput[]
    NOT?: ForumCommentWhereInput | ForumCommentWhereInput[]
    content?: StringFilter<"ForumComment"> | string
    post_id?: UuidFilter<"ForumComment"> | string
    author_id?: UuidFilter<"ForumComment"> | string
    parent_id?: UuidNullableFilter<"ForumComment"> | string | null
    created_at?: DateTimeNullableFilter<"ForumComment"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumComment"> | Date | string | null
    like_count?: IntFilter<"ForumComment"> | number
    dislike_count?: IntFilter<"ForumComment"> | number
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    parent?: XOR<ForumCommentNullableScalarRelationFilter, ForumCommentWhereInput> | null
    replies?: ForumCommentListRelationFilter
  }, "id">

  export type ForumCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    post_id?: SortOrder
    author_id?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    like_count?: SortOrder
    dislike_count?: SortOrder
    _count?: ForumCommentCountOrderByAggregateInput
    _avg?: ForumCommentAvgOrderByAggregateInput
    _max?: ForumCommentMaxOrderByAggregateInput
    _min?: ForumCommentMinOrderByAggregateInput
    _sum?: ForumCommentSumOrderByAggregateInput
  }

  export type ForumCommentScalarWhereWithAggregatesInput = {
    AND?: ForumCommentScalarWhereWithAggregatesInput | ForumCommentScalarWhereWithAggregatesInput[]
    OR?: ForumCommentScalarWhereWithAggregatesInput[]
    NOT?: ForumCommentScalarWhereWithAggregatesInput | ForumCommentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumComment"> | string
    content?: StringWithAggregatesFilter<"ForumComment"> | string
    post_id?: UuidWithAggregatesFilter<"ForumComment"> | string
    author_id?: UuidWithAggregatesFilter<"ForumComment"> | string
    parent_id?: UuidNullableWithAggregatesFilter<"ForumComment"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumComment"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"ForumComment"> | Date | string | null
    like_count?: IntWithAggregatesFilter<"ForumComment"> | number
    dislike_count?: IntWithAggregatesFilter<"ForumComment"> | number
  }

  export type ForumLikeWhereInput = {
    AND?: ForumLikeWhereInput | ForumLikeWhereInput[]
    OR?: ForumLikeWhereInput[]
    NOT?: ForumLikeWhereInput | ForumLikeWhereInput[]
    id?: UuidFilter<"ForumLike"> | string
    post_id?: UuidFilter<"ForumLike"> | string
    user_id?: UuidFilter<"ForumLike"> | string
    created_at?: DateTimeNullableFilter<"ForumLike"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ForumLikeOrderByWithRelationInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    post?: ForumPostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ForumLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    post_id_user_id?: ForumLikePost_idUser_idCompoundUniqueInput
    AND?: ForumLikeWhereInput | ForumLikeWhereInput[]
    OR?: ForumLikeWhereInput[]
    NOT?: ForumLikeWhereInput | ForumLikeWhereInput[]
    post_id?: UuidFilter<"ForumLike"> | string
    user_id?: UuidFilter<"ForumLike"> | string
    created_at?: DateTimeNullableFilter<"ForumLike"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "post_id_user_id">

  export type ForumLikeOrderByWithAggregationInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: ForumLikeCountOrderByAggregateInput
    _max?: ForumLikeMaxOrderByAggregateInput
    _min?: ForumLikeMinOrderByAggregateInput
  }

  export type ForumLikeScalarWhereWithAggregatesInput = {
    AND?: ForumLikeScalarWhereWithAggregatesInput | ForumLikeScalarWhereWithAggregatesInput[]
    OR?: ForumLikeScalarWhereWithAggregatesInput[]
    NOT?: ForumLikeScalarWhereWithAggregatesInput | ForumLikeScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumLike"> | string
    post_id?: UuidWithAggregatesFilter<"ForumLike"> | string
    user_id?: UuidWithAggregatesFilter<"ForumLike"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumLike"> | Date | string | null
  }

  export type ForumPostTagWhereInput = {
    AND?: ForumPostTagWhereInput | ForumPostTagWhereInput[]
    OR?: ForumPostTagWhereInput[]
    NOT?: ForumPostTagWhereInput | ForumPostTagWhereInput[]
    id?: UuidFilter<"ForumPostTag"> | string
    post_id?: UuidFilter<"ForumPostTag"> | string
    tag?: StringFilter<"ForumPostTag"> | string
    created_at?: DateTimeNullableFilter<"ForumPostTag"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
  }

  export type ForumPostTagOrderByWithRelationInput = {
    id?: SortOrder
    post_id?: SortOrder
    tag?: SortOrder
    created_at?: SortOrderInput | SortOrder
    post?: ForumPostOrderByWithRelationInput
  }

  export type ForumPostTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    post_id_tag?: ForumPostTagPost_idTagCompoundUniqueInput
    AND?: ForumPostTagWhereInput | ForumPostTagWhereInput[]
    OR?: ForumPostTagWhereInput[]
    NOT?: ForumPostTagWhereInput | ForumPostTagWhereInput[]
    post_id?: UuidFilter<"ForumPostTag"> | string
    tag?: StringFilter<"ForumPostTag"> | string
    created_at?: DateTimeNullableFilter<"ForumPostTag"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
  }, "id" | "post_id_tag">

  export type ForumPostTagOrderByWithAggregationInput = {
    id?: SortOrder
    post_id?: SortOrder
    tag?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: ForumPostTagCountOrderByAggregateInput
    _max?: ForumPostTagMaxOrderByAggregateInput
    _min?: ForumPostTagMinOrderByAggregateInput
  }

  export type ForumPostTagScalarWhereWithAggregatesInput = {
    AND?: ForumPostTagScalarWhereWithAggregatesInput | ForumPostTagScalarWhereWithAggregatesInput[]
    OR?: ForumPostTagScalarWhereWithAggregatesInput[]
    NOT?: ForumPostTagScalarWhereWithAggregatesInput | ForumPostTagScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumPostTag"> | string
    post_id?: UuidWithAggregatesFilter<"ForumPostTag"> | string
    tag?: StringWithAggregatesFilter<"ForumPostTag"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumPostTag"> | Date | string | null
  }

  export type ForumViewWhereInput = {
    AND?: ForumViewWhereInput | ForumViewWhereInput[]
    OR?: ForumViewWhereInput[]
    NOT?: ForumViewWhereInput | ForumViewWhereInput[]
    id?: UuidFilter<"ForumView"> | string
    post_id?: UuidFilter<"ForumView"> | string
    user_id?: UuidFilter<"ForumView"> | string
    created_at?: DateTimeNullableFilter<"ForumView"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ForumViewOrderByWithRelationInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    post?: ForumPostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ForumViewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ForumViewWhereInput | ForumViewWhereInput[]
    OR?: ForumViewWhereInput[]
    NOT?: ForumViewWhereInput | ForumViewWhereInput[]
    post_id?: UuidFilter<"ForumView"> | string
    user_id?: UuidFilter<"ForumView"> | string
    created_at?: DateTimeNullableFilter<"ForumView"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ForumViewOrderByWithAggregationInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: ForumViewCountOrderByAggregateInput
    _max?: ForumViewMaxOrderByAggregateInput
    _min?: ForumViewMinOrderByAggregateInput
  }

  export type ForumViewScalarWhereWithAggregatesInput = {
    AND?: ForumViewScalarWhereWithAggregatesInput | ForumViewScalarWhereWithAggregatesInput[]
    OR?: ForumViewScalarWhereWithAggregatesInput[]
    NOT?: ForumViewScalarWhereWithAggregatesInput | ForumViewScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumView"> | string
    post_id?: UuidWithAggregatesFilter<"ForumView"> | string
    user_id?: UuidWithAggregatesFilter<"ForumView"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumView"> | Date | string | null
  }

  export type ForumSavedWhereInput = {
    AND?: ForumSavedWhereInput | ForumSavedWhereInput[]
    OR?: ForumSavedWhereInput[]
    NOT?: ForumSavedWhereInput | ForumSavedWhereInput[]
    id?: UuidFilter<"ForumSaved"> | string
    user_id?: UuidFilter<"ForumSaved"> | string
    post_id?: UuidFilter<"ForumSaved"> | string
    created_at?: DateTimeNullableFilter<"ForumSaved"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ForumSavedOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    post?: ForumPostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ForumSavedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id_post_id?: ForumSavedUser_idPost_idCompoundUniqueInput
    AND?: ForumSavedWhereInput | ForumSavedWhereInput[]
    OR?: ForumSavedWhereInput[]
    NOT?: ForumSavedWhereInput | ForumSavedWhereInput[]
    user_id?: UuidFilter<"ForumSaved"> | string
    post_id?: UuidFilter<"ForumSaved"> | string
    created_at?: DateTimeNullableFilter<"ForumSaved"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "user_id_post_id">

  export type ForumSavedOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: ForumSavedCountOrderByAggregateInput
    _max?: ForumSavedMaxOrderByAggregateInput
    _min?: ForumSavedMinOrderByAggregateInput
  }

  export type ForumSavedScalarWhereWithAggregatesInput = {
    AND?: ForumSavedScalarWhereWithAggregatesInput | ForumSavedScalarWhereWithAggregatesInput[]
    OR?: ForumSavedScalarWhereWithAggregatesInput[]
    NOT?: ForumSavedScalarWhereWithAggregatesInput | ForumSavedScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumSaved"> | string
    user_id?: UuidWithAggregatesFilter<"ForumSaved"> | string
    post_id?: UuidWithAggregatesFilter<"ForumSaved"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumSaved"> | Date | string | null
  }

  export type ForumNotificationPreferenceWhereInput = {
    AND?: ForumNotificationPreferenceWhereInput | ForumNotificationPreferenceWhereInput[]
    OR?: ForumNotificationPreferenceWhereInput[]
    NOT?: ForumNotificationPreferenceWhereInput | ForumNotificationPreferenceWhereInput[]
    id?: UuidFilter<"ForumNotificationPreference"> | string
    post_id?: UuidFilter<"ForumNotificationPreference"> | string
    user_id?: UuidFilter<"ForumNotificationPreference"> | string
    notify_on_reply?: BoolFilter<"ForumNotificationPreference"> | boolean
    created_at?: DateTimeNullableFilter<"ForumNotificationPreference"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumNotificationPreference"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ForumNotificationPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    notify_on_reply?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    post?: ForumPostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ForumNotificationPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    post_id_user_id?: ForumNotificationPreferencePost_idUser_idCompoundUniqueInput
    AND?: ForumNotificationPreferenceWhereInput | ForumNotificationPreferenceWhereInput[]
    OR?: ForumNotificationPreferenceWhereInput[]
    NOT?: ForumNotificationPreferenceWhereInput | ForumNotificationPreferenceWhereInput[]
    post_id?: UuidFilter<"ForumNotificationPreference"> | string
    user_id?: UuidFilter<"ForumNotificationPreference"> | string
    notify_on_reply?: BoolFilter<"ForumNotificationPreference"> | boolean
    created_at?: DateTimeNullableFilter<"ForumNotificationPreference"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumNotificationPreference"> | Date | string | null
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "post_id_user_id">

  export type ForumNotificationPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    notify_on_reply?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: ForumNotificationPreferenceCountOrderByAggregateInput
    _max?: ForumNotificationPreferenceMaxOrderByAggregateInput
    _min?: ForumNotificationPreferenceMinOrderByAggregateInput
  }

  export type ForumNotificationPreferenceScalarWhereWithAggregatesInput = {
    AND?: ForumNotificationPreferenceScalarWhereWithAggregatesInput | ForumNotificationPreferenceScalarWhereWithAggregatesInput[]
    OR?: ForumNotificationPreferenceScalarWhereWithAggregatesInput[]
    NOT?: ForumNotificationPreferenceScalarWhereWithAggregatesInput | ForumNotificationPreferenceScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ForumNotificationPreference"> | string
    post_id?: UuidWithAggregatesFilter<"ForumNotificationPreference"> | string
    user_id?: UuidWithAggregatesFilter<"ForumNotificationPreference"> | string
    notify_on_reply?: BoolWithAggregatesFilter<"ForumNotificationPreference"> | boolean
    created_at?: DateTimeNullableWithAggregatesFilter<"ForumNotificationPreference"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"ForumNotificationPreference"> | Date | string | null
  }

  export type CourseCategoryWhereInput = {
    AND?: CourseCategoryWhereInput | CourseCategoryWhereInput[]
    OR?: CourseCategoryWhereInput[]
    NOT?: CourseCategoryWhereInput | CourseCategoryWhereInput[]
    id?: UuidFilter<"CourseCategory"> | string
    name?: StringFilter<"CourseCategory"> | string
    slug?: StringFilter<"CourseCategory"> | string
    createdAt?: DateTimeNullableFilter<"CourseCategory"> | Date | string | null
    courses?: CourseCategoryJunctionListRelationFilter
  }

  export type CourseCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    courses?: CourseCategoryJunctionOrderByRelationAggregateInput
  }

  export type CourseCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: CourseCategoryWhereInput | CourseCategoryWhereInput[]
    OR?: CourseCategoryWhereInput[]
    NOT?: CourseCategoryWhereInput | CourseCategoryWhereInput[]
    createdAt?: DateTimeNullableFilter<"CourseCategory"> | Date | string | null
    courses?: CourseCategoryJunctionListRelationFilter
  }, "id" | "name" | "slug">

  export type CourseCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: CourseCategoryCountOrderByAggregateInput
    _max?: CourseCategoryMaxOrderByAggregateInput
    _min?: CourseCategoryMinOrderByAggregateInput
  }

  export type CourseCategoryScalarWhereWithAggregatesInput = {
    AND?: CourseCategoryScalarWhereWithAggregatesInput | CourseCategoryScalarWhereWithAggregatesInput[]
    OR?: CourseCategoryScalarWhereWithAggregatesInput[]
    NOT?: CourseCategoryScalarWhereWithAggregatesInput | CourseCategoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"CourseCategory"> | string
    name?: StringWithAggregatesFilter<"CourseCategory"> | string
    slug?: StringWithAggregatesFilter<"CourseCategory"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"CourseCategory"> | Date | string | null
  }

  export type CourseCategoryJunctionWhereInput = {
    AND?: CourseCategoryJunctionWhereInput | CourseCategoryJunctionWhereInput[]
    OR?: CourseCategoryJunctionWhereInput[]
    NOT?: CourseCategoryJunctionWhereInput | CourseCategoryJunctionWhereInput[]
    courseId?: UuidFilter<"CourseCategoryJunction"> | string
    categoryId?: UuidFilter<"CourseCategoryJunction"> | string
    createdAt?: DateTimeNullableFilter<"CourseCategoryJunction"> | Date | string | null
    category?: XOR<CourseCategoryScalarRelationFilter, CourseCategoryWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type CourseCategoryJunctionOrderByWithRelationInput = {
    courseId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    category?: CourseCategoryOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type CourseCategoryJunctionWhereUniqueInput = Prisma.AtLeast<{
    courseId_categoryId?: CourseCategoryJunctionCourseIdCategoryIdCompoundUniqueInput
    AND?: CourseCategoryJunctionWhereInput | CourseCategoryJunctionWhereInput[]
    OR?: CourseCategoryJunctionWhereInput[]
    NOT?: CourseCategoryJunctionWhereInput | CourseCategoryJunctionWhereInput[]
    courseId?: UuidFilter<"CourseCategoryJunction"> | string
    categoryId?: UuidFilter<"CourseCategoryJunction"> | string
    createdAt?: DateTimeNullableFilter<"CourseCategoryJunction"> | Date | string | null
    category?: XOR<CourseCategoryScalarRelationFilter, CourseCategoryWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "courseId_categoryId">

  export type CourseCategoryJunctionOrderByWithAggregationInput = {
    courseId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: CourseCategoryJunctionCountOrderByAggregateInput
    _max?: CourseCategoryJunctionMaxOrderByAggregateInput
    _min?: CourseCategoryJunctionMinOrderByAggregateInput
  }

  export type CourseCategoryJunctionScalarWhereWithAggregatesInput = {
    AND?: CourseCategoryJunctionScalarWhereWithAggregatesInput | CourseCategoryJunctionScalarWhereWithAggregatesInput[]
    OR?: CourseCategoryJunctionScalarWhereWithAggregatesInput[]
    NOT?: CourseCategoryJunctionScalarWhereWithAggregatesInput | CourseCategoryJunctionScalarWhereWithAggregatesInput[]
    courseId?: UuidWithAggregatesFilter<"CourseCategoryJunction"> | string
    categoryId?: UuidWithAggregatesFilter<"CourseCategoryJunction"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"CourseCategoryJunction"> | Date | string | null
  }

  export type course_reviewsWhereInput = {
    AND?: course_reviewsWhereInput | course_reviewsWhereInput[]
    OR?: course_reviewsWhereInput[]
    NOT?: course_reviewsWhereInput | course_reviewsWhereInput[]
    id?: UuidFilter<"course_reviews"> | string
    course_id?: UuidFilter<"course_reviews"> | string
    author_id?: UuidFilter<"course_reviews"> | string
    rating?: IntFilter<"course_reviews"> | number
    difficulty?: IntFilter<"course_reviews"> | number
    workload?: IntFilter<"course_reviews"> | number
    content?: StringFilter<"course_reviews"> | string
    created_at?: DateTimeNullableFilter<"course_reviews"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"course_reviews"> | Date | string | null
    overall_rating?: DecimalFilter<"course_reviews"> | Decimal | DecimalJsLike | number | string
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
    courses?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type course_reviewsOrderByWithRelationInput = {
    id?: SortOrder
    course_id?: SortOrder
    author_id?: SortOrder
    rating?: SortOrder
    difficulty?: SortOrder
    workload?: SortOrder
    content?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    overall_rating?: SortOrder
    users?: UserOrderByWithRelationInput
    courses?: CourseOrderByWithRelationInput
  }

  export type course_reviewsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: course_reviewsWhereInput | course_reviewsWhereInput[]
    OR?: course_reviewsWhereInput[]
    NOT?: course_reviewsWhereInput | course_reviewsWhereInput[]
    course_id?: UuidFilter<"course_reviews"> | string
    author_id?: UuidFilter<"course_reviews"> | string
    rating?: IntFilter<"course_reviews"> | number
    difficulty?: IntFilter<"course_reviews"> | number
    workload?: IntFilter<"course_reviews"> | number
    content?: StringFilter<"course_reviews"> | string
    created_at?: DateTimeNullableFilter<"course_reviews"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"course_reviews"> | Date | string | null
    overall_rating?: DecimalFilter<"course_reviews"> | Decimal | DecimalJsLike | number | string
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
    courses?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type course_reviewsOrderByWithAggregationInput = {
    id?: SortOrder
    course_id?: SortOrder
    author_id?: SortOrder
    rating?: SortOrder
    difficulty?: SortOrder
    workload?: SortOrder
    content?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    overall_rating?: SortOrder
    _count?: course_reviewsCountOrderByAggregateInput
    _avg?: course_reviewsAvgOrderByAggregateInput
    _max?: course_reviewsMaxOrderByAggregateInput
    _min?: course_reviewsMinOrderByAggregateInput
    _sum?: course_reviewsSumOrderByAggregateInput
  }

  export type course_reviewsScalarWhereWithAggregatesInput = {
    AND?: course_reviewsScalarWhereWithAggregatesInput | course_reviewsScalarWhereWithAggregatesInput[]
    OR?: course_reviewsScalarWhereWithAggregatesInput[]
    NOT?: course_reviewsScalarWhereWithAggregatesInput | course_reviewsScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"course_reviews"> | string
    course_id?: UuidWithAggregatesFilter<"course_reviews"> | string
    author_id?: UuidWithAggregatesFilter<"course_reviews"> | string
    rating?: IntWithAggregatesFilter<"course_reviews"> | number
    difficulty?: IntWithAggregatesFilter<"course_reviews"> | number
    workload?: IntWithAggregatesFilter<"course_reviews"> | number
    content?: StringWithAggregatesFilter<"course_reviews"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"course_reviews"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"course_reviews"> | Date | string | null
    overall_rating?: DecimalWithAggregatesFilter<"course_reviews"> | Decimal | DecimalJsLike | number | string
  }

  export type marketplace_itemsWhereInput = {
    AND?: marketplace_itemsWhereInput | marketplace_itemsWhereInput[]
    OR?: marketplace_itemsWhereInput[]
    NOT?: marketplace_itemsWhereInput | marketplace_itemsWhereInput[]
    id?: UuidFilter<"marketplace_items"> | string
    title?: StringFilter<"marketplace_items"> | string
    description?: StringFilter<"marketplace_items"> | string
    price?: DecimalFilter<"marketplace_items"> | Decimal | DecimalJsLike | number | string
    category?: StringFilter<"marketplace_items"> | string
    condition?: StringFilter<"marketplace_items"> | string
    image_url?: StringNullableFilter<"marketplace_items"> | string | null
    seller_id?: UuidFilter<"marketplace_items"> | string
    status?: StringFilter<"marketplace_items"> | string
    created_at?: DateTimeNullableFilter<"marketplace_items"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"marketplace_items"> | Date | string | null
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type marketplace_itemsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    image_url?: SortOrderInput | SortOrder
    seller_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    users?: UserOrderByWithRelationInput
  }

  export type marketplace_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: marketplace_itemsWhereInput | marketplace_itemsWhereInput[]
    OR?: marketplace_itemsWhereInput[]
    NOT?: marketplace_itemsWhereInput | marketplace_itemsWhereInput[]
    title?: StringFilter<"marketplace_items"> | string
    description?: StringFilter<"marketplace_items"> | string
    price?: DecimalFilter<"marketplace_items"> | Decimal | DecimalJsLike | number | string
    category?: StringFilter<"marketplace_items"> | string
    condition?: StringFilter<"marketplace_items"> | string
    image_url?: StringNullableFilter<"marketplace_items"> | string | null
    seller_id?: UuidFilter<"marketplace_items"> | string
    status?: StringFilter<"marketplace_items"> | string
    created_at?: DateTimeNullableFilter<"marketplace_items"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"marketplace_items"> | Date | string | null
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type marketplace_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    image_url?: SortOrderInput | SortOrder
    seller_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: marketplace_itemsCountOrderByAggregateInput
    _avg?: marketplace_itemsAvgOrderByAggregateInput
    _max?: marketplace_itemsMaxOrderByAggregateInput
    _min?: marketplace_itemsMinOrderByAggregateInput
    _sum?: marketplace_itemsSumOrderByAggregateInput
  }

  export type marketplace_itemsScalarWhereWithAggregatesInput = {
    AND?: marketplace_itemsScalarWhereWithAggregatesInput | marketplace_itemsScalarWhereWithAggregatesInput[]
    OR?: marketplace_itemsScalarWhereWithAggregatesInput[]
    NOT?: marketplace_itemsScalarWhereWithAggregatesInput | marketplace_itemsScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"marketplace_items"> | string
    title?: StringWithAggregatesFilter<"marketplace_items"> | string
    description?: StringWithAggregatesFilter<"marketplace_items"> | string
    price?: DecimalWithAggregatesFilter<"marketplace_items"> | Decimal | DecimalJsLike | number | string
    category?: StringWithAggregatesFilter<"marketplace_items"> | string
    condition?: StringWithAggregatesFilter<"marketplace_items"> | string
    image_url?: StringNullableWithAggregatesFilter<"marketplace_items"> | string | null
    seller_id?: UuidWithAggregatesFilter<"marketplace_items"> | string
    status?: StringWithAggregatesFilter<"marketplace_items"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"marketplace_items"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"marketplace_items"> | Date | string | null
  }

  export type CourseCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionCreateNestedManyWithoutCourseInput
    planners?: CoursePlannerCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsCreateNestedManyWithoutCoursesInput
    schedules?: CourseScheduleCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionUncheckedCreateNestedManyWithoutCourseInput
    planners?: CoursePlannerUncheckedCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutCoursesInput
    schedules?: CourseScheduleUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUpdateManyWithoutCourseNestedInput
    planners?: CoursePlannerUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutCoursesNestedInput
    schedules?: CourseScheduleUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUncheckedUpdateManyWithoutCourseNestedInput
    planners?: CoursePlannerUncheckedUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutCoursesNestedInput
    schedules?: CourseScheduleUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseScheduleCreateInput = {
    id?: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
    course: CourseCreateNestedOneWithoutSchedulesInput
    user: UserCreateNestedOneWithoutCourse_schedulesInput
  }

  export type CourseScheduleUncheckedCreateInput = {
    id?: string
    user_id: string
    course_id: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CourseScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutSchedulesNestedInput
    user?: UserUpdateOneRequiredWithoutCourse_schedulesNestedInput
  }

  export type CourseScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseScheduleCreateManyInput = {
    id?: string
    user_id: string
    course_id: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CourseScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursePlannerCreateInput = {
    id?: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course: CourseCreateNestedOneWithoutPlannersInput
    user: UserCreateNestedOneWithoutCourse_plannersInput
  }

  export type CoursePlannerUncheckedCreateInput = {
    id?: string
    user_id: string
    course_id: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CoursePlannerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutPlannersNestedInput
    user?: UserUpdateOneRequiredWithoutCourse_plannersNestedInput
  }

  export type CoursePlannerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CoursePlannerCreateManyInput = {
    id?: string
    user_id: string
    course_id: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CoursePlannerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CoursePlannerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    created_at?: Date | string | null
    posts?: ForumPostCreateNestedManyWithoutCategoryInput
  }

  export type ForumCategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    created_at?: Date | string | null
    posts?: ForumPostUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ForumCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    posts?: ForumPostUpdateManyWithoutCategoryNestedInput
  }

  export type ForumCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    posts?: ForumPostUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ForumCategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    created_at?: Date | string | null
  }

  export type ForumCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostCreateInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostCreateManyInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
  }

  export type ForumPostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ForumPostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ForumCommentCreateInput = {
    id?: string
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    author: UserCreateNestedOneWithoutForum_commentsInput
    post: ForumPostCreateNestedOneWithoutCommentsInput
    parent?: ForumCommentCreateNestedOneWithoutRepliesInput
    replies?: ForumCommentCreateNestedManyWithoutParentInput
  }

  export type ForumCommentUncheckedCreateInput = {
    id?: string
    content: string
    post_id: string
    author_id: string
    parent_id?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    replies?: ForumCommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ForumCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutForum_commentsNestedInput
    post?: ForumPostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: ForumCommentUpdateOneWithoutRepliesNestedInput
    replies?: ForumCommentUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    replies?: ForumCommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentCreateManyInput = {
    id?: string
    content: string
    post_id: string
    author_id: string
    parent_id?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
  }

  export type ForumCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
  }

  export type ForumCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
  }

  export type ForumLikeCreateInput = {
    id?: string
    created_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutForum_likesInput
  }

  export type ForumLikeUncheckedCreateInput = {
    id?: string
    post_id: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutForum_likesNestedInput
  }

  export type ForumLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumLikeCreateManyInput = {
    id?: string
    post_id: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostTagCreateInput = {
    id?: string
    tag: string
    created_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutTagsInput
  }

  export type ForumPostTagUncheckedCreateInput = {
    id?: string
    post_id: string
    tag: string
    created_at?: Date | string | null
  }

  export type ForumPostTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ForumPostTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostTagCreateManyInput = {
    id?: string
    post_id: string
    tag: string
    created_at?: Date | string | null
  }

  export type ForumPostTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumViewCreateInput = {
    id?: string
    created_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutViewsInput
    user: UserCreateNestedOneWithoutForum_viewsInput
  }

  export type ForumViewUncheckedCreateInput = {
    id?: string
    post_id: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumViewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutViewsNestedInput
    user?: UserUpdateOneRequiredWithoutForum_viewsNestedInput
  }

  export type ForumViewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumViewCreateManyInput = {
    id?: string
    post_id: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumViewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumViewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumSavedCreateInput = {
    id?: string
    created_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutSaved_byInput
    user: UserCreateNestedOneWithoutForum_savedInput
  }

  export type ForumSavedUncheckedCreateInput = {
    id?: string
    user_id: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumSavedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutSaved_byNestedInput
    user?: UserUpdateOneRequiredWithoutForum_savedNestedInput
  }

  export type ForumSavedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumSavedCreateManyInput = {
    id?: string
    user_id: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumSavedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumSavedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumNotificationPreferenceCreateInput = {
    id?: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutNotification_preferencesInput
    user: UserCreateNestedOneWithoutForum_notification_preferencesInput
  }

  export type ForumNotificationPreferenceUncheckedCreateInput = {
    id?: string
    post_id: string
    user_id: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ForumNotificationPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutNotification_preferencesNestedInput
    user?: UserUpdateOneRequiredWithoutForum_notification_preferencesNestedInput
  }

  export type ForumNotificationPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumNotificationPreferenceCreateManyInput = {
    id?: string
    post_id: string
    user_id: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ForumNotificationPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumNotificationPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string | null
    courses?: CourseCategoryJunctionCreateNestedManyWithoutCategoryInput
  }

  export type CourseCategoryUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string | null
    courses?: CourseCategoryJunctionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CourseCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: CourseCategoryJunctionUpdateManyWithoutCategoryNestedInput
  }

  export type CourseCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: CourseCategoryJunctionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CourseCategoryCreateManyInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryJunctionCreateInput = {
    createdAt?: Date | string | null
    category: CourseCategoryCreateNestedOneWithoutCoursesInput
    course: CourseCreateNestedOneWithoutCategoriesInput
  }

  export type CourseCategoryJunctionUncheckedCreateInput = {
    courseId: string
    categoryId: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryJunctionUpdateInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CourseCategoryUpdateOneRequiredWithoutCoursesNestedInput
    course?: CourseUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CourseCategoryJunctionUncheckedUpdateInput = {
    courseId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryJunctionCreateManyInput = {
    courseId: string
    categoryId: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryJunctionUpdateManyMutationInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryJunctionUncheckedUpdateManyInput = {
    courseId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_reviewsCreateInput = {
    id?: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
    users: UserCreateNestedOneWithoutCourse_reviewsInput
    courses: CourseCreateNestedOneWithoutCourse_reviewsInput
  }

  export type course_reviewsUncheckedCreateInput = {
    id?: string
    course_id: string
    author_id: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    users?: UserUpdateOneRequiredWithoutCourse_reviewsNestedInput
    courses?: CourseUpdateOneRequiredWithoutCourse_reviewsNestedInput
  }

  export type course_reviewsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsCreateManyInput = {
    id?: string
    course_id: string
    author_id: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type marketplace_itemsCreateInput = {
    id?: string
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: string
    image_url?: string | null
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    users: UserCreateNestedOneWithoutMarketplace_listingsInput
  }

  export type marketplace_itemsUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: string
    image_url?: string | null
    seller_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type marketplace_itemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateOneRequiredWithoutMarketplace_listingsNestedInput
  }

  export type marketplace_itemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    seller_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type marketplace_itemsCreateManyInput = {
    id?: string
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: string
    image_url?: string | null
    seller_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type marketplace_itemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type marketplace_itemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    seller_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CourseCategoryJunctionListRelationFilter = {
    every?: CourseCategoryJunctionWhereInput
    some?: CourseCategoryJunctionWhereInput
    none?: CourseCategoryJunctionWhereInput
  }

  export type CoursePlannerListRelationFilter = {
    every?: CoursePlannerWhereInput
    some?: CoursePlannerWhereInput
    none?: CoursePlannerWhereInput
  }

  export type Course_reviewsListRelationFilter = {
    every?: course_reviewsWhereInput
    some?: course_reviewsWhereInput
    none?: course_reviewsWhereInput
  }

  export type CourseScheduleListRelationFilter = {
    every?: CourseScheduleWhereInput
    some?: CourseScheduleWhereInput
    none?: CourseScheduleWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CourseCategoryJunctionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoursePlannerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type course_reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCodeSemesterYearCompoundUniqueInput = {
    code: string
    semester: string
    year: number
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    professorId?: SortOrder
    fullCode?: SortOrder
    concentration_core?: SortOrder
    concentration_elective?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    credits?: SortOrder
    year?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    professorId?: SortOrder
    fullCode?: SortOrder
    concentration_core?: SortOrder
    concentration_elective?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    department?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    professorId?: SortOrder
    fullCode?: SortOrder
    concentration_core?: SortOrder
    concentration_elective?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    credits?: SortOrder
    year?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ForumPostListRelationFilter = {
    every?: ForumPostWhereInput
    some?: ForumPostWhereInput
    none?: ForumPostWhereInput
  }

  export type ForumCommentListRelationFilter = {
    every?: ForumCommentWhereInput
    some?: ForumCommentWhereInput
    none?: ForumCommentWhereInput
  }

  export type ForumLikeListRelationFilter = {
    every?: ForumLikeWhereInput
    some?: ForumLikeWhereInput
    none?: ForumLikeWhereInput
  }

  export type ForumViewListRelationFilter = {
    every?: ForumViewWhereInput
    some?: ForumViewWhereInput
    none?: ForumViewWhereInput
  }

  export type ForumSavedListRelationFilter = {
    every?: ForumSavedWhereInput
    some?: ForumSavedWhereInput
    none?: ForumSavedWhereInput
  }

  export type ForumNotificationPreferenceListRelationFilter = {
    every?: ForumNotificationPreferenceWhereInput
    some?: ForumNotificationPreferenceWhereInput
    none?: ForumNotificationPreferenceWhereInput
  }

  export type Marketplace_itemsListRelationFilter = {
    every?: marketplace_itemsWhereInput
    some?: marketplace_itemsWhereInput
    none?: marketplace_itemsWhereInput
  }

  export type ForumPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumViewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumSavedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumNotificationPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type marketplace_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    program?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    program?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    program?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CourseScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    day?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CourseScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    day?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CourseScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    day?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CoursePlannerCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    requirement_type?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoursePlannerAvgOrderByAggregateInput = {
    year?: SortOrder
  }

  export type CoursePlannerMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    requirement_type?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoursePlannerMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    requirement_type?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoursePlannerSumOrderByAggregateInput = {
    year?: SortOrder
  }

  export type ForumCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
  }

  export type ForumCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
  }

  export type ForumCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ForumCategoryScalarRelationFilter = {
    is?: ForumCategoryWhereInput
    isNot?: ForumCategoryWhereInput
  }

  export type ForumPostTagListRelationFilter = {
    every?: ForumPostTagWhereInput
    some?: ForumPostTagWhereInput
    none?: ForumPostTagWhereInput
  }

  export type ForumPostTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumPostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    notify_on_reply?: SortOrder
  }

  export type ForumPostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    notify_on_reply?: SortOrder
  }

  export type ForumPostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    notify_on_reply?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type ForumPostScalarRelationFilter = {
    is?: ForumPostWhereInput
    isNot?: ForumPostWhereInput
  }

  export type ForumCommentNullableScalarRelationFilter = {
    is?: ForumCommentWhereInput | null
    isNot?: ForumCommentWhereInput | null
  }

  export type ForumCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    post_id?: SortOrder
    author_id?: SortOrder
    parent_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    like_count?: SortOrder
    dislike_count?: SortOrder
  }

  export type ForumCommentAvgOrderByAggregateInput = {
    like_count?: SortOrder
    dislike_count?: SortOrder
  }

  export type ForumCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    post_id?: SortOrder
    author_id?: SortOrder
    parent_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    like_count?: SortOrder
    dislike_count?: SortOrder
  }

  export type ForumCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    post_id?: SortOrder
    author_id?: SortOrder
    parent_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    like_count?: SortOrder
    dislike_count?: SortOrder
  }

  export type ForumCommentSumOrderByAggregateInput = {
    like_count?: SortOrder
    dislike_count?: SortOrder
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ForumLikePost_idUser_idCompoundUniqueInput = {
    post_id: string
    user_id: string
  }

  export type ForumLikeCountOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumLikeMinOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumPostTagPost_idTagCompoundUniqueInput = {
    post_id: string
    tag: string
  }

  export type ForumPostTagCountOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    tag?: SortOrder
    created_at?: SortOrder
  }

  export type ForumPostTagMaxOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    tag?: SortOrder
    created_at?: SortOrder
  }

  export type ForumPostTagMinOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    tag?: SortOrder
    created_at?: SortOrder
  }

  export type ForumViewCountOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumViewMaxOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumViewMinOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumSavedUser_idPost_idCompoundUniqueInput = {
    user_id: string
    post_id: string
  }

  export type ForumSavedCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumSavedMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumSavedMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    created_at?: SortOrder
  }

  export type ForumNotificationPreferencePost_idUser_idCompoundUniqueInput = {
    post_id: string
    user_id: string
  }

  export type ForumNotificationPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    notify_on_reply?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ForumNotificationPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    notify_on_reply?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ForumNotificationPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    notify_on_reply?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CourseCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseCategoryScalarRelationFilter = {
    is?: CourseCategoryWhereInput
    isNot?: CourseCategoryWhereInput
  }

  export type CourseCategoryJunctionCourseIdCategoryIdCompoundUniqueInput = {
    courseId: string
    categoryId: string
  }

  export type CourseCategoryJunctionCountOrderByAggregateInput = {
    courseId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseCategoryJunctionMaxOrderByAggregateInput = {
    courseId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseCategoryJunctionMinOrderByAggregateInput = {
    courseId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsCountOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
    author_id?: SortOrder
    rating?: SortOrder
    difficulty?: SortOrder
    workload?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    overall_rating?: SortOrder
  }

  export type course_reviewsAvgOrderByAggregateInput = {
    rating?: SortOrder
    difficulty?: SortOrder
    workload?: SortOrder
    overall_rating?: SortOrder
  }

  export type course_reviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
    author_id?: SortOrder
    rating?: SortOrder
    difficulty?: SortOrder
    workload?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    overall_rating?: SortOrder
  }

  export type course_reviewsMinOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
    author_id?: SortOrder
    rating?: SortOrder
    difficulty?: SortOrder
    workload?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    overall_rating?: SortOrder
  }

  export type course_reviewsSumOrderByAggregateInput = {
    rating?: SortOrder
    difficulty?: SortOrder
    workload?: SortOrder
    overall_rating?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type marketplace_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    image_url?: SortOrder
    seller_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type marketplace_itemsAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type marketplace_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    image_url?: SortOrder
    seller_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type marketplace_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    image_url?: SortOrder
    seller_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type marketplace_itemsSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type CourseCategoryJunctionCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCourseInput, CourseCategoryJunctionUncheckedCreateWithoutCourseInput> | CourseCategoryJunctionCreateWithoutCourseInput[] | CourseCategoryJunctionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCourseInput | CourseCategoryJunctionCreateOrConnectWithoutCourseInput[]
    createMany?: CourseCategoryJunctionCreateManyCourseInputEnvelope
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
  }

  export type CoursePlannerCreateNestedManyWithoutCourseInput = {
    create?: XOR<CoursePlannerCreateWithoutCourseInput, CoursePlannerUncheckedCreateWithoutCourseInput> | CoursePlannerCreateWithoutCourseInput[] | CoursePlannerUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutCourseInput | CoursePlannerCreateOrConnectWithoutCourseInput[]
    createMany?: CoursePlannerCreateManyCourseInputEnvelope
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
  }

  export type course_reviewsCreateNestedManyWithoutCoursesInput = {
    create?: XOR<course_reviewsCreateWithoutCoursesInput, course_reviewsUncheckedCreateWithoutCoursesInput> | course_reviewsCreateWithoutCoursesInput[] | course_reviewsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutCoursesInput | course_reviewsCreateOrConnectWithoutCoursesInput[]
    createMany?: course_reviewsCreateManyCoursesInputEnvelope
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
  }

  export type CourseScheduleCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
  }

  export type CourseCategoryJunctionUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCourseInput, CourseCategoryJunctionUncheckedCreateWithoutCourseInput> | CourseCategoryJunctionCreateWithoutCourseInput[] | CourseCategoryJunctionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCourseInput | CourseCategoryJunctionCreateOrConnectWithoutCourseInput[]
    createMany?: CourseCategoryJunctionCreateManyCourseInputEnvelope
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
  }

  export type CoursePlannerUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CoursePlannerCreateWithoutCourseInput, CoursePlannerUncheckedCreateWithoutCourseInput> | CoursePlannerCreateWithoutCourseInput[] | CoursePlannerUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutCourseInput | CoursePlannerCreateOrConnectWithoutCourseInput[]
    createMany?: CoursePlannerCreateManyCourseInputEnvelope
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
  }

  export type course_reviewsUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<course_reviewsCreateWithoutCoursesInput, course_reviewsUncheckedCreateWithoutCoursesInput> | course_reviewsCreateWithoutCoursesInput[] | course_reviewsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutCoursesInput | course_reviewsCreateOrConnectWithoutCoursesInput[]
    createMany?: course_reviewsCreateManyCoursesInputEnvelope
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
  }

  export type CourseScheduleUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CourseCategoryJunctionUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCourseInput, CourseCategoryJunctionUncheckedCreateWithoutCourseInput> | CourseCategoryJunctionCreateWithoutCourseInput[] | CourseCategoryJunctionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCourseInput | CourseCategoryJunctionCreateOrConnectWithoutCourseInput[]
    upsert?: CourseCategoryJunctionUpsertWithWhereUniqueWithoutCourseInput | CourseCategoryJunctionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseCategoryJunctionCreateManyCourseInputEnvelope
    set?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    disconnect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    delete?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    update?: CourseCategoryJunctionUpdateWithWhereUniqueWithoutCourseInput | CourseCategoryJunctionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseCategoryJunctionUpdateManyWithWhereWithoutCourseInput | CourseCategoryJunctionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseCategoryJunctionScalarWhereInput | CourseCategoryJunctionScalarWhereInput[]
  }

  export type CoursePlannerUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CoursePlannerCreateWithoutCourseInput, CoursePlannerUncheckedCreateWithoutCourseInput> | CoursePlannerCreateWithoutCourseInput[] | CoursePlannerUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutCourseInput | CoursePlannerCreateOrConnectWithoutCourseInput[]
    upsert?: CoursePlannerUpsertWithWhereUniqueWithoutCourseInput | CoursePlannerUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CoursePlannerCreateManyCourseInputEnvelope
    set?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    disconnect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    delete?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    update?: CoursePlannerUpdateWithWhereUniqueWithoutCourseInput | CoursePlannerUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CoursePlannerUpdateManyWithWhereWithoutCourseInput | CoursePlannerUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CoursePlannerScalarWhereInput | CoursePlannerScalarWhereInput[]
  }

  export type course_reviewsUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<course_reviewsCreateWithoutCoursesInput, course_reviewsUncheckedCreateWithoutCoursesInput> | course_reviewsCreateWithoutCoursesInput[] | course_reviewsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutCoursesInput | course_reviewsCreateOrConnectWithoutCoursesInput[]
    upsert?: course_reviewsUpsertWithWhereUniqueWithoutCoursesInput | course_reviewsUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: course_reviewsCreateManyCoursesInputEnvelope
    set?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    disconnect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    delete?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    update?: course_reviewsUpdateWithWhereUniqueWithoutCoursesInput | course_reviewsUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: course_reviewsUpdateManyWithWhereWithoutCoursesInput | course_reviewsUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: course_reviewsScalarWhereInput | course_reviewsScalarWhereInput[]
  }

  export type CourseScheduleUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    upsert?: CourseScheduleUpsertWithWhereUniqueWithoutCourseInput | CourseScheduleUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    set?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    disconnect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    delete?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    update?: CourseScheduleUpdateWithWhereUniqueWithoutCourseInput | CourseScheduleUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseScheduleUpdateManyWithWhereWithoutCourseInput | CourseScheduleUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
  }

  export type CourseCategoryJunctionUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCourseInput, CourseCategoryJunctionUncheckedCreateWithoutCourseInput> | CourseCategoryJunctionCreateWithoutCourseInput[] | CourseCategoryJunctionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCourseInput | CourseCategoryJunctionCreateOrConnectWithoutCourseInput[]
    upsert?: CourseCategoryJunctionUpsertWithWhereUniqueWithoutCourseInput | CourseCategoryJunctionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseCategoryJunctionCreateManyCourseInputEnvelope
    set?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    disconnect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    delete?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    update?: CourseCategoryJunctionUpdateWithWhereUniqueWithoutCourseInput | CourseCategoryJunctionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseCategoryJunctionUpdateManyWithWhereWithoutCourseInput | CourseCategoryJunctionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseCategoryJunctionScalarWhereInput | CourseCategoryJunctionScalarWhereInput[]
  }

  export type CoursePlannerUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CoursePlannerCreateWithoutCourseInput, CoursePlannerUncheckedCreateWithoutCourseInput> | CoursePlannerCreateWithoutCourseInput[] | CoursePlannerUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutCourseInput | CoursePlannerCreateOrConnectWithoutCourseInput[]
    upsert?: CoursePlannerUpsertWithWhereUniqueWithoutCourseInput | CoursePlannerUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CoursePlannerCreateManyCourseInputEnvelope
    set?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    disconnect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    delete?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    update?: CoursePlannerUpdateWithWhereUniqueWithoutCourseInput | CoursePlannerUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CoursePlannerUpdateManyWithWhereWithoutCourseInput | CoursePlannerUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CoursePlannerScalarWhereInput | CoursePlannerScalarWhereInput[]
  }

  export type course_reviewsUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<course_reviewsCreateWithoutCoursesInput, course_reviewsUncheckedCreateWithoutCoursesInput> | course_reviewsCreateWithoutCoursesInput[] | course_reviewsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutCoursesInput | course_reviewsCreateOrConnectWithoutCoursesInput[]
    upsert?: course_reviewsUpsertWithWhereUniqueWithoutCoursesInput | course_reviewsUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: course_reviewsCreateManyCoursesInputEnvelope
    set?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    disconnect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    delete?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    update?: course_reviewsUpdateWithWhereUniqueWithoutCoursesInput | course_reviewsUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: course_reviewsUpdateManyWithWhereWithoutCoursesInput | course_reviewsUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: course_reviewsScalarWhereInput | course_reviewsScalarWhereInput[]
  }

  export type CourseScheduleUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    upsert?: CourseScheduleUpsertWithWhereUniqueWithoutCourseInput | CourseScheduleUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    set?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    disconnect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    delete?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    update?: CourseScheduleUpdateWithWhereUniqueWithoutCourseInput | CourseScheduleUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseScheduleUpdateManyWithWhereWithoutCourseInput | CourseScheduleUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
  }

  export type ForumPostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type ForumCommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumCommentCreateWithoutAuthorInput, ForumCommentUncheckedCreateWithoutAuthorInput> | ForumCommentCreateWithoutAuthorInput[] | ForumCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutAuthorInput | ForumCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumCommentCreateManyAuthorInputEnvelope
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
  }

  export type ForumLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumLikeCreateWithoutUserInput, ForumLikeUncheckedCreateWithoutUserInput> | ForumLikeCreateWithoutUserInput[] | ForumLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutUserInput | ForumLikeCreateOrConnectWithoutUserInput[]
    createMany?: ForumLikeCreateManyUserInputEnvelope
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
  }

  export type ForumViewCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumViewCreateWithoutUserInput, ForumViewUncheckedCreateWithoutUserInput> | ForumViewCreateWithoutUserInput[] | ForumViewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutUserInput | ForumViewCreateOrConnectWithoutUserInput[]
    createMany?: ForumViewCreateManyUserInputEnvelope
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
  }

  export type ForumSavedCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumSavedCreateWithoutUserInput, ForumSavedUncheckedCreateWithoutUserInput> | ForumSavedCreateWithoutUserInput[] | ForumSavedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutUserInput | ForumSavedCreateOrConnectWithoutUserInput[]
    createMany?: ForumSavedCreateManyUserInputEnvelope
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
  }

  export type ForumNotificationPreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutUserInput, ForumNotificationPreferenceUncheckedCreateWithoutUserInput> | ForumNotificationPreferenceCreateWithoutUserInput[] | ForumNotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutUserInput | ForumNotificationPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: ForumNotificationPreferenceCreateManyUserInputEnvelope
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
  }

  export type CourseScheduleCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseScheduleCreateWithoutUserInput, CourseScheduleUncheckedCreateWithoutUserInput> | CourseScheduleCreateWithoutUserInput[] | CourseScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutUserInput | CourseScheduleCreateOrConnectWithoutUserInput[]
    createMany?: CourseScheduleCreateManyUserInputEnvelope
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
  }

  export type CoursePlannerCreateNestedManyWithoutUserInput = {
    create?: XOR<CoursePlannerCreateWithoutUserInput, CoursePlannerUncheckedCreateWithoutUserInput> | CoursePlannerCreateWithoutUserInput[] | CoursePlannerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutUserInput | CoursePlannerCreateOrConnectWithoutUserInput[]
    createMany?: CoursePlannerCreateManyUserInputEnvelope
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
  }

  export type course_reviewsCreateNestedManyWithoutUsersInput = {
    create?: XOR<course_reviewsCreateWithoutUsersInput, course_reviewsUncheckedCreateWithoutUsersInput> | course_reviewsCreateWithoutUsersInput[] | course_reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutUsersInput | course_reviewsCreateOrConnectWithoutUsersInput[]
    createMany?: course_reviewsCreateManyUsersInputEnvelope
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
  }

  export type marketplace_itemsCreateNestedManyWithoutUsersInput = {
    create?: XOR<marketplace_itemsCreateWithoutUsersInput, marketplace_itemsUncheckedCreateWithoutUsersInput> | marketplace_itemsCreateWithoutUsersInput[] | marketplace_itemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: marketplace_itemsCreateOrConnectWithoutUsersInput | marketplace_itemsCreateOrConnectWithoutUsersInput[]
    createMany?: marketplace_itemsCreateManyUsersInputEnvelope
    connect?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
  }

  export type ForumPostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type ForumCommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumCommentCreateWithoutAuthorInput, ForumCommentUncheckedCreateWithoutAuthorInput> | ForumCommentCreateWithoutAuthorInput[] | ForumCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutAuthorInput | ForumCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumCommentCreateManyAuthorInputEnvelope
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
  }

  export type ForumLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumLikeCreateWithoutUserInput, ForumLikeUncheckedCreateWithoutUserInput> | ForumLikeCreateWithoutUserInput[] | ForumLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutUserInput | ForumLikeCreateOrConnectWithoutUserInput[]
    createMany?: ForumLikeCreateManyUserInputEnvelope
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
  }

  export type ForumViewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumViewCreateWithoutUserInput, ForumViewUncheckedCreateWithoutUserInput> | ForumViewCreateWithoutUserInput[] | ForumViewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutUserInput | ForumViewCreateOrConnectWithoutUserInput[]
    createMany?: ForumViewCreateManyUserInputEnvelope
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
  }

  export type ForumSavedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumSavedCreateWithoutUserInput, ForumSavedUncheckedCreateWithoutUserInput> | ForumSavedCreateWithoutUserInput[] | ForumSavedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutUserInput | ForumSavedCreateOrConnectWithoutUserInput[]
    createMany?: ForumSavedCreateManyUserInputEnvelope
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
  }

  export type ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutUserInput, ForumNotificationPreferenceUncheckedCreateWithoutUserInput> | ForumNotificationPreferenceCreateWithoutUserInput[] | ForumNotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutUserInput | ForumNotificationPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: ForumNotificationPreferenceCreateManyUserInputEnvelope
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
  }

  export type CourseScheduleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseScheduleCreateWithoutUserInput, CourseScheduleUncheckedCreateWithoutUserInput> | CourseScheduleCreateWithoutUserInput[] | CourseScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutUserInput | CourseScheduleCreateOrConnectWithoutUserInput[]
    createMany?: CourseScheduleCreateManyUserInputEnvelope
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
  }

  export type CoursePlannerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CoursePlannerCreateWithoutUserInput, CoursePlannerUncheckedCreateWithoutUserInput> | CoursePlannerCreateWithoutUserInput[] | CoursePlannerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutUserInput | CoursePlannerCreateOrConnectWithoutUserInput[]
    createMany?: CoursePlannerCreateManyUserInputEnvelope
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
  }

  export type course_reviewsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<course_reviewsCreateWithoutUsersInput, course_reviewsUncheckedCreateWithoutUsersInput> | course_reviewsCreateWithoutUsersInput[] | course_reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutUsersInput | course_reviewsCreateOrConnectWithoutUsersInput[]
    createMany?: course_reviewsCreateManyUsersInputEnvelope
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
  }

  export type marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<marketplace_itemsCreateWithoutUsersInput, marketplace_itemsUncheckedCreateWithoutUsersInput> | marketplace_itemsCreateWithoutUsersInput[] | marketplace_itemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: marketplace_itemsCreateOrConnectWithoutUsersInput | marketplace_itemsCreateOrConnectWithoutUsersInput[]
    createMany?: marketplace_itemsCreateManyUsersInputEnvelope
    connect?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
  }

  export type ForumPostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutAuthorInput | ForumPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutAuthorInput | ForumPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutAuthorInput | ForumPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type ForumCommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumCommentCreateWithoutAuthorInput, ForumCommentUncheckedCreateWithoutAuthorInput> | ForumCommentCreateWithoutAuthorInput[] | ForumCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutAuthorInput | ForumCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumCommentUpsertWithWhereUniqueWithoutAuthorInput | ForumCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumCommentCreateManyAuthorInputEnvelope
    set?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    disconnect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    delete?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    update?: ForumCommentUpdateWithWhereUniqueWithoutAuthorInput | ForumCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumCommentUpdateManyWithWhereWithoutAuthorInput | ForumCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
  }

  export type ForumLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumLikeCreateWithoutUserInput, ForumLikeUncheckedCreateWithoutUserInput> | ForumLikeCreateWithoutUserInput[] | ForumLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutUserInput | ForumLikeCreateOrConnectWithoutUserInput[]
    upsert?: ForumLikeUpsertWithWhereUniqueWithoutUserInput | ForumLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumLikeCreateManyUserInputEnvelope
    set?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    disconnect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    delete?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    update?: ForumLikeUpdateWithWhereUniqueWithoutUserInput | ForumLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumLikeUpdateManyWithWhereWithoutUserInput | ForumLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumLikeScalarWhereInput | ForumLikeScalarWhereInput[]
  }

  export type ForumViewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumViewCreateWithoutUserInput, ForumViewUncheckedCreateWithoutUserInput> | ForumViewCreateWithoutUserInput[] | ForumViewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutUserInput | ForumViewCreateOrConnectWithoutUserInput[]
    upsert?: ForumViewUpsertWithWhereUniqueWithoutUserInput | ForumViewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumViewCreateManyUserInputEnvelope
    set?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    disconnect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    delete?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    update?: ForumViewUpdateWithWhereUniqueWithoutUserInput | ForumViewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumViewUpdateManyWithWhereWithoutUserInput | ForumViewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumViewScalarWhereInput | ForumViewScalarWhereInput[]
  }

  export type ForumSavedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumSavedCreateWithoutUserInput, ForumSavedUncheckedCreateWithoutUserInput> | ForumSavedCreateWithoutUserInput[] | ForumSavedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutUserInput | ForumSavedCreateOrConnectWithoutUserInput[]
    upsert?: ForumSavedUpsertWithWhereUniqueWithoutUserInput | ForumSavedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumSavedCreateManyUserInputEnvelope
    set?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    disconnect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    delete?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    update?: ForumSavedUpdateWithWhereUniqueWithoutUserInput | ForumSavedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumSavedUpdateManyWithWhereWithoutUserInput | ForumSavedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumSavedScalarWhereInput | ForumSavedScalarWhereInput[]
  }

  export type ForumNotificationPreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutUserInput, ForumNotificationPreferenceUncheckedCreateWithoutUserInput> | ForumNotificationPreferenceCreateWithoutUserInput[] | ForumNotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutUserInput | ForumNotificationPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: ForumNotificationPreferenceUpsertWithWhereUniqueWithoutUserInput | ForumNotificationPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumNotificationPreferenceCreateManyUserInputEnvelope
    set?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    disconnect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    delete?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    update?: ForumNotificationPreferenceUpdateWithWhereUniqueWithoutUserInput | ForumNotificationPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumNotificationPreferenceUpdateManyWithWhereWithoutUserInput | ForumNotificationPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumNotificationPreferenceScalarWhereInput | ForumNotificationPreferenceScalarWhereInput[]
  }

  export type CourseScheduleUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseScheduleCreateWithoutUserInput, CourseScheduleUncheckedCreateWithoutUserInput> | CourseScheduleCreateWithoutUserInput[] | CourseScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutUserInput | CourseScheduleCreateOrConnectWithoutUserInput[]
    upsert?: CourseScheduleUpsertWithWhereUniqueWithoutUserInput | CourseScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseScheduleCreateManyUserInputEnvelope
    set?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    disconnect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    delete?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    update?: CourseScheduleUpdateWithWhereUniqueWithoutUserInput | CourseScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseScheduleUpdateManyWithWhereWithoutUserInput | CourseScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
  }

  export type CoursePlannerUpdateManyWithoutUserNestedInput = {
    create?: XOR<CoursePlannerCreateWithoutUserInput, CoursePlannerUncheckedCreateWithoutUserInput> | CoursePlannerCreateWithoutUserInput[] | CoursePlannerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutUserInput | CoursePlannerCreateOrConnectWithoutUserInput[]
    upsert?: CoursePlannerUpsertWithWhereUniqueWithoutUserInput | CoursePlannerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CoursePlannerCreateManyUserInputEnvelope
    set?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    disconnect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    delete?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    update?: CoursePlannerUpdateWithWhereUniqueWithoutUserInput | CoursePlannerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CoursePlannerUpdateManyWithWhereWithoutUserInput | CoursePlannerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CoursePlannerScalarWhereInput | CoursePlannerScalarWhereInput[]
  }

  export type course_reviewsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<course_reviewsCreateWithoutUsersInput, course_reviewsUncheckedCreateWithoutUsersInput> | course_reviewsCreateWithoutUsersInput[] | course_reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutUsersInput | course_reviewsCreateOrConnectWithoutUsersInput[]
    upsert?: course_reviewsUpsertWithWhereUniqueWithoutUsersInput | course_reviewsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: course_reviewsCreateManyUsersInputEnvelope
    set?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    disconnect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    delete?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    update?: course_reviewsUpdateWithWhereUniqueWithoutUsersInput | course_reviewsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: course_reviewsUpdateManyWithWhereWithoutUsersInput | course_reviewsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: course_reviewsScalarWhereInput | course_reviewsScalarWhereInput[]
  }

  export type marketplace_itemsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<marketplace_itemsCreateWithoutUsersInput, marketplace_itemsUncheckedCreateWithoutUsersInput> | marketplace_itemsCreateWithoutUsersInput[] | marketplace_itemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: marketplace_itemsCreateOrConnectWithoutUsersInput | marketplace_itemsCreateOrConnectWithoutUsersInput[]
    upsert?: marketplace_itemsUpsertWithWhereUniqueWithoutUsersInput | marketplace_itemsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: marketplace_itemsCreateManyUsersInputEnvelope
    set?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    disconnect?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    delete?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    connect?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    update?: marketplace_itemsUpdateWithWhereUniqueWithoutUsersInput | marketplace_itemsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: marketplace_itemsUpdateManyWithWhereWithoutUsersInput | marketplace_itemsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: marketplace_itemsScalarWhereInput | marketplace_itemsScalarWhereInput[]
  }

  export type ForumPostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutAuthorInput | ForumPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutAuthorInput | ForumPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutAuthorInput | ForumPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumCommentCreateWithoutAuthorInput, ForumCommentUncheckedCreateWithoutAuthorInput> | ForumCommentCreateWithoutAuthorInput[] | ForumCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutAuthorInput | ForumCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumCommentUpsertWithWhereUniqueWithoutAuthorInput | ForumCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumCommentCreateManyAuthorInputEnvelope
    set?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    disconnect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    delete?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    update?: ForumCommentUpdateWithWhereUniqueWithoutAuthorInput | ForumCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumCommentUpdateManyWithWhereWithoutAuthorInput | ForumCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
  }

  export type ForumLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumLikeCreateWithoutUserInput, ForumLikeUncheckedCreateWithoutUserInput> | ForumLikeCreateWithoutUserInput[] | ForumLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutUserInput | ForumLikeCreateOrConnectWithoutUserInput[]
    upsert?: ForumLikeUpsertWithWhereUniqueWithoutUserInput | ForumLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumLikeCreateManyUserInputEnvelope
    set?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    disconnect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    delete?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    update?: ForumLikeUpdateWithWhereUniqueWithoutUserInput | ForumLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumLikeUpdateManyWithWhereWithoutUserInput | ForumLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumLikeScalarWhereInput | ForumLikeScalarWhereInput[]
  }

  export type ForumViewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumViewCreateWithoutUserInput, ForumViewUncheckedCreateWithoutUserInput> | ForumViewCreateWithoutUserInput[] | ForumViewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutUserInput | ForumViewCreateOrConnectWithoutUserInput[]
    upsert?: ForumViewUpsertWithWhereUniqueWithoutUserInput | ForumViewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumViewCreateManyUserInputEnvelope
    set?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    disconnect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    delete?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    update?: ForumViewUpdateWithWhereUniqueWithoutUserInput | ForumViewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumViewUpdateManyWithWhereWithoutUserInput | ForumViewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumViewScalarWhereInput | ForumViewScalarWhereInput[]
  }

  export type ForumSavedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumSavedCreateWithoutUserInput, ForumSavedUncheckedCreateWithoutUserInput> | ForumSavedCreateWithoutUserInput[] | ForumSavedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutUserInput | ForumSavedCreateOrConnectWithoutUserInput[]
    upsert?: ForumSavedUpsertWithWhereUniqueWithoutUserInput | ForumSavedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumSavedCreateManyUserInputEnvelope
    set?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    disconnect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    delete?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    update?: ForumSavedUpdateWithWhereUniqueWithoutUserInput | ForumSavedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumSavedUpdateManyWithWhereWithoutUserInput | ForumSavedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumSavedScalarWhereInput | ForumSavedScalarWhereInput[]
  }

  export type ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutUserInput, ForumNotificationPreferenceUncheckedCreateWithoutUserInput> | ForumNotificationPreferenceCreateWithoutUserInput[] | ForumNotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutUserInput | ForumNotificationPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: ForumNotificationPreferenceUpsertWithWhereUniqueWithoutUserInput | ForumNotificationPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumNotificationPreferenceCreateManyUserInputEnvelope
    set?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    disconnect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    delete?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    update?: ForumNotificationPreferenceUpdateWithWhereUniqueWithoutUserInput | ForumNotificationPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumNotificationPreferenceUpdateManyWithWhereWithoutUserInput | ForumNotificationPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumNotificationPreferenceScalarWhereInput | ForumNotificationPreferenceScalarWhereInput[]
  }

  export type CourseScheduleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseScheduleCreateWithoutUserInput, CourseScheduleUncheckedCreateWithoutUserInput> | CourseScheduleCreateWithoutUserInput[] | CourseScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutUserInput | CourseScheduleCreateOrConnectWithoutUserInput[]
    upsert?: CourseScheduleUpsertWithWhereUniqueWithoutUserInput | CourseScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseScheduleCreateManyUserInputEnvelope
    set?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    disconnect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    delete?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    update?: CourseScheduleUpdateWithWhereUniqueWithoutUserInput | CourseScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseScheduleUpdateManyWithWhereWithoutUserInput | CourseScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
  }

  export type CoursePlannerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CoursePlannerCreateWithoutUserInput, CoursePlannerUncheckedCreateWithoutUserInput> | CoursePlannerCreateWithoutUserInput[] | CoursePlannerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoursePlannerCreateOrConnectWithoutUserInput | CoursePlannerCreateOrConnectWithoutUserInput[]
    upsert?: CoursePlannerUpsertWithWhereUniqueWithoutUserInput | CoursePlannerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CoursePlannerCreateManyUserInputEnvelope
    set?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    disconnect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    delete?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    connect?: CoursePlannerWhereUniqueInput | CoursePlannerWhereUniqueInput[]
    update?: CoursePlannerUpdateWithWhereUniqueWithoutUserInput | CoursePlannerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CoursePlannerUpdateManyWithWhereWithoutUserInput | CoursePlannerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CoursePlannerScalarWhereInput | CoursePlannerScalarWhereInput[]
  }

  export type course_reviewsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<course_reviewsCreateWithoutUsersInput, course_reviewsUncheckedCreateWithoutUsersInput> | course_reviewsCreateWithoutUsersInput[] | course_reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_reviewsCreateOrConnectWithoutUsersInput | course_reviewsCreateOrConnectWithoutUsersInput[]
    upsert?: course_reviewsUpsertWithWhereUniqueWithoutUsersInput | course_reviewsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: course_reviewsCreateManyUsersInputEnvelope
    set?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    disconnect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    delete?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    connect?: course_reviewsWhereUniqueInput | course_reviewsWhereUniqueInput[]
    update?: course_reviewsUpdateWithWhereUniqueWithoutUsersInput | course_reviewsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: course_reviewsUpdateManyWithWhereWithoutUsersInput | course_reviewsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: course_reviewsScalarWhereInput | course_reviewsScalarWhereInput[]
  }

  export type marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<marketplace_itemsCreateWithoutUsersInput, marketplace_itemsUncheckedCreateWithoutUsersInput> | marketplace_itemsCreateWithoutUsersInput[] | marketplace_itemsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: marketplace_itemsCreateOrConnectWithoutUsersInput | marketplace_itemsCreateOrConnectWithoutUsersInput[]
    upsert?: marketplace_itemsUpsertWithWhereUniqueWithoutUsersInput | marketplace_itemsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: marketplace_itemsCreateManyUsersInputEnvelope
    set?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    disconnect?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    delete?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    connect?: marketplace_itemsWhereUniqueInput | marketplace_itemsWhereUniqueInput[]
    update?: marketplace_itemsUpdateWithWhereUniqueWithoutUsersInput | marketplace_itemsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: marketplace_itemsUpdateManyWithWhereWithoutUsersInput | marketplace_itemsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: marketplace_itemsScalarWhereInput | marketplace_itemsScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<CourseCreateWithoutSchedulesInput, CourseUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSchedulesInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourse_schedulesInput = {
    create?: XOR<UserCreateWithoutCourse_schedulesInput, UserUncheckedCreateWithoutCourse_schedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourse_schedulesInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CourseUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<CourseCreateWithoutSchedulesInput, CourseUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSchedulesInput
    upsert?: CourseUpsertWithoutSchedulesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutSchedulesInput, CourseUpdateWithoutSchedulesInput>, CourseUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserUpdateOneRequiredWithoutCourse_schedulesNestedInput = {
    create?: XOR<UserCreateWithoutCourse_schedulesInput, UserUncheckedCreateWithoutCourse_schedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourse_schedulesInput
    upsert?: UserUpsertWithoutCourse_schedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourse_schedulesInput, UserUpdateWithoutCourse_schedulesInput>, UserUncheckedUpdateWithoutCourse_schedulesInput>
  }

  export type CourseCreateNestedOneWithoutPlannersInput = {
    create?: XOR<CourseCreateWithoutPlannersInput, CourseUncheckedCreateWithoutPlannersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPlannersInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourse_plannersInput = {
    create?: XOR<UserCreateWithoutCourse_plannersInput, UserUncheckedCreateWithoutCourse_plannersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourse_plannersInput
    connect?: UserWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutPlannersNestedInput = {
    create?: XOR<CourseCreateWithoutPlannersInput, CourseUncheckedCreateWithoutPlannersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPlannersInput
    upsert?: CourseUpsertWithoutPlannersInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutPlannersInput, CourseUpdateWithoutPlannersInput>, CourseUncheckedUpdateWithoutPlannersInput>
  }

  export type UserUpdateOneRequiredWithoutCourse_plannersNestedInput = {
    create?: XOR<UserCreateWithoutCourse_plannersInput, UserUncheckedCreateWithoutCourse_plannersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourse_plannersInput
    upsert?: UserUpsertWithoutCourse_plannersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourse_plannersInput, UserUpdateWithoutCourse_plannersInput>, UserUncheckedUpdateWithoutCourse_plannersInput>
  }

  export type ForumPostCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ForumPostCreateWithoutCategoryInput, ForumPostUncheckedCreateWithoutCategoryInput> | ForumPostCreateWithoutCategoryInput[] | ForumPostUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCategoryInput | ForumPostCreateOrConnectWithoutCategoryInput[]
    createMany?: ForumPostCreateManyCategoryInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type ForumPostUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ForumPostCreateWithoutCategoryInput, ForumPostUncheckedCreateWithoutCategoryInput> | ForumPostCreateWithoutCategoryInput[] | ForumPostUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCategoryInput | ForumPostCreateOrConnectWithoutCategoryInput[]
    createMany?: ForumPostCreateManyCategoryInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type ForumPostUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ForumPostCreateWithoutCategoryInput, ForumPostUncheckedCreateWithoutCategoryInput> | ForumPostCreateWithoutCategoryInput[] | ForumPostUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCategoryInput | ForumPostCreateOrConnectWithoutCategoryInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutCategoryInput | ForumPostUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ForumPostCreateManyCategoryInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutCategoryInput | ForumPostUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutCategoryInput | ForumPostUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type ForumPostUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ForumPostCreateWithoutCategoryInput, ForumPostUncheckedCreateWithoutCategoryInput> | ForumPostCreateWithoutCategoryInput[] | ForumPostUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCategoryInput | ForumPostCreateOrConnectWithoutCategoryInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutCategoryInput | ForumPostUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ForumPostCreateManyCategoryInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutCategoryInput | ForumPostUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutCategoryInput | ForumPostUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutForum_postsInput = {
    create?: XOR<UserCreateWithoutForum_postsInput, UserUncheckedCreateWithoutForum_postsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_postsInput
    connect?: UserWhereUniqueInput
  }

  export type ForumCategoryCreateNestedOneWithoutPostsInput = {
    create?: XOR<ForumCategoryCreateWithoutPostsInput, ForumCategoryUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ForumCategoryCreateOrConnectWithoutPostsInput
    connect?: ForumCategoryWhereUniqueInput
  }

  export type ForumCommentCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumCommentCreateWithoutPostInput, ForumCommentUncheckedCreateWithoutPostInput> | ForumCommentCreateWithoutPostInput[] | ForumCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutPostInput | ForumCommentCreateOrConnectWithoutPostInput[]
    createMany?: ForumCommentCreateManyPostInputEnvelope
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
  }

  export type ForumLikeCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumLikeCreateWithoutPostInput, ForumLikeUncheckedCreateWithoutPostInput> | ForumLikeCreateWithoutPostInput[] | ForumLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutPostInput | ForumLikeCreateOrConnectWithoutPostInput[]
    createMany?: ForumLikeCreateManyPostInputEnvelope
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
  }

  export type ForumViewCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumViewCreateWithoutPostInput, ForumViewUncheckedCreateWithoutPostInput> | ForumViewCreateWithoutPostInput[] | ForumViewUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutPostInput | ForumViewCreateOrConnectWithoutPostInput[]
    createMany?: ForumViewCreateManyPostInputEnvelope
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
  }

  export type ForumPostTagCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumPostTagCreateWithoutPostInput, ForumPostTagUncheckedCreateWithoutPostInput> | ForumPostTagCreateWithoutPostInput[] | ForumPostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostTagCreateOrConnectWithoutPostInput | ForumPostTagCreateOrConnectWithoutPostInput[]
    createMany?: ForumPostTagCreateManyPostInputEnvelope
    connect?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
  }

  export type ForumSavedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumSavedCreateWithoutPostInput, ForumSavedUncheckedCreateWithoutPostInput> | ForumSavedCreateWithoutPostInput[] | ForumSavedUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutPostInput | ForumSavedCreateOrConnectWithoutPostInput[]
    createMany?: ForumSavedCreateManyPostInputEnvelope
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
  }

  export type ForumNotificationPreferenceCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutPostInput, ForumNotificationPreferenceUncheckedCreateWithoutPostInput> | ForumNotificationPreferenceCreateWithoutPostInput[] | ForumNotificationPreferenceUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutPostInput | ForumNotificationPreferenceCreateOrConnectWithoutPostInput[]
    createMany?: ForumNotificationPreferenceCreateManyPostInputEnvelope
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
  }

  export type ForumCommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumCommentCreateWithoutPostInput, ForumCommentUncheckedCreateWithoutPostInput> | ForumCommentCreateWithoutPostInput[] | ForumCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutPostInput | ForumCommentCreateOrConnectWithoutPostInput[]
    createMany?: ForumCommentCreateManyPostInputEnvelope
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
  }

  export type ForumLikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumLikeCreateWithoutPostInput, ForumLikeUncheckedCreateWithoutPostInput> | ForumLikeCreateWithoutPostInput[] | ForumLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutPostInput | ForumLikeCreateOrConnectWithoutPostInput[]
    createMany?: ForumLikeCreateManyPostInputEnvelope
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
  }

  export type ForumViewUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumViewCreateWithoutPostInput, ForumViewUncheckedCreateWithoutPostInput> | ForumViewCreateWithoutPostInput[] | ForumViewUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutPostInput | ForumViewCreateOrConnectWithoutPostInput[]
    createMany?: ForumViewCreateManyPostInputEnvelope
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
  }

  export type ForumPostTagUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumPostTagCreateWithoutPostInput, ForumPostTagUncheckedCreateWithoutPostInput> | ForumPostTagCreateWithoutPostInput[] | ForumPostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostTagCreateOrConnectWithoutPostInput | ForumPostTagCreateOrConnectWithoutPostInput[]
    createMany?: ForumPostTagCreateManyPostInputEnvelope
    connect?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
  }

  export type ForumSavedUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumSavedCreateWithoutPostInput, ForumSavedUncheckedCreateWithoutPostInput> | ForumSavedCreateWithoutPostInput[] | ForumSavedUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutPostInput | ForumSavedCreateOrConnectWithoutPostInput[]
    createMany?: ForumSavedCreateManyPostInputEnvelope
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
  }

  export type ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutPostInput, ForumNotificationPreferenceUncheckedCreateWithoutPostInput> | ForumNotificationPreferenceCreateWithoutPostInput[] | ForumNotificationPreferenceUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutPostInput | ForumNotificationPreferenceCreateOrConnectWithoutPostInput[]
    createMany?: ForumNotificationPreferenceCreateManyPostInputEnvelope
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutForum_postsNestedInput = {
    create?: XOR<UserCreateWithoutForum_postsInput, UserUncheckedCreateWithoutForum_postsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_postsInput
    upsert?: UserUpsertWithoutForum_postsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForum_postsInput, UserUpdateWithoutForum_postsInput>, UserUncheckedUpdateWithoutForum_postsInput>
  }

  export type ForumCategoryUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<ForumCategoryCreateWithoutPostsInput, ForumCategoryUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ForumCategoryCreateOrConnectWithoutPostsInput
    upsert?: ForumCategoryUpsertWithoutPostsInput
    connect?: ForumCategoryWhereUniqueInput
    update?: XOR<XOR<ForumCategoryUpdateToOneWithWhereWithoutPostsInput, ForumCategoryUpdateWithoutPostsInput>, ForumCategoryUncheckedUpdateWithoutPostsInput>
  }

  export type ForumCommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumCommentCreateWithoutPostInput, ForumCommentUncheckedCreateWithoutPostInput> | ForumCommentCreateWithoutPostInput[] | ForumCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutPostInput | ForumCommentCreateOrConnectWithoutPostInput[]
    upsert?: ForumCommentUpsertWithWhereUniqueWithoutPostInput | ForumCommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumCommentCreateManyPostInputEnvelope
    set?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    disconnect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    delete?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    update?: ForumCommentUpdateWithWhereUniqueWithoutPostInput | ForumCommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumCommentUpdateManyWithWhereWithoutPostInput | ForumCommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
  }

  export type ForumLikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumLikeCreateWithoutPostInput, ForumLikeUncheckedCreateWithoutPostInput> | ForumLikeCreateWithoutPostInput[] | ForumLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutPostInput | ForumLikeCreateOrConnectWithoutPostInput[]
    upsert?: ForumLikeUpsertWithWhereUniqueWithoutPostInput | ForumLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumLikeCreateManyPostInputEnvelope
    set?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    disconnect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    delete?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    update?: ForumLikeUpdateWithWhereUniqueWithoutPostInput | ForumLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumLikeUpdateManyWithWhereWithoutPostInput | ForumLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumLikeScalarWhereInput | ForumLikeScalarWhereInput[]
  }

  export type ForumViewUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumViewCreateWithoutPostInput, ForumViewUncheckedCreateWithoutPostInput> | ForumViewCreateWithoutPostInput[] | ForumViewUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutPostInput | ForumViewCreateOrConnectWithoutPostInput[]
    upsert?: ForumViewUpsertWithWhereUniqueWithoutPostInput | ForumViewUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumViewCreateManyPostInputEnvelope
    set?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    disconnect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    delete?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    update?: ForumViewUpdateWithWhereUniqueWithoutPostInput | ForumViewUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumViewUpdateManyWithWhereWithoutPostInput | ForumViewUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumViewScalarWhereInput | ForumViewScalarWhereInput[]
  }

  export type ForumPostTagUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumPostTagCreateWithoutPostInput, ForumPostTagUncheckedCreateWithoutPostInput> | ForumPostTagCreateWithoutPostInput[] | ForumPostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostTagCreateOrConnectWithoutPostInput | ForumPostTagCreateOrConnectWithoutPostInput[]
    upsert?: ForumPostTagUpsertWithWhereUniqueWithoutPostInput | ForumPostTagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumPostTagCreateManyPostInputEnvelope
    set?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    disconnect?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    delete?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    connect?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    update?: ForumPostTagUpdateWithWhereUniqueWithoutPostInput | ForumPostTagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumPostTagUpdateManyWithWhereWithoutPostInput | ForumPostTagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumPostTagScalarWhereInput | ForumPostTagScalarWhereInput[]
  }

  export type ForumSavedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumSavedCreateWithoutPostInput, ForumSavedUncheckedCreateWithoutPostInput> | ForumSavedCreateWithoutPostInput[] | ForumSavedUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutPostInput | ForumSavedCreateOrConnectWithoutPostInput[]
    upsert?: ForumSavedUpsertWithWhereUniqueWithoutPostInput | ForumSavedUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumSavedCreateManyPostInputEnvelope
    set?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    disconnect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    delete?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    update?: ForumSavedUpdateWithWhereUniqueWithoutPostInput | ForumSavedUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumSavedUpdateManyWithWhereWithoutPostInput | ForumSavedUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumSavedScalarWhereInput | ForumSavedScalarWhereInput[]
  }

  export type ForumNotificationPreferenceUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutPostInput, ForumNotificationPreferenceUncheckedCreateWithoutPostInput> | ForumNotificationPreferenceCreateWithoutPostInput[] | ForumNotificationPreferenceUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutPostInput | ForumNotificationPreferenceCreateOrConnectWithoutPostInput[]
    upsert?: ForumNotificationPreferenceUpsertWithWhereUniqueWithoutPostInput | ForumNotificationPreferenceUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumNotificationPreferenceCreateManyPostInputEnvelope
    set?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    disconnect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    delete?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    update?: ForumNotificationPreferenceUpdateWithWhereUniqueWithoutPostInput | ForumNotificationPreferenceUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumNotificationPreferenceUpdateManyWithWhereWithoutPostInput | ForumNotificationPreferenceUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumNotificationPreferenceScalarWhereInput | ForumNotificationPreferenceScalarWhereInput[]
  }

  export type ForumCommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumCommentCreateWithoutPostInput, ForumCommentUncheckedCreateWithoutPostInput> | ForumCommentCreateWithoutPostInput[] | ForumCommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutPostInput | ForumCommentCreateOrConnectWithoutPostInput[]
    upsert?: ForumCommentUpsertWithWhereUniqueWithoutPostInput | ForumCommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumCommentCreateManyPostInputEnvelope
    set?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    disconnect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    delete?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    update?: ForumCommentUpdateWithWhereUniqueWithoutPostInput | ForumCommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumCommentUpdateManyWithWhereWithoutPostInput | ForumCommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
  }

  export type ForumLikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumLikeCreateWithoutPostInput, ForumLikeUncheckedCreateWithoutPostInput> | ForumLikeCreateWithoutPostInput[] | ForumLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumLikeCreateOrConnectWithoutPostInput | ForumLikeCreateOrConnectWithoutPostInput[]
    upsert?: ForumLikeUpsertWithWhereUniqueWithoutPostInput | ForumLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumLikeCreateManyPostInputEnvelope
    set?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    disconnect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    delete?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    connect?: ForumLikeWhereUniqueInput | ForumLikeWhereUniqueInput[]
    update?: ForumLikeUpdateWithWhereUniqueWithoutPostInput | ForumLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumLikeUpdateManyWithWhereWithoutPostInput | ForumLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumLikeScalarWhereInput | ForumLikeScalarWhereInput[]
  }

  export type ForumViewUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumViewCreateWithoutPostInput, ForumViewUncheckedCreateWithoutPostInput> | ForumViewCreateWithoutPostInput[] | ForumViewUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumViewCreateOrConnectWithoutPostInput | ForumViewCreateOrConnectWithoutPostInput[]
    upsert?: ForumViewUpsertWithWhereUniqueWithoutPostInput | ForumViewUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumViewCreateManyPostInputEnvelope
    set?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    disconnect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    delete?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    connect?: ForumViewWhereUniqueInput | ForumViewWhereUniqueInput[]
    update?: ForumViewUpdateWithWhereUniqueWithoutPostInput | ForumViewUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumViewUpdateManyWithWhereWithoutPostInput | ForumViewUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumViewScalarWhereInput | ForumViewScalarWhereInput[]
  }

  export type ForumPostTagUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumPostTagCreateWithoutPostInput, ForumPostTagUncheckedCreateWithoutPostInput> | ForumPostTagCreateWithoutPostInput[] | ForumPostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostTagCreateOrConnectWithoutPostInput | ForumPostTagCreateOrConnectWithoutPostInput[]
    upsert?: ForumPostTagUpsertWithWhereUniqueWithoutPostInput | ForumPostTagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumPostTagCreateManyPostInputEnvelope
    set?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    disconnect?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    delete?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    connect?: ForumPostTagWhereUniqueInput | ForumPostTagWhereUniqueInput[]
    update?: ForumPostTagUpdateWithWhereUniqueWithoutPostInput | ForumPostTagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumPostTagUpdateManyWithWhereWithoutPostInput | ForumPostTagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumPostTagScalarWhereInput | ForumPostTagScalarWhereInput[]
  }

  export type ForumSavedUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumSavedCreateWithoutPostInput, ForumSavedUncheckedCreateWithoutPostInput> | ForumSavedCreateWithoutPostInput[] | ForumSavedUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumSavedCreateOrConnectWithoutPostInput | ForumSavedCreateOrConnectWithoutPostInput[]
    upsert?: ForumSavedUpsertWithWhereUniqueWithoutPostInput | ForumSavedUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumSavedCreateManyPostInputEnvelope
    set?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    disconnect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    delete?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    connect?: ForumSavedWhereUniqueInput | ForumSavedWhereUniqueInput[]
    update?: ForumSavedUpdateWithWhereUniqueWithoutPostInput | ForumSavedUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumSavedUpdateManyWithWhereWithoutPostInput | ForumSavedUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumSavedScalarWhereInput | ForumSavedScalarWhereInput[]
  }

  export type ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumNotificationPreferenceCreateWithoutPostInput, ForumNotificationPreferenceUncheckedCreateWithoutPostInput> | ForumNotificationPreferenceCreateWithoutPostInput[] | ForumNotificationPreferenceUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumNotificationPreferenceCreateOrConnectWithoutPostInput | ForumNotificationPreferenceCreateOrConnectWithoutPostInput[]
    upsert?: ForumNotificationPreferenceUpsertWithWhereUniqueWithoutPostInput | ForumNotificationPreferenceUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumNotificationPreferenceCreateManyPostInputEnvelope
    set?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    disconnect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    delete?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    connect?: ForumNotificationPreferenceWhereUniqueInput | ForumNotificationPreferenceWhereUniqueInput[]
    update?: ForumNotificationPreferenceUpdateWithWhereUniqueWithoutPostInput | ForumNotificationPreferenceUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumNotificationPreferenceUpdateManyWithWhereWithoutPostInput | ForumNotificationPreferenceUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumNotificationPreferenceScalarWhereInput | ForumNotificationPreferenceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutForum_commentsInput = {
    create?: XOR<UserCreateWithoutForum_commentsInput, UserUncheckedCreateWithoutForum_commentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_commentsInput
    connect?: UserWhereUniqueInput
  }

  export type ForumPostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ForumPostCreateWithoutCommentsInput, ForumPostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutCommentsInput
    connect?: ForumPostWhereUniqueInput
  }

  export type ForumCommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<ForumCommentCreateWithoutRepliesInput, ForumCommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ForumCommentCreateOrConnectWithoutRepliesInput
    connect?: ForumCommentWhereUniqueInput
  }

  export type ForumCommentCreateNestedManyWithoutParentInput = {
    create?: XOR<ForumCommentCreateWithoutParentInput, ForumCommentUncheckedCreateWithoutParentInput> | ForumCommentCreateWithoutParentInput[] | ForumCommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutParentInput | ForumCommentCreateOrConnectWithoutParentInput[]
    createMany?: ForumCommentCreateManyParentInputEnvelope
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
  }

  export type ForumCommentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<ForumCommentCreateWithoutParentInput, ForumCommentUncheckedCreateWithoutParentInput> | ForumCommentCreateWithoutParentInput[] | ForumCommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutParentInput | ForumCommentCreateOrConnectWithoutParentInput[]
    createMany?: ForumCommentCreateManyParentInputEnvelope
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutForum_commentsNestedInput = {
    create?: XOR<UserCreateWithoutForum_commentsInput, UserUncheckedCreateWithoutForum_commentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_commentsInput
    upsert?: UserUpsertWithoutForum_commentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForum_commentsInput, UserUpdateWithoutForum_commentsInput>, UserUncheckedUpdateWithoutForum_commentsInput>
  }

  export type ForumPostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ForumPostCreateWithoutCommentsInput, ForumPostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutCommentsInput
    upsert?: ForumPostUpsertWithoutCommentsInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutCommentsInput, ForumPostUpdateWithoutCommentsInput>, ForumPostUncheckedUpdateWithoutCommentsInput>
  }

  export type ForumCommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<ForumCommentCreateWithoutRepliesInput, ForumCommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ForumCommentCreateOrConnectWithoutRepliesInput
    upsert?: ForumCommentUpsertWithoutRepliesInput
    disconnect?: ForumCommentWhereInput | boolean
    delete?: ForumCommentWhereInput | boolean
    connect?: ForumCommentWhereUniqueInput
    update?: XOR<XOR<ForumCommentUpdateToOneWithWhereWithoutRepliesInput, ForumCommentUpdateWithoutRepliesInput>, ForumCommentUncheckedUpdateWithoutRepliesInput>
  }

  export type ForumCommentUpdateManyWithoutParentNestedInput = {
    create?: XOR<ForumCommentCreateWithoutParentInput, ForumCommentUncheckedCreateWithoutParentInput> | ForumCommentCreateWithoutParentInput[] | ForumCommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutParentInput | ForumCommentCreateOrConnectWithoutParentInput[]
    upsert?: ForumCommentUpsertWithWhereUniqueWithoutParentInput | ForumCommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ForumCommentCreateManyParentInputEnvelope
    set?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    disconnect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    delete?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    update?: ForumCommentUpdateWithWhereUniqueWithoutParentInput | ForumCommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ForumCommentUpdateManyWithWhereWithoutParentInput | ForumCommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
  }

  export type ForumCommentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<ForumCommentCreateWithoutParentInput, ForumCommentUncheckedCreateWithoutParentInput> | ForumCommentCreateWithoutParentInput[] | ForumCommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ForumCommentCreateOrConnectWithoutParentInput | ForumCommentCreateOrConnectWithoutParentInput[]
    upsert?: ForumCommentUpsertWithWhereUniqueWithoutParentInput | ForumCommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ForumCommentCreateManyParentInputEnvelope
    set?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    disconnect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    delete?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    connect?: ForumCommentWhereUniqueInput | ForumCommentWhereUniqueInput[]
    update?: ForumCommentUpdateWithWhereUniqueWithoutParentInput | ForumCommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ForumCommentUpdateManyWithWhereWithoutParentInput | ForumCommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
  }

  export type ForumPostCreateNestedOneWithoutLikesInput = {
    create?: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutLikesInput
    connect?: ForumPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutForum_likesInput = {
    create?: XOR<UserCreateWithoutForum_likesInput, UserUncheckedCreateWithoutForum_likesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_likesInput
    connect?: UserWhereUniqueInput
  }

  export type ForumPostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutLikesInput
    upsert?: ForumPostUpsertWithoutLikesInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutLikesInput, ForumPostUpdateWithoutLikesInput>, ForumPostUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutForum_likesNestedInput = {
    create?: XOR<UserCreateWithoutForum_likesInput, UserUncheckedCreateWithoutForum_likesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_likesInput
    upsert?: UserUpsertWithoutForum_likesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForum_likesInput, UserUpdateWithoutForum_likesInput>, UserUncheckedUpdateWithoutForum_likesInput>
  }

  export type ForumPostCreateNestedOneWithoutTagsInput = {
    create?: XOR<ForumPostCreateWithoutTagsInput, ForumPostUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutTagsInput
    connect?: ForumPostWhereUniqueInput
  }

  export type ForumPostUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ForumPostCreateWithoutTagsInput, ForumPostUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutTagsInput
    upsert?: ForumPostUpsertWithoutTagsInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutTagsInput, ForumPostUpdateWithoutTagsInput>, ForumPostUncheckedUpdateWithoutTagsInput>
  }

  export type ForumPostCreateNestedOneWithoutViewsInput = {
    create?: XOR<ForumPostCreateWithoutViewsInput, ForumPostUncheckedCreateWithoutViewsInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutViewsInput
    connect?: ForumPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutForum_viewsInput = {
    create?: XOR<UserCreateWithoutForum_viewsInput, UserUncheckedCreateWithoutForum_viewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_viewsInput
    connect?: UserWhereUniqueInput
  }

  export type ForumPostUpdateOneRequiredWithoutViewsNestedInput = {
    create?: XOR<ForumPostCreateWithoutViewsInput, ForumPostUncheckedCreateWithoutViewsInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutViewsInput
    upsert?: ForumPostUpsertWithoutViewsInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutViewsInput, ForumPostUpdateWithoutViewsInput>, ForumPostUncheckedUpdateWithoutViewsInput>
  }

  export type UserUpdateOneRequiredWithoutForum_viewsNestedInput = {
    create?: XOR<UserCreateWithoutForum_viewsInput, UserUncheckedCreateWithoutForum_viewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_viewsInput
    upsert?: UserUpsertWithoutForum_viewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForum_viewsInput, UserUpdateWithoutForum_viewsInput>, UserUncheckedUpdateWithoutForum_viewsInput>
  }

  export type ForumPostCreateNestedOneWithoutSaved_byInput = {
    create?: XOR<ForumPostCreateWithoutSaved_byInput, ForumPostUncheckedCreateWithoutSaved_byInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutSaved_byInput
    connect?: ForumPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutForum_savedInput = {
    create?: XOR<UserCreateWithoutForum_savedInput, UserUncheckedCreateWithoutForum_savedInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_savedInput
    connect?: UserWhereUniqueInput
  }

  export type ForumPostUpdateOneRequiredWithoutSaved_byNestedInput = {
    create?: XOR<ForumPostCreateWithoutSaved_byInput, ForumPostUncheckedCreateWithoutSaved_byInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutSaved_byInput
    upsert?: ForumPostUpsertWithoutSaved_byInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutSaved_byInput, ForumPostUpdateWithoutSaved_byInput>, ForumPostUncheckedUpdateWithoutSaved_byInput>
  }

  export type UserUpdateOneRequiredWithoutForum_savedNestedInput = {
    create?: XOR<UserCreateWithoutForum_savedInput, UserUncheckedCreateWithoutForum_savedInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_savedInput
    upsert?: UserUpsertWithoutForum_savedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForum_savedInput, UserUpdateWithoutForum_savedInput>, UserUncheckedUpdateWithoutForum_savedInput>
  }

  export type ForumPostCreateNestedOneWithoutNotification_preferencesInput = {
    create?: XOR<ForumPostCreateWithoutNotification_preferencesInput, ForumPostUncheckedCreateWithoutNotification_preferencesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutNotification_preferencesInput
    connect?: ForumPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutForum_notification_preferencesInput = {
    create?: XOR<UserCreateWithoutForum_notification_preferencesInput, UserUncheckedCreateWithoutForum_notification_preferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_notification_preferencesInput
    connect?: UserWhereUniqueInput
  }

  export type ForumPostUpdateOneRequiredWithoutNotification_preferencesNestedInput = {
    create?: XOR<ForumPostCreateWithoutNotification_preferencesInput, ForumPostUncheckedCreateWithoutNotification_preferencesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutNotification_preferencesInput
    upsert?: ForumPostUpsertWithoutNotification_preferencesInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutNotification_preferencesInput, ForumPostUpdateWithoutNotification_preferencesInput>, ForumPostUncheckedUpdateWithoutNotification_preferencesInput>
  }

  export type UserUpdateOneRequiredWithoutForum_notification_preferencesNestedInput = {
    create?: XOR<UserCreateWithoutForum_notification_preferencesInput, UserUncheckedCreateWithoutForum_notification_preferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForum_notification_preferencesInput
    upsert?: UserUpsertWithoutForum_notification_preferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForum_notification_preferencesInput, UserUpdateWithoutForum_notification_preferencesInput>, UserUncheckedUpdateWithoutForum_notification_preferencesInput>
  }

  export type CourseCategoryJunctionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCategoryInput, CourseCategoryJunctionUncheckedCreateWithoutCategoryInput> | CourseCategoryJunctionCreateWithoutCategoryInput[] | CourseCategoryJunctionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCategoryInput | CourseCategoryJunctionCreateOrConnectWithoutCategoryInput[]
    createMany?: CourseCategoryJunctionCreateManyCategoryInputEnvelope
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
  }

  export type CourseCategoryJunctionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCategoryInput, CourseCategoryJunctionUncheckedCreateWithoutCategoryInput> | CourseCategoryJunctionCreateWithoutCategoryInput[] | CourseCategoryJunctionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCategoryInput | CourseCategoryJunctionCreateOrConnectWithoutCategoryInput[]
    createMany?: CourseCategoryJunctionCreateManyCategoryInputEnvelope
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
  }

  export type CourseCategoryJunctionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCategoryInput, CourseCategoryJunctionUncheckedCreateWithoutCategoryInput> | CourseCategoryJunctionCreateWithoutCategoryInput[] | CourseCategoryJunctionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCategoryInput | CourseCategoryJunctionCreateOrConnectWithoutCategoryInput[]
    upsert?: CourseCategoryJunctionUpsertWithWhereUniqueWithoutCategoryInput | CourseCategoryJunctionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CourseCategoryJunctionCreateManyCategoryInputEnvelope
    set?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    disconnect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    delete?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    update?: CourseCategoryJunctionUpdateWithWhereUniqueWithoutCategoryInput | CourseCategoryJunctionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CourseCategoryJunctionUpdateManyWithWhereWithoutCategoryInput | CourseCategoryJunctionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CourseCategoryJunctionScalarWhereInput | CourseCategoryJunctionScalarWhereInput[]
  }

  export type CourseCategoryJunctionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CourseCategoryJunctionCreateWithoutCategoryInput, CourseCategoryJunctionUncheckedCreateWithoutCategoryInput> | CourseCategoryJunctionCreateWithoutCategoryInput[] | CourseCategoryJunctionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCategoryJunctionCreateOrConnectWithoutCategoryInput | CourseCategoryJunctionCreateOrConnectWithoutCategoryInput[]
    upsert?: CourseCategoryJunctionUpsertWithWhereUniqueWithoutCategoryInput | CourseCategoryJunctionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CourseCategoryJunctionCreateManyCategoryInputEnvelope
    set?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    disconnect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    delete?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    connect?: CourseCategoryJunctionWhereUniqueInput | CourseCategoryJunctionWhereUniqueInput[]
    update?: CourseCategoryJunctionUpdateWithWhereUniqueWithoutCategoryInput | CourseCategoryJunctionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CourseCategoryJunctionUpdateManyWithWhereWithoutCategoryInput | CourseCategoryJunctionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CourseCategoryJunctionScalarWhereInput | CourseCategoryJunctionScalarWhereInput[]
  }

  export type CourseCategoryCreateNestedOneWithoutCoursesInput = {
    create?: XOR<CourseCategoryCreateWithoutCoursesInput, CourseCategoryUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CourseCategoryCreateOrConnectWithoutCoursesInput
    connect?: CourseCategoryWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<CourseCreateWithoutCategoriesInput, CourseUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCategoriesInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseCategoryUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<CourseCategoryCreateWithoutCoursesInput, CourseCategoryUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CourseCategoryCreateOrConnectWithoutCoursesInput
    upsert?: CourseCategoryUpsertWithoutCoursesInput
    connect?: CourseCategoryWhereUniqueInput
    update?: XOR<XOR<CourseCategoryUpdateToOneWithWhereWithoutCoursesInput, CourseCategoryUpdateWithoutCoursesInput>, CourseCategoryUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<CourseCreateWithoutCategoriesInput, CourseUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCategoriesInput
    upsert?: CourseUpsertWithoutCategoriesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCategoriesInput, CourseUpdateWithoutCategoriesInput>, CourseUncheckedUpdateWithoutCategoriesInput>
  }

  export type UserCreateNestedOneWithoutCourse_reviewsInput = {
    create?: XOR<UserCreateWithoutCourse_reviewsInput, UserUncheckedCreateWithoutCourse_reviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourse_reviewsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutCourse_reviewsInput = {
    create?: XOR<CourseCreateWithoutCourse_reviewsInput, CourseUncheckedCreateWithoutCourse_reviewsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourse_reviewsInput
    connect?: CourseWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutCourse_reviewsNestedInput = {
    create?: XOR<UserCreateWithoutCourse_reviewsInput, UserUncheckedCreateWithoutCourse_reviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourse_reviewsInput
    upsert?: UserUpsertWithoutCourse_reviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourse_reviewsInput, UserUpdateWithoutCourse_reviewsInput>, UserUncheckedUpdateWithoutCourse_reviewsInput>
  }

  export type CourseUpdateOneRequiredWithoutCourse_reviewsNestedInput = {
    create?: XOR<CourseCreateWithoutCourse_reviewsInput, CourseUncheckedCreateWithoutCourse_reviewsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourse_reviewsInput
    upsert?: CourseUpsertWithoutCourse_reviewsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCourse_reviewsInput, CourseUpdateWithoutCourse_reviewsInput>, CourseUncheckedUpdateWithoutCourse_reviewsInput>
  }

  export type UserCreateNestedOneWithoutMarketplace_listingsInput = {
    create?: XOR<UserCreateWithoutMarketplace_listingsInput, UserUncheckedCreateWithoutMarketplace_listingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarketplace_listingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMarketplace_listingsNestedInput = {
    create?: XOR<UserCreateWithoutMarketplace_listingsInput, UserUncheckedCreateWithoutMarketplace_listingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarketplace_listingsInput
    upsert?: UserUpsertWithoutMarketplace_listingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMarketplace_listingsInput, UserUpdateWithoutMarketplace_listingsInput>, UserUncheckedUpdateWithoutMarketplace_listingsInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type CourseCategoryJunctionCreateWithoutCourseInput = {
    createdAt?: Date | string | null
    category: CourseCategoryCreateNestedOneWithoutCoursesInput
  }

  export type CourseCategoryJunctionUncheckedCreateWithoutCourseInput = {
    categoryId: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryJunctionCreateOrConnectWithoutCourseInput = {
    where: CourseCategoryJunctionWhereUniqueInput
    create: XOR<CourseCategoryJunctionCreateWithoutCourseInput, CourseCategoryJunctionUncheckedCreateWithoutCourseInput>
  }

  export type CourseCategoryJunctionCreateManyCourseInputEnvelope = {
    data: CourseCategoryJunctionCreateManyCourseInput | CourseCategoryJunctionCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CoursePlannerCreateWithoutCourseInput = {
    id?: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    user: UserCreateNestedOneWithoutCourse_plannersInput
  }

  export type CoursePlannerUncheckedCreateWithoutCourseInput = {
    id?: string
    user_id: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CoursePlannerCreateOrConnectWithoutCourseInput = {
    where: CoursePlannerWhereUniqueInput
    create: XOR<CoursePlannerCreateWithoutCourseInput, CoursePlannerUncheckedCreateWithoutCourseInput>
  }

  export type CoursePlannerCreateManyCourseInputEnvelope = {
    data: CoursePlannerCreateManyCourseInput | CoursePlannerCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type course_reviewsCreateWithoutCoursesInput = {
    id?: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
    users: UserCreateNestedOneWithoutCourse_reviewsInput
  }

  export type course_reviewsUncheckedCreateWithoutCoursesInput = {
    id?: string
    author_id: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsCreateOrConnectWithoutCoursesInput = {
    where: course_reviewsWhereUniqueInput
    create: XOR<course_reviewsCreateWithoutCoursesInput, course_reviewsUncheckedCreateWithoutCoursesInput>
  }

  export type course_reviewsCreateManyCoursesInputEnvelope = {
    data: course_reviewsCreateManyCoursesInput | course_reviewsCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type CourseScheduleCreateWithoutCourseInput = {
    id?: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutCourse_schedulesInput
  }

  export type CourseScheduleUncheckedCreateWithoutCourseInput = {
    id?: string
    user_id: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CourseScheduleCreateOrConnectWithoutCourseInput = {
    where: CourseScheduleWhereUniqueInput
    create: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput>
  }

  export type CourseScheduleCreateManyCourseInputEnvelope = {
    data: CourseScheduleCreateManyCourseInput | CourseScheduleCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseCategoryJunctionUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseCategoryJunctionWhereUniqueInput
    update: XOR<CourseCategoryJunctionUpdateWithoutCourseInput, CourseCategoryJunctionUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseCategoryJunctionCreateWithoutCourseInput, CourseCategoryJunctionUncheckedCreateWithoutCourseInput>
  }

  export type CourseCategoryJunctionUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseCategoryJunctionWhereUniqueInput
    data: XOR<CourseCategoryJunctionUpdateWithoutCourseInput, CourseCategoryJunctionUncheckedUpdateWithoutCourseInput>
  }

  export type CourseCategoryJunctionUpdateManyWithWhereWithoutCourseInput = {
    where: CourseCategoryJunctionScalarWhereInput
    data: XOR<CourseCategoryJunctionUpdateManyMutationInput, CourseCategoryJunctionUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseCategoryJunctionScalarWhereInput = {
    AND?: CourseCategoryJunctionScalarWhereInput | CourseCategoryJunctionScalarWhereInput[]
    OR?: CourseCategoryJunctionScalarWhereInput[]
    NOT?: CourseCategoryJunctionScalarWhereInput | CourseCategoryJunctionScalarWhereInput[]
    courseId?: UuidFilter<"CourseCategoryJunction"> | string
    categoryId?: UuidFilter<"CourseCategoryJunction"> | string
    createdAt?: DateTimeNullableFilter<"CourseCategoryJunction"> | Date | string | null
  }

  export type CoursePlannerUpsertWithWhereUniqueWithoutCourseInput = {
    where: CoursePlannerWhereUniqueInput
    update: XOR<CoursePlannerUpdateWithoutCourseInput, CoursePlannerUncheckedUpdateWithoutCourseInput>
    create: XOR<CoursePlannerCreateWithoutCourseInput, CoursePlannerUncheckedCreateWithoutCourseInput>
  }

  export type CoursePlannerUpdateWithWhereUniqueWithoutCourseInput = {
    where: CoursePlannerWhereUniqueInput
    data: XOR<CoursePlannerUpdateWithoutCourseInput, CoursePlannerUncheckedUpdateWithoutCourseInput>
  }

  export type CoursePlannerUpdateManyWithWhereWithoutCourseInput = {
    where: CoursePlannerScalarWhereInput
    data: XOR<CoursePlannerUpdateManyMutationInput, CoursePlannerUncheckedUpdateManyWithoutCourseInput>
  }

  export type CoursePlannerScalarWhereInput = {
    AND?: CoursePlannerScalarWhereInput | CoursePlannerScalarWhereInput[]
    OR?: CoursePlannerScalarWhereInput[]
    NOT?: CoursePlannerScalarWhereInput | CoursePlannerScalarWhereInput[]
    id?: UuidFilter<"CoursePlanner"> | string
    user_id?: UuidFilter<"CoursePlanner"> | string
    course_id?: UuidFilter<"CoursePlanner"> | string
    requirement_type?: StringNullableFilter<"CoursePlanner"> | string | null
    semester?: StringFilter<"CoursePlanner"> | string
    year?: IntFilter<"CoursePlanner"> | number
    status?: StringNullableFilter<"CoursePlanner"> | string | null
    notes?: StringNullableFilter<"CoursePlanner"> | string | null
    created_at?: DateTimeNullableFilter<"CoursePlanner"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"CoursePlanner"> | Date | string | null
  }

  export type course_reviewsUpsertWithWhereUniqueWithoutCoursesInput = {
    where: course_reviewsWhereUniqueInput
    update: XOR<course_reviewsUpdateWithoutCoursesInput, course_reviewsUncheckedUpdateWithoutCoursesInput>
    create: XOR<course_reviewsCreateWithoutCoursesInput, course_reviewsUncheckedCreateWithoutCoursesInput>
  }

  export type course_reviewsUpdateWithWhereUniqueWithoutCoursesInput = {
    where: course_reviewsWhereUniqueInput
    data: XOR<course_reviewsUpdateWithoutCoursesInput, course_reviewsUncheckedUpdateWithoutCoursesInput>
  }

  export type course_reviewsUpdateManyWithWhereWithoutCoursesInput = {
    where: course_reviewsScalarWhereInput
    data: XOR<course_reviewsUpdateManyMutationInput, course_reviewsUncheckedUpdateManyWithoutCoursesInput>
  }

  export type course_reviewsScalarWhereInput = {
    AND?: course_reviewsScalarWhereInput | course_reviewsScalarWhereInput[]
    OR?: course_reviewsScalarWhereInput[]
    NOT?: course_reviewsScalarWhereInput | course_reviewsScalarWhereInput[]
    id?: UuidFilter<"course_reviews"> | string
    course_id?: UuidFilter<"course_reviews"> | string
    author_id?: UuidFilter<"course_reviews"> | string
    rating?: IntFilter<"course_reviews"> | number
    difficulty?: IntFilter<"course_reviews"> | number
    workload?: IntFilter<"course_reviews"> | number
    content?: StringFilter<"course_reviews"> | string
    created_at?: DateTimeNullableFilter<"course_reviews"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"course_reviews"> | Date | string | null
    overall_rating?: DecimalFilter<"course_reviews"> | Decimal | DecimalJsLike | number | string
  }

  export type CourseScheduleUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseScheduleWhereUniqueInput
    update: XOR<CourseScheduleUpdateWithoutCourseInput, CourseScheduleUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput>
  }

  export type CourseScheduleUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseScheduleWhereUniqueInput
    data: XOR<CourseScheduleUpdateWithoutCourseInput, CourseScheduleUncheckedUpdateWithoutCourseInput>
  }

  export type CourseScheduleUpdateManyWithWhereWithoutCourseInput = {
    where: CourseScheduleScalarWhereInput
    data: XOR<CourseScheduleUpdateManyMutationInput, CourseScheduleUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseScheduleScalarWhereInput = {
    AND?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
    OR?: CourseScheduleScalarWhereInput[]
    NOT?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
    id?: UuidFilter<"CourseSchedule"> | string
    user_id?: UuidFilter<"CourseSchedule"> | string
    course_id?: UuidFilter<"CourseSchedule"> | string
    day?: StringFilter<"CourseSchedule"> | string
    start_time?: StringFilter<"CourseSchedule"> | string
    end_time?: StringFilter<"CourseSchedule"> | string
    created_at?: DateTimeFilter<"CourseSchedule"> | Date | string
    updated_at?: DateTimeFilter<"CourseSchedule"> | Date | string
  }

  export type ForumPostCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutAuthorInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput>
  }

  export type ForumPostCreateManyAuthorInputEnvelope = {
    data: ForumPostCreateManyAuthorInput | ForumPostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ForumCommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    post: ForumPostCreateNestedOneWithoutCommentsInput
    parent?: ForumCommentCreateNestedOneWithoutRepliesInput
    replies?: ForumCommentCreateNestedManyWithoutParentInput
  }

  export type ForumCommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    post_id: string
    parent_id?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    replies?: ForumCommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ForumCommentCreateOrConnectWithoutAuthorInput = {
    where: ForumCommentWhereUniqueInput
    create: XOR<ForumCommentCreateWithoutAuthorInput, ForumCommentUncheckedCreateWithoutAuthorInput>
  }

  export type ForumCommentCreateManyAuthorInputEnvelope = {
    data: ForumCommentCreateManyAuthorInput | ForumCommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ForumLikeCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutLikesInput
  }

  export type ForumLikeUncheckedCreateWithoutUserInput = {
    id?: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumLikeCreateOrConnectWithoutUserInput = {
    where: ForumLikeWhereUniqueInput
    create: XOR<ForumLikeCreateWithoutUserInput, ForumLikeUncheckedCreateWithoutUserInput>
  }

  export type ForumLikeCreateManyUserInputEnvelope = {
    data: ForumLikeCreateManyUserInput | ForumLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ForumViewCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutViewsInput
  }

  export type ForumViewUncheckedCreateWithoutUserInput = {
    id?: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumViewCreateOrConnectWithoutUserInput = {
    where: ForumViewWhereUniqueInput
    create: XOR<ForumViewCreateWithoutUserInput, ForumViewUncheckedCreateWithoutUserInput>
  }

  export type ForumViewCreateManyUserInputEnvelope = {
    data: ForumViewCreateManyUserInput | ForumViewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ForumSavedCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutSaved_byInput
  }

  export type ForumSavedUncheckedCreateWithoutUserInput = {
    id?: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumSavedCreateOrConnectWithoutUserInput = {
    where: ForumSavedWhereUniqueInput
    create: XOR<ForumSavedCreateWithoutUserInput, ForumSavedUncheckedCreateWithoutUserInput>
  }

  export type ForumSavedCreateManyUserInputEnvelope = {
    data: ForumSavedCreateManyUserInput | ForumSavedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ForumNotificationPreferenceCreateWithoutUserInput = {
    id?: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    post: ForumPostCreateNestedOneWithoutNotification_preferencesInput
  }

  export type ForumNotificationPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    post_id: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ForumNotificationPreferenceCreateOrConnectWithoutUserInput = {
    where: ForumNotificationPreferenceWhereUniqueInput
    create: XOR<ForumNotificationPreferenceCreateWithoutUserInput, ForumNotificationPreferenceUncheckedCreateWithoutUserInput>
  }

  export type ForumNotificationPreferenceCreateManyUserInputEnvelope = {
    data: ForumNotificationPreferenceCreateManyUserInput | ForumNotificationPreferenceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseScheduleCreateWithoutUserInput = {
    id?: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
    course: CourseCreateNestedOneWithoutSchedulesInput
  }

  export type CourseScheduleUncheckedCreateWithoutUserInput = {
    id?: string
    course_id: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CourseScheduleCreateOrConnectWithoutUserInput = {
    where: CourseScheduleWhereUniqueInput
    create: XOR<CourseScheduleCreateWithoutUserInput, CourseScheduleUncheckedCreateWithoutUserInput>
  }

  export type CourseScheduleCreateManyUserInputEnvelope = {
    data: CourseScheduleCreateManyUserInput | CourseScheduleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CoursePlannerCreateWithoutUserInput = {
    id?: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course: CourseCreateNestedOneWithoutPlannersInput
  }

  export type CoursePlannerUncheckedCreateWithoutUserInput = {
    id?: string
    course_id: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CoursePlannerCreateOrConnectWithoutUserInput = {
    where: CoursePlannerWhereUniqueInput
    create: XOR<CoursePlannerCreateWithoutUserInput, CoursePlannerUncheckedCreateWithoutUserInput>
  }

  export type CoursePlannerCreateManyUserInputEnvelope = {
    data: CoursePlannerCreateManyUserInput | CoursePlannerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type course_reviewsCreateWithoutUsersInput = {
    id?: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
    courses: CourseCreateNestedOneWithoutCourse_reviewsInput
  }

  export type course_reviewsUncheckedCreateWithoutUsersInput = {
    id?: string
    course_id: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsCreateOrConnectWithoutUsersInput = {
    where: course_reviewsWhereUniqueInput
    create: XOR<course_reviewsCreateWithoutUsersInput, course_reviewsUncheckedCreateWithoutUsersInput>
  }

  export type course_reviewsCreateManyUsersInputEnvelope = {
    data: course_reviewsCreateManyUsersInput | course_reviewsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type marketplace_itemsCreateWithoutUsersInput = {
    id?: string
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: string
    image_url?: string | null
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type marketplace_itemsUncheckedCreateWithoutUsersInput = {
    id?: string
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: string
    image_url?: string | null
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type marketplace_itemsCreateOrConnectWithoutUsersInput = {
    where: marketplace_itemsWhereUniqueInput
    create: XOR<marketplace_itemsCreateWithoutUsersInput, marketplace_itemsUncheckedCreateWithoutUsersInput>
  }

  export type marketplace_itemsCreateManyUsersInputEnvelope = {
    data: marketplace_itemsCreateManyUsersInput | marketplace_itemsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ForumPostWhereUniqueInput
    update: XOR<ForumPostUpdateWithoutAuthorInput, ForumPostUncheckedUpdateWithoutAuthorInput>
    create: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput>
  }

  export type ForumPostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ForumPostWhereUniqueInput
    data: XOR<ForumPostUpdateWithoutAuthorInput, ForumPostUncheckedUpdateWithoutAuthorInput>
  }

  export type ForumPostUpdateManyWithWhereWithoutAuthorInput = {
    where: ForumPostScalarWhereInput
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ForumPostScalarWhereInput = {
    AND?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
    OR?: ForumPostScalarWhereInput[]
    NOT?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
    id?: UuidFilter<"ForumPost"> | string
    title?: StringFilter<"ForumPost"> | string
    content?: StringFilter<"ForumPost"> | string
    author_id?: UuidFilter<"ForumPost"> | string
    category_id?: UuidFilter<"ForumPost"> | string
    status?: StringFilter<"ForumPost"> | string
    created_at?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    notify_on_reply?: BoolFilter<"ForumPost"> | boolean
  }

  export type ForumCommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ForumCommentWhereUniqueInput
    update: XOR<ForumCommentUpdateWithoutAuthorInput, ForumCommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<ForumCommentCreateWithoutAuthorInput, ForumCommentUncheckedCreateWithoutAuthorInput>
  }

  export type ForumCommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ForumCommentWhereUniqueInput
    data: XOR<ForumCommentUpdateWithoutAuthorInput, ForumCommentUncheckedUpdateWithoutAuthorInput>
  }

  export type ForumCommentUpdateManyWithWhereWithoutAuthorInput = {
    where: ForumCommentScalarWhereInput
    data: XOR<ForumCommentUpdateManyMutationInput, ForumCommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ForumCommentScalarWhereInput = {
    AND?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
    OR?: ForumCommentScalarWhereInput[]
    NOT?: ForumCommentScalarWhereInput | ForumCommentScalarWhereInput[]
    id?: UuidFilter<"ForumComment"> | string
    content?: StringFilter<"ForumComment"> | string
    post_id?: UuidFilter<"ForumComment"> | string
    author_id?: UuidFilter<"ForumComment"> | string
    parent_id?: UuidNullableFilter<"ForumComment"> | string | null
    created_at?: DateTimeNullableFilter<"ForumComment"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumComment"> | Date | string | null
    like_count?: IntFilter<"ForumComment"> | number
    dislike_count?: IntFilter<"ForumComment"> | number
  }

  export type ForumLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: ForumLikeWhereUniqueInput
    update: XOR<ForumLikeUpdateWithoutUserInput, ForumLikeUncheckedUpdateWithoutUserInput>
    create: XOR<ForumLikeCreateWithoutUserInput, ForumLikeUncheckedCreateWithoutUserInput>
  }

  export type ForumLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: ForumLikeWhereUniqueInput
    data: XOR<ForumLikeUpdateWithoutUserInput, ForumLikeUncheckedUpdateWithoutUserInput>
  }

  export type ForumLikeUpdateManyWithWhereWithoutUserInput = {
    where: ForumLikeScalarWhereInput
    data: XOR<ForumLikeUpdateManyMutationInput, ForumLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type ForumLikeScalarWhereInput = {
    AND?: ForumLikeScalarWhereInput | ForumLikeScalarWhereInput[]
    OR?: ForumLikeScalarWhereInput[]
    NOT?: ForumLikeScalarWhereInput | ForumLikeScalarWhereInput[]
    id?: UuidFilter<"ForumLike"> | string
    post_id?: UuidFilter<"ForumLike"> | string
    user_id?: UuidFilter<"ForumLike"> | string
    created_at?: DateTimeNullableFilter<"ForumLike"> | Date | string | null
  }

  export type ForumViewUpsertWithWhereUniqueWithoutUserInput = {
    where: ForumViewWhereUniqueInput
    update: XOR<ForumViewUpdateWithoutUserInput, ForumViewUncheckedUpdateWithoutUserInput>
    create: XOR<ForumViewCreateWithoutUserInput, ForumViewUncheckedCreateWithoutUserInput>
  }

  export type ForumViewUpdateWithWhereUniqueWithoutUserInput = {
    where: ForumViewWhereUniqueInput
    data: XOR<ForumViewUpdateWithoutUserInput, ForumViewUncheckedUpdateWithoutUserInput>
  }

  export type ForumViewUpdateManyWithWhereWithoutUserInput = {
    where: ForumViewScalarWhereInput
    data: XOR<ForumViewUpdateManyMutationInput, ForumViewUncheckedUpdateManyWithoutUserInput>
  }

  export type ForumViewScalarWhereInput = {
    AND?: ForumViewScalarWhereInput | ForumViewScalarWhereInput[]
    OR?: ForumViewScalarWhereInput[]
    NOT?: ForumViewScalarWhereInput | ForumViewScalarWhereInput[]
    id?: UuidFilter<"ForumView"> | string
    post_id?: UuidFilter<"ForumView"> | string
    user_id?: UuidFilter<"ForumView"> | string
    created_at?: DateTimeNullableFilter<"ForumView"> | Date | string | null
  }

  export type ForumSavedUpsertWithWhereUniqueWithoutUserInput = {
    where: ForumSavedWhereUniqueInput
    update: XOR<ForumSavedUpdateWithoutUserInput, ForumSavedUncheckedUpdateWithoutUserInput>
    create: XOR<ForumSavedCreateWithoutUserInput, ForumSavedUncheckedCreateWithoutUserInput>
  }

  export type ForumSavedUpdateWithWhereUniqueWithoutUserInput = {
    where: ForumSavedWhereUniqueInput
    data: XOR<ForumSavedUpdateWithoutUserInput, ForumSavedUncheckedUpdateWithoutUserInput>
  }

  export type ForumSavedUpdateManyWithWhereWithoutUserInput = {
    where: ForumSavedScalarWhereInput
    data: XOR<ForumSavedUpdateManyMutationInput, ForumSavedUncheckedUpdateManyWithoutUserInput>
  }

  export type ForumSavedScalarWhereInput = {
    AND?: ForumSavedScalarWhereInput | ForumSavedScalarWhereInput[]
    OR?: ForumSavedScalarWhereInput[]
    NOT?: ForumSavedScalarWhereInput | ForumSavedScalarWhereInput[]
    id?: UuidFilter<"ForumSaved"> | string
    user_id?: UuidFilter<"ForumSaved"> | string
    post_id?: UuidFilter<"ForumSaved"> | string
    created_at?: DateTimeNullableFilter<"ForumSaved"> | Date | string | null
  }

  export type ForumNotificationPreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: ForumNotificationPreferenceWhereUniqueInput
    update: XOR<ForumNotificationPreferenceUpdateWithoutUserInput, ForumNotificationPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<ForumNotificationPreferenceCreateWithoutUserInput, ForumNotificationPreferenceUncheckedCreateWithoutUserInput>
  }

  export type ForumNotificationPreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: ForumNotificationPreferenceWhereUniqueInput
    data: XOR<ForumNotificationPreferenceUpdateWithoutUserInput, ForumNotificationPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type ForumNotificationPreferenceUpdateManyWithWhereWithoutUserInput = {
    where: ForumNotificationPreferenceScalarWhereInput
    data: XOR<ForumNotificationPreferenceUpdateManyMutationInput, ForumNotificationPreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type ForumNotificationPreferenceScalarWhereInput = {
    AND?: ForumNotificationPreferenceScalarWhereInput | ForumNotificationPreferenceScalarWhereInput[]
    OR?: ForumNotificationPreferenceScalarWhereInput[]
    NOT?: ForumNotificationPreferenceScalarWhereInput | ForumNotificationPreferenceScalarWhereInput[]
    id?: UuidFilter<"ForumNotificationPreference"> | string
    post_id?: UuidFilter<"ForumNotificationPreference"> | string
    user_id?: UuidFilter<"ForumNotificationPreference"> | string
    notify_on_reply?: BoolFilter<"ForumNotificationPreference"> | boolean
    created_at?: DateTimeNullableFilter<"ForumNotificationPreference"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"ForumNotificationPreference"> | Date | string | null
  }

  export type CourseScheduleUpsertWithWhereUniqueWithoutUserInput = {
    where: CourseScheduleWhereUniqueInput
    update: XOR<CourseScheduleUpdateWithoutUserInput, CourseScheduleUncheckedUpdateWithoutUserInput>
    create: XOR<CourseScheduleCreateWithoutUserInput, CourseScheduleUncheckedCreateWithoutUserInput>
  }

  export type CourseScheduleUpdateWithWhereUniqueWithoutUserInput = {
    where: CourseScheduleWhereUniqueInput
    data: XOR<CourseScheduleUpdateWithoutUserInput, CourseScheduleUncheckedUpdateWithoutUserInput>
  }

  export type CourseScheduleUpdateManyWithWhereWithoutUserInput = {
    where: CourseScheduleScalarWhereInput
    data: XOR<CourseScheduleUpdateManyMutationInput, CourseScheduleUncheckedUpdateManyWithoutUserInput>
  }

  export type CoursePlannerUpsertWithWhereUniqueWithoutUserInput = {
    where: CoursePlannerWhereUniqueInput
    update: XOR<CoursePlannerUpdateWithoutUserInput, CoursePlannerUncheckedUpdateWithoutUserInput>
    create: XOR<CoursePlannerCreateWithoutUserInput, CoursePlannerUncheckedCreateWithoutUserInput>
  }

  export type CoursePlannerUpdateWithWhereUniqueWithoutUserInput = {
    where: CoursePlannerWhereUniqueInput
    data: XOR<CoursePlannerUpdateWithoutUserInput, CoursePlannerUncheckedUpdateWithoutUserInput>
  }

  export type CoursePlannerUpdateManyWithWhereWithoutUserInput = {
    where: CoursePlannerScalarWhereInput
    data: XOR<CoursePlannerUpdateManyMutationInput, CoursePlannerUncheckedUpdateManyWithoutUserInput>
  }

  export type course_reviewsUpsertWithWhereUniqueWithoutUsersInput = {
    where: course_reviewsWhereUniqueInput
    update: XOR<course_reviewsUpdateWithoutUsersInput, course_reviewsUncheckedUpdateWithoutUsersInput>
    create: XOR<course_reviewsCreateWithoutUsersInput, course_reviewsUncheckedCreateWithoutUsersInput>
  }

  export type course_reviewsUpdateWithWhereUniqueWithoutUsersInput = {
    where: course_reviewsWhereUniqueInput
    data: XOR<course_reviewsUpdateWithoutUsersInput, course_reviewsUncheckedUpdateWithoutUsersInput>
  }

  export type course_reviewsUpdateManyWithWhereWithoutUsersInput = {
    where: course_reviewsScalarWhereInput
    data: XOR<course_reviewsUpdateManyMutationInput, course_reviewsUncheckedUpdateManyWithoutUsersInput>
  }

  export type marketplace_itemsUpsertWithWhereUniqueWithoutUsersInput = {
    where: marketplace_itemsWhereUniqueInput
    update: XOR<marketplace_itemsUpdateWithoutUsersInput, marketplace_itemsUncheckedUpdateWithoutUsersInput>
    create: XOR<marketplace_itemsCreateWithoutUsersInput, marketplace_itemsUncheckedCreateWithoutUsersInput>
  }

  export type marketplace_itemsUpdateWithWhereUniqueWithoutUsersInput = {
    where: marketplace_itemsWhereUniqueInput
    data: XOR<marketplace_itemsUpdateWithoutUsersInput, marketplace_itemsUncheckedUpdateWithoutUsersInput>
  }

  export type marketplace_itemsUpdateManyWithWhereWithoutUsersInput = {
    where: marketplace_itemsScalarWhereInput
    data: XOR<marketplace_itemsUpdateManyMutationInput, marketplace_itemsUncheckedUpdateManyWithoutUsersInput>
  }

  export type marketplace_itemsScalarWhereInput = {
    AND?: marketplace_itemsScalarWhereInput | marketplace_itemsScalarWhereInput[]
    OR?: marketplace_itemsScalarWhereInput[]
    NOT?: marketplace_itemsScalarWhereInput | marketplace_itemsScalarWhereInput[]
    id?: UuidFilter<"marketplace_items"> | string
    title?: StringFilter<"marketplace_items"> | string
    description?: StringFilter<"marketplace_items"> | string
    price?: DecimalFilter<"marketplace_items"> | Decimal | DecimalJsLike | number | string
    category?: StringFilter<"marketplace_items"> | string
    condition?: StringFilter<"marketplace_items"> | string
    image_url?: StringNullableFilter<"marketplace_items"> | string | null
    seller_id?: UuidFilter<"marketplace_items"> | string
    status?: StringFilter<"marketplace_items"> | string
    created_at?: DateTimeNullableFilter<"marketplace_items"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"marketplace_items"> | Date | string | null
  }

  export type CourseCreateWithoutSchedulesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionCreateNestedManyWithoutCourseInput
    planners?: CoursePlannerCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutSchedulesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionUncheckedCreateNestedManyWithoutCourseInput
    planners?: CoursePlannerUncheckedCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseCreateOrConnectWithoutSchedulesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutSchedulesInput, CourseUncheckedCreateWithoutSchedulesInput>
  }

  export type UserCreateWithoutCourse_schedulesInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCourse_schedulesInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutCourse_schedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourse_schedulesInput, UserUncheckedCreateWithoutCourse_schedulesInput>
  }

  export type CourseUpsertWithoutSchedulesInput = {
    update: XOR<CourseUpdateWithoutSchedulesInput, CourseUncheckedUpdateWithoutSchedulesInput>
    create: XOR<CourseCreateWithoutSchedulesInput, CourseUncheckedCreateWithoutSchedulesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutSchedulesInput, CourseUncheckedUpdateWithoutSchedulesInput>
  }

  export type CourseUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUpdateManyWithoutCourseNestedInput
    planners?: CoursePlannerUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUncheckedUpdateManyWithoutCourseNestedInput
    planners?: CoursePlannerUncheckedUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type UserUpsertWithoutCourse_schedulesInput = {
    update: XOR<UserUpdateWithoutCourse_schedulesInput, UserUncheckedUpdateWithoutCourse_schedulesInput>
    create: XOR<UserCreateWithoutCourse_schedulesInput, UserUncheckedCreateWithoutCourse_schedulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourse_schedulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourse_schedulesInput, UserUncheckedUpdateWithoutCourse_schedulesInput>
  }

  export type UserUpdateWithoutCourse_schedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCourse_schedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CourseCreateWithoutPlannersInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsCreateNestedManyWithoutCoursesInput
    schedules?: CourseScheduleCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutPlannersInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionUncheckedCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutCoursesInput
    schedules?: CourseScheduleUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutPlannersInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutPlannersInput, CourseUncheckedCreateWithoutPlannersInput>
  }

  export type UserCreateWithoutCourse_plannersInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCourse_plannersInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutCourse_plannersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourse_plannersInput, UserUncheckedCreateWithoutCourse_plannersInput>
  }

  export type CourseUpsertWithoutPlannersInput = {
    update: XOR<CourseUpdateWithoutPlannersInput, CourseUncheckedUpdateWithoutPlannersInput>
    create: XOR<CourseCreateWithoutPlannersInput, CourseUncheckedCreateWithoutPlannersInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutPlannersInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutPlannersInput, CourseUncheckedUpdateWithoutPlannersInput>
  }

  export type CourseUpdateWithoutPlannersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutCoursesNestedInput
    schedules?: CourseScheduleUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutPlannersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUncheckedUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutCoursesNestedInput
    schedules?: CourseScheduleUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutCourse_plannersInput = {
    update: XOR<UserUpdateWithoutCourse_plannersInput, UserUncheckedUpdateWithoutCourse_plannersInput>
    create: XOR<UserCreateWithoutCourse_plannersInput, UserUncheckedCreateWithoutCourse_plannersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourse_plannersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourse_plannersInput, UserUncheckedUpdateWithoutCourse_plannersInput>
  }

  export type UserUpdateWithoutCourse_plannersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCourse_plannersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ForumPostCreateWithoutCategoryInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutCategoryInput = {
    id?: string
    title: string
    content: string
    author_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutCategoryInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutCategoryInput, ForumPostUncheckedCreateWithoutCategoryInput>
  }

  export type ForumPostCreateManyCategoryInputEnvelope = {
    data: ForumPostCreateManyCategoryInput | ForumPostCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ForumPostWhereUniqueInput
    update: XOR<ForumPostUpdateWithoutCategoryInput, ForumPostUncheckedUpdateWithoutCategoryInput>
    create: XOR<ForumPostCreateWithoutCategoryInput, ForumPostUncheckedCreateWithoutCategoryInput>
  }

  export type ForumPostUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ForumPostWhereUniqueInput
    data: XOR<ForumPostUpdateWithoutCategoryInput, ForumPostUncheckedUpdateWithoutCategoryInput>
  }

  export type ForumPostUpdateManyWithWhereWithoutCategoryInput = {
    where: ForumPostScalarWhereInput
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyWithoutCategoryInput>
  }

  export type UserCreateWithoutForum_postsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutForum_postsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutForum_postsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForum_postsInput, UserUncheckedCreateWithoutForum_postsInput>
  }

  export type ForumCategoryCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    created_at?: Date | string | null
  }

  export type ForumCategoryUncheckedCreateWithoutPostsInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    created_at?: Date | string | null
  }

  export type ForumCategoryCreateOrConnectWithoutPostsInput = {
    where: ForumCategoryWhereUniqueInput
    create: XOR<ForumCategoryCreateWithoutPostsInput, ForumCategoryUncheckedCreateWithoutPostsInput>
  }

  export type ForumCommentCreateWithoutPostInput = {
    id?: string
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    author: UserCreateNestedOneWithoutForum_commentsInput
    parent?: ForumCommentCreateNestedOneWithoutRepliesInput
    replies?: ForumCommentCreateNestedManyWithoutParentInput
  }

  export type ForumCommentUncheckedCreateWithoutPostInput = {
    id?: string
    content: string
    author_id: string
    parent_id?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    replies?: ForumCommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ForumCommentCreateOrConnectWithoutPostInput = {
    where: ForumCommentWhereUniqueInput
    create: XOR<ForumCommentCreateWithoutPostInput, ForumCommentUncheckedCreateWithoutPostInput>
  }

  export type ForumCommentCreateManyPostInputEnvelope = {
    data: ForumCommentCreateManyPostInput | ForumCommentCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ForumLikeCreateWithoutPostInput = {
    id?: string
    created_at?: Date | string | null
    user: UserCreateNestedOneWithoutForum_likesInput
  }

  export type ForumLikeUncheckedCreateWithoutPostInput = {
    id?: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumLikeCreateOrConnectWithoutPostInput = {
    where: ForumLikeWhereUniqueInput
    create: XOR<ForumLikeCreateWithoutPostInput, ForumLikeUncheckedCreateWithoutPostInput>
  }

  export type ForumLikeCreateManyPostInputEnvelope = {
    data: ForumLikeCreateManyPostInput | ForumLikeCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ForumViewCreateWithoutPostInput = {
    id?: string
    created_at?: Date | string | null
    user: UserCreateNestedOneWithoutForum_viewsInput
  }

  export type ForumViewUncheckedCreateWithoutPostInput = {
    id?: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumViewCreateOrConnectWithoutPostInput = {
    where: ForumViewWhereUniqueInput
    create: XOR<ForumViewCreateWithoutPostInput, ForumViewUncheckedCreateWithoutPostInput>
  }

  export type ForumViewCreateManyPostInputEnvelope = {
    data: ForumViewCreateManyPostInput | ForumViewCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostTagCreateWithoutPostInput = {
    id?: string
    tag: string
    created_at?: Date | string | null
  }

  export type ForumPostTagUncheckedCreateWithoutPostInput = {
    id?: string
    tag: string
    created_at?: Date | string | null
  }

  export type ForumPostTagCreateOrConnectWithoutPostInput = {
    where: ForumPostTagWhereUniqueInput
    create: XOR<ForumPostTagCreateWithoutPostInput, ForumPostTagUncheckedCreateWithoutPostInput>
  }

  export type ForumPostTagCreateManyPostInputEnvelope = {
    data: ForumPostTagCreateManyPostInput | ForumPostTagCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ForumSavedCreateWithoutPostInput = {
    id?: string
    created_at?: Date | string | null
    user: UserCreateNestedOneWithoutForum_savedInput
  }

  export type ForumSavedUncheckedCreateWithoutPostInput = {
    id?: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumSavedCreateOrConnectWithoutPostInput = {
    where: ForumSavedWhereUniqueInput
    create: XOR<ForumSavedCreateWithoutPostInput, ForumSavedUncheckedCreateWithoutPostInput>
  }

  export type ForumSavedCreateManyPostInputEnvelope = {
    data: ForumSavedCreateManyPostInput | ForumSavedCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ForumNotificationPreferenceCreateWithoutPostInput = {
    id?: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    user: UserCreateNestedOneWithoutForum_notification_preferencesInput
  }

  export type ForumNotificationPreferenceUncheckedCreateWithoutPostInput = {
    id?: string
    user_id: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ForumNotificationPreferenceCreateOrConnectWithoutPostInput = {
    where: ForumNotificationPreferenceWhereUniqueInput
    create: XOR<ForumNotificationPreferenceCreateWithoutPostInput, ForumNotificationPreferenceUncheckedCreateWithoutPostInput>
  }

  export type ForumNotificationPreferenceCreateManyPostInputEnvelope = {
    data: ForumNotificationPreferenceCreateManyPostInput | ForumNotificationPreferenceCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutForum_postsInput = {
    update: XOR<UserUpdateWithoutForum_postsInput, UserUncheckedUpdateWithoutForum_postsInput>
    create: XOR<UserCreateWithoutForum_postsInput, UserUncheckedCreateWithoutForum_postsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForum_postsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForum_postsInput, UserUncheckedUpdateWithoutForum_postsInput>
  }

  export type UserUpdateWithoutForum_postsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutForum_postsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ForumCategoryUpsertWithoutPostsInput = {
    update: XOR<ForumCategoryUpdateWithoutPostsInput, ForumCategoryUncheckedUpdateWithoutPostsInput>
    create: XOR<ForumCategoryCreateWithoutPostsInput, ForumCategoryUncheckedCreateWithoutPostsInput>
    where?: ForumCategoryWhereInput
  }

  export type ForumCategoryUpdateToOneWithWhereWithoutPostsInput = {
    where?: ForumCategoryWhereInput
    data: XOR<ForumCategoryUpdateWithoutPostsInput, ForumCategoryUncheckedUpdateWithoutPostsInput>
  }

  export type ForumCategoryUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumCategoryUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumCommentUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumCommentWhereUniqueInput
    update: XOR<ForumCommentUpdateWithoutPostInput, ForumCommentUncheckedUpdateWithoutPostInput>
    create: XOR<ForumCommentCreateWithoutPostInput, ForumCommentUncheckedCreateWithoutPostInput>
  }

  export type ForumCommentUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumCommentWhereUniqueInput
    data: XOR<ForumCommentUpdateWithoutPostInput, ForumCommentUncheckedUpdateWithoutPostInput>
  }

  export type ForumCommentUpdateManyWithWhereWithoutPostInput = {
    where: ForumCommentScalarWhereInput
    data: XOR<ForumCommentUpdateManyMutationInput, ForumCommentUncheckedUpdateManyWithoutPostInput>
  }

  export type ForumLikeUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumLikeWhereUniqueInput
    update: XOR<ForumLikeUpdateWithoutPostInput, ForumLikeUncheckedUpdateWithoutPostInput>
    create: XOR<ForumLikeCreateWithoutPostInput, ForumLikeUncheckedCreateWithoutPostInput>
  }

  export type ForumLikeUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumLikeWhereUniqueInput
    data: XOR<ForumLikeUpdateWithoutPostInput, ForumLikeUncheckedUpdateWithoutPostInput>
  }

  export type ForumLikeUpdateManyWithWhereWithoutPostInput = {
    where: ForumLikeScalarWhereInput
    data: XOR<ForumLikeUpdateManyMutationInput, ForumLikeUncheckedUpdateManyWithoutPostInput>
  }

  export type ForumViewUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumViewWhereUniqueInput
    update: XOR<ForumViewUpdateWithoutPostInput, ForumViewUncheckedUpdateWithoutPostInput>
    create: XOR<ForumViewCreateWithoutPostInput, ForumViewUncheckedCreateWithoutPostInput>
  }

  export type ForumViewUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumViewWhereUniqueInput
    data: XOR<ForumViewUpdateWithoutPostInput, ForumViewUncheckedUpdateWithoutPostInput>
  }

  export type ForumViewUpdateManyWithWhereWithoutPostInput = {
    where: ForumViewScalarWhereInput
    data: XOR<ForumViewUpdateManyMutationInput, ForumViewUncheckedUpdateManyWithoutPostInput>
  }

  export type ForumPostTagUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumPostTagWhereUniqueInput
    update: XOR<ForumPostTagUpdateWithoutPostInput, ForumPostTagUncheckedUpdateWithoutPostInput>
    create: XOR<ForumPostTagCreateWithoutPostInput, ForumPostTagUncheckedCreateWithoutPostInput>
  }

  export type ForumPostTagUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumPostTagWhereUniqueInput
    data: XOR<ForumPostTagUpdateWithoutPostInput, ForumPostTagUncheckedUpdateWithoutPostInput>
  }

  export type ForumPostTagUpdateManyWithWhereWithoutPostInput = {
    where: ForumPostTagScalarWhereInput
    data: XOR<ForumPostTagUpdateManyMutationInput, ForumPostTagUncheckedUpdateManyWithoutPostInput>
  }

  export type ForumPostTagScalarWhereInput = {
    AND?: ForumPostTagScalarWhereInput | ForumPostTagScalarWhereInput[]
    OR?: ForumPostTagScalarWhereInput[]
    NOT?: ForumPostTagScalarWhereInput | ForumPostTagScalarWhereInput[]
    id?: UuidFilter<"ForumPostTag"> | string
    post_id?: UuidFilter<"ForumPostTag"> | string
    tag?: StringFilter<"ForumPostTag"> | string
    created_at?: DateTimeNullableFilter<"ForumPostTag"> | Date | string | null
  }

  export type ForumSavedUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumSavedWhereUniqueInput
    update: XOR<ForumSavedUpdateWithoutPostInput, ForumSavedUncheckedUpdateWithoutPostInput>
    create: XOR<ForumSavedCreateWithoutPostInput, ForumSavedUncheckedCreateWithoutPostInput>
  }

  export type ForumSavedUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumSavedWhereUniqueInput
    data: XOR<ForumSavedUpdateWithoutPostInput, ForumSavedUncheckedUpdateWithoutPostInput>
  }

  export type ForumSavedUpdateManyWithWhereWithoutPostInput = {
    where: ForumSavedScalarWhereInput
    data: XOR<ForumSavedUpdateManyMutationInput, ForumSavedUncheckedUpdateManyWithoutPostInput>
  }

  export type ForumNotificationPreferenceUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumNotificationPreferenceWhereUniqueInput
    update: XOR<ForumNotificationPreferenceUpdateWithoutPostInput, ForumNotificationPreferenceUncheckedUpdateWithoutPostInput>
    create: XOR<ForumNotificationPreferenceCreateWithoutPostInput, ForumNotificationPreferenceUncheckedCreateWithoutPostInput>
  }

  export type ForumNotificationPreferenceUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumNotificationPreferenceWhereUniqueInput
    data: XOR<ForumNotificationPreferenceUpdateWithoutPostInput, ForumNotificationPreferenceUncheckedUpdateWithoutPostInput>
  }

  export type ForumNotificationPreferenceUpdateManyWithWhereWithoutPostInput = {
    where: ForumNotificationPreferenceScalarWhereInput
    data: XOR<ForumNotificationPreferenceUpdateManyMutationInput, ForumNotificationPreferenceUncheckedUpdateManyWithoutPostInput>
  }

  export type UserCreateWithoutForum_commentsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutForum_commentsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutForum_commentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForum_commentsInput, UserUncheckedCreateWithoutForum_commentsInput>
  }

  export type ForumPostCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutCommentsInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutCommentsInput, ForumPostUncheckedCreateWithoutCommentsInput>
  }

  export type ForumCommentCreateWithoutRepliesInput = {
    id?: string
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    author: UserCreateNestedOneWithoutForum_commentsInput
    post: ForumPostCreateNestedOneWithoutCommentsInput
    parent?: ForumCommentCreateNestedOneWithoutRepliesInput
  }

  export type ForumCommentUncheckedCreateWithoutRepliesInput = {
    id?: string
    content: string
    post_id: string
    author_id: string
    parent_id?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
  }

  export type ForumCommentCreateOrConnectWithoutRepliesInput = {
    where: ForumCommentWhereUniqueInput
    create: XOR<ForumCommentCreateWithoutRepliesInput, ForumCommentUncheckedCreateWithoutRepliesInput>
  }

  export type ForumCommentCreateWithoutParentInput = {
    id?: string
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    author: UserCreateNestedOneWithoutForum_commentsInput
    post: ForumPostCreateNestedOneWithoutCommentsInput
    replies?: ForumCommentCreateNestedManyWithoutParentInput
  }

  export type ForumCommentUncheckedCreateWithoutParentInput = {
    id?: string
    content: string
    post_id: string
    author_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
    replies?: ForumCommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ForumCommentCreateOrConnectWithoutParentInput = {
    where: ForumCommentWhereUniqueInput
    create: XOR<ForumCommentCreateWithoutParentInput, ForumCommentUncheckedCreateWithoutParentInput>
  }

  export type ForumCommentCreateManyParentInputEnvelope = {
    data: ForumCommentCreateManyParentInput | ForumCommentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutForum_commentsInput = {
    update: XOR<UserUpdateWithoutForum_commentsInput, UserUncheckedUpdateWithoutForum_commentsInput>
    create: XOR<UserCreateWithoutForum_commentsInput, UserUncheckedCreateWithoutForum_commentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForum_commentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForum_commentsInput, UserUncheckedUpdateWithoutForum_commentsInput>
  }

  export type UserUpdateWithoutForum_commentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutForum_commentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ForumPostUpsertWithoutCommentsInput = {
    update: XOR<ForumPostUpdateWithoutCommentsInput, ForumPostUncheckedUpdateWithoutCommentsInput>
    create: XOR<ForumPostCreateWithoutCommentsInput, ForumPostUncheckedCreateWithoutCommentsInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutCommentsInput, ForumPostUncheckedUpdateWithoutCommentsInput>
  }

  export type ForumPostUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumCommentUpsertWithoutRepliesInput = {
    update: XOR<ForumCommentUpdateWithoutRepliesInput, ForumCommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<ForumCommentCreateWithoutRepliesInput, ForumCommentUncheckedCreateWithoutRepliesInput>
    where?: ForumCommentWhereInput
  }

  export type ForumCommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: ForumCommentWhereInput
    data: XOR<ForumCommentUpdateWithoutRepliesInput, ForumCommentUncheckedUpdateWithoutRepliesInput>
  }

  export type ForumCommentUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutForum_commentsNestedInput
    post?: ForumPostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: ForumCommentUpdateOneWithoutRepliesNestedInput
  }

  export type ForumCommentUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
  }

  export type ForumCommentUpsertWithWhereUniqueWithoutParentInput = {
    where: ForumCommentWhereUniqueInput
    update: XOR<ForumCommentUpdateWithoutParentInput, ForumCommentUncheckedUpdateWithoutParentInput>
    create: XOR<ForumCommentCreateWithoutParentInput, ForumCommentUncheckedCreateWithoutParentInput>
  }

  export type ForumCommentUpdateWithWhereUniqueWithoutParentInput = {
    where: ForumCommentWhereUniqueInput
    data: XOR<ForumCommentUpdateWithoutParentInput, ForumCommentUncheckedUpdateWithoutParentInput>
  }

  export type ForumCommentUpdateManyWithWhereWithoutParentInput = {
    where: ForumCommentScalarWhereInput
    data: XOR<ForumCommentUpdateManyMutationInput, ForumCommentUncheckedUpdateManyWithoutParentInput>
  }

  export type ForumPostCreateWithoutLikesInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutLikesInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutLikesInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutForum_likesInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutForum_likesInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutForum_likesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForum_likesInput, UserUncheckedCreateWithoutForum_likesInput>
  }

  export type ForumPostUpsertWithoutLikesInput = {
    update: XOR<ForumPostUpdateWithoutLikesInput, ForumPostUncheckedUpdateWithoutLikesInput>
    create: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutLikesInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutLikesInput, ForumPostUncheckedUpdateWithoutLikesInput>
  }

  export type ForumPostUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutForum_likesInput = {
    update: XOR<UserUpdateWithoutForum_likesInput, UserUncheckedUpdateWithoutForum_likesInput>
    create: XOR<UserCreateWithoutForum_likesInput, UserUncheckedCreateWithoutForum_likesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForum_likesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForum_likesInput, UserUncheckedUpdateWithoutForum_likesInput>
  }

  export type UserUpdateWithoutForum_likesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutForum_likesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ForumPostCreateWithoutTagsInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutTagsInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutTagsInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutTagsInput, ForumPostUncheckedCreateWithoutTagsInput>
  }

  export type ForumPostUpsertWithoutTagsInput = {
    update: XOR<ForumPostUpdateWithoutTagsInput, ForumPostUncheckedUpdateWithoutTagsInput>
    create: XOR<ForumPostCreateWithoutTagsInput, ForumPostUncheckedCreateWithoutTagsInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutTagsInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutTagsInput, ForumPostUncheckedUpdateWithoutTagsInput>
  }

  export type ForumPostUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostCreateWithoutViewsInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutViewsInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutViewsInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutViewsInput, ForumPostUncheckedCreateWithoutViewsInput>
  }

  export type UserCreateWithoutForum_viewsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutForum_viewsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutForum_viewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForum_viewsInput, UserUncheckedCreateWithoutForum_viewsInput>
  }

  export type ForumPostUpsertWithoutViewsInput = {
    update: XOR<ForumPostUpdateWithoutViewsInput, ForumPostUncheckedUpdateWithoutViewsInput>
    create: XOR<ForumPostCreateWithoutViewsInput, ForumPostUncheckedCreateWithoutViewsInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutViewsInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutViewsInput, ForumPostUncheckedUpdateWithoutViewsInput>
  }

  export type ForumPostUpdateWithoutViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutForum_viewsInput = {
    update: XOR<UserUpdateWithoutForum_viewsInput, UserUncheckedUpdateWithoutForum_viewsInput>
    create: XOR<UserCreateWithoutForum_viewsInput, UserUncheckedCreateWithoutForum_viewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForum_viewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForum_viewsInput, UserUncheckedUpdateWithoutForum_viewsInput>
  }

  export type UserUpdateWithoutForum_viewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutForum_viewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ForumPostCreateWithoutSaved_byInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutSaved_byInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutSaved_byInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutSaved_byInput, ForumPostUncheckedCreateWithoutSaved_byInput>
  }

  export type UserCreateWithoutForum_savedInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutForum_savedInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutForum_savedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForum_savedInput, UserUncheckedCreateWithoutForum_savedInput>
  }

  export type ForumPostUpsertWithoutSaved_byInput = {
    update: XOR<ForumPostUpdateWithoutSaved_byInput, ForumPostUncheckedUpdateWithoutSaved_byInput>
    create: XOR<ForumPostCreateWithoutSaved_byInput, ForumPostUncheckedCreateWithoutSaved_byInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutSaved_byInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutSaved_byInput, ForumPostUncheckedUpdateWithoutSaved_byInput>
  }

  export type ForumPostUpdateWithoutSaved_byInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutSaved_byInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutForum_savedInput = {
    update: XOR<UserUpdateWithoutForum_savedInput, UserUncheckedUpdateWithoutForum_savedInput>
    create: XOR<UserCreateWithoutForum_savedInput, UserUncheckedCreateWithoutForum_savedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForum_savedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForum_savedInput, UserUncheckedUpdateWithoutForum_savedInput>
  }

  export type UserUpdateWithoutForum_savedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutForum_savedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ForumPostCreateWithoutNotification_preferencesInput = {
    id?: string
    title: string
    content: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    author: UserCreateNestedOneWithoutForum_postsInput
    category: ForumCategoryCreateNestedOneWithoutPostsInput
    comments?: ForumCommentCreateNestedManyWithoutPostInput
    likes?: ForumLikeCreateNestedManyWithoutPostInput
    views?: ForumViewCreateNestedManyWithoutPostInput
    tags?: ForumPostTagCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutNotification_preferencesInput = {
    id?: string
    title: string
    content: string
    author_id: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
    comments?: ForumCommentUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumLikeUncheckedCreateNestedManyWithoutPostInput
    views?: ForumViewUncheckedCreateNestedManyWithoutPostInput
    tags?: ForumPostTagUncheckedCreateNestedManyWithoutPostInput
    saved_by?: ForumSavedUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutNotification_preferencesInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutNotification_preferencesInput, ForumPostUncheckedCreateWithoutNotification_preferencesInput>
  }

  export type UserCreateWithoutForum_notification_preferencesInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutForum_notification_preferencesInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutForum_notification_preferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForum_notification_preferencesInput, UserUncheckedCreateWithoutForum_notification_preferencesInput>
  }

  export type ForumPostUpsertWithoutNotification_preferencesInput = {
    update: XOR<ForumPostUpdateWithoutNotification_preferencesInput, ForumPostUncheckedUpdateWithoutNotification_preferencesInput>
    create: XOR<ForumPostCreateWithoutNotification_preferencesInput, ForumPostUncheckedCreateWithoutNotification_preferencesInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutNotification_preferencesInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutNotification_preferencesInput, ForumPostUncheckedUpdateWithoutNotification_preferencesInput>
  }

  export type ForumPostUpdateWithoutNotification_preferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutNotification_preferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutForum_notification_preferencesInput = {
    update: XOR<UserUpdateWithoutForum_notification_preferencesInput, UserUncheckedUpdateWithoutForum_notification_preferencesInput>
    create: XOR<UserCreateWithoutForum_notification_preferencesInput, UserUncheckedCreateWithoutForum_notification_preferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForum_notification_preferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForum_notification_preferencesInput, UserUncheckedUpdateWithoutForum_notification_preferencesInput>
  }

  export type UserUpdateWithoutForum_notification_preferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutForum_notification_preferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CourseCategoryJunctionCreateWithoutCategoryInput = {
    createdAt?: Date | string | null
    course: CourseCreateNestedOneWithoutCategoriesInput
  }

  export type CourseCategoryJunctionUncheckedCreateWithoutCategoryInput = {
    courseId: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryJunctionCreateOrConnectWithoutCategoryInput = {
    where: CourseCategoryJunctionWhereUniqueInput
    create: XOR<CourseCategoryJunctionCreateWithoutCategoryInput, CourseCategoryJunctionUncheckedCreateWithoutCategoryInput>
  }

  export type CourseCategoryJunctionCreateManyCategoryInputEnvelope = {
    data: CourseCategoryJunctionCreateManyCategoryInput | CourseCategoryJunctionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CourseCategoryJunctionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CourseCategoryJunctionWhereUniqueInput
    update: XOR<CourseCategoryJunctionUpdateWithoutCategoryInput, CourseCategoryJunctionUncheckedUpdateWithoutCategoryInput>
    create: XOR<CourseCategoryJunctionCreateWithoutCategoryInput, CourseCategoryJunctionUncheckedCreateWithoutCategoryInput>
  }

  export type CourseCategoryJunctionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CourseCategoryJunctionWhereUniqueInput
    data: XOR<CourseCategoryJunctionUpdateWithoutCategoryInput, CourseCategoryJunctionUncheckedUpdateWithoutCategoryInput>
  }

  export type CourseCategoryJunctionUpdateManyWithWhereWithoutCategoryInput = {
    where: CourseCategoryJunctionScalarWhereInput
    data: XOR<CourseCategoryJunctionUpdateManyMutationInput, CourseCategoryJunctionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CourseCategoryCreateWithoutCoursesInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryUncheckedCreateWithoutCoursesInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryCreateOrConnectWithoutCoursesInput = {
    where: CourseCategoryWhereUniqueInput
    create: XOR<CourseCategoryCreateWithoutCoursesInput, CourseCategoryUncheckedCreateWithoutCoursesInput>
  }

  export type CourseCreateWithoutCategoriesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    planners?: CoursePlannerCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsCreateNestedManyWithoutCoursesInput
    schedules?: CourseScheduleCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCategoriesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    planners?: CoursePlannerUncheckedCreateNestedManyWithoutCourseInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutCoursesInput
    schedules?: CourseScheduleUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCategoriesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCategoriesInput, CourseUncheckedCreateWithoutCategoriesInput>
  }

  export type CourseCategoryUpsertWithoutCoursesInput = {
    update: XOR<CourseCategoryUpdateWithoutCoursesInput, CourseCategoryUncheckedUpdateWithoutCoursesInput>
    create: XOR<CourseCategoryCreateWithoutCoursesInput, CourseCategoryUncheckedCreateWithoutCoursesInput>
    where?: CourseCategoryWhereInput
  }

  export type CourseCategoryUpdateToOneWithWhereWithoutCoursesInput = {
    where?: CourseCategoryWhereInput
    data: XOR<CourseCategoryUpdateWithoutCoursesInput, CourseCategoryUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseCategoryUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseUpsertWithoutCategoriesInput = {
    update: XOR<CourseUpdateWithoutCategoriesInput, CourseUncheckedUpdateWithoutCategoriesInput>
    create: XOR<CourseCreateWithoutCategoriesInput, CourseUncheckedCreateWithoutCategoriesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCategoriesInput, CourseUncheckedUpdateWithoutCategoriesInput>
  }

  export type CourseUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    planners?: CoursePlannerUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutCoursesNestedInput
    schedules?: CourseScheduleUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    planners?: CoursePlannerUncheckedUpdateManyWithoutCourseNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutCoursesNestedInput
    schedules?: CourseScheduleUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserCreateWithoutCourse_reviewsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    marketplace_listings?: marketplace_itemsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCourse_reviewsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    marketplace_listings?: marketplace_itemsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutCourse_reviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourse_reviewsInput, UserUncheckedCreateWithoutCourse_reviewsInput>
  }

  export type CourseCreateWithoutCourse_reviewsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionCreateNestedManyWithoutCourseInput
    planners?: CoursePlannerCreateNestedManyWithoutCourseInput
    schedules?: CourseScheduleCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCourse_reviewsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    department: string
    semester: string
    year: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    professorId?: string
    fullCode?: string | null
    concentration_core?: string | null
    concentration_elective?: string | null
    categories?: CourseCategoryJunctionUncheckedCreateNestedManyWithoutCourseInput
    planners?: CoursePlannerUncheckedCreateNestedManyWithoutCourseInput
    schedules?: CourseScheduleUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCourse_reviewsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCourse_reviewsInput, CourseUncheckedCreateWithoutCourse_reviewsInput>
  }

  export type UserUpsertWithoutCourse_reviewsInput = {
    update: XOR<UserUpdateWithoutCourse_reviewsInput, UserUncheckedUpdateWithoutCourse_reviewsInput>
    create: XOR<UserCreateWithoutCourse_reviewsInput, UserUncheckedCreateWithoutCourse_reviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourse_reviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourse_reviewsInput, UserUncheckedUpdateWithoutCourse_reviewsInput>
  }

  export type UserUpdateWithoutCourse_reviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    marketplace_listings?: marketplace_itemsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCourse_reviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    marketplace_listings?: marketplace_itemsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CourseUpsertWithoutCourse_reviewsInput = {
    update: XOR<CourseUpdateWithoutCourse_reviewsInput, CourseUncheckedUpdateWithoutCourse_reviewsInput>
    create: XOR<CourseCreateWithoutCourse_reviewsInput, CourseUncheckedCreateWithoutCourse_reviewsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCourse_reviewsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCourse_reviewsInput, CourseUncheckedUpdateWithoutCourse_reviewsInput>
  }

  export type CourseUpdateWithoutCourse_reviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUpdateManyWithoutCourseNestedInput
    planners?: CoursePlannerUpdateManyWithoutCourseNestedInput
    schedules?: CourseScheduleUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCourse_reviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professorId?: StringFieldUpdateOperationsInput | string
    fullCode?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_core?: NullableStringFieldUpdateOperationsInput | string | null
    concentration_elective?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CourseCategoryJunctionUncheckedUpdateManyWithoutCourseNestedInput
    planners?: CoursePlannerUncheckedUpdateManyWithoutCourseNestedInput
    schedules?: CourseScheduleUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserCreateWithoutMarketplace_listingsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeCreateNestedManyWithoutUserInput
    forum_views?: ForumViewCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutMarketplace_listingsInput = {
    id?: string
    email: string
    name: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    program?: string | null
    forum_posts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forum_comments?: ForumCommentUncheckedCreateNestedManyWithoutAuthorInput
    forum_likes?: ForumLikeUncheckedCreateNestedManyWithoutUserInput
    forum_views?: ForumViewUncheckedCreateNestedManyWithoutUserInput
    forum_saved?: ForumSavedUncheckedCreateNestedManyWithoutUserInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
    course_schedules?: CourseScheduleUncheckedCreateNestedManyWithoutUserInput
    course_planners?: CoursePlannerUncheckedCreateNestedManyWithoutUserInput
    course_reviews?: course_reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutMarketplace_listingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMarketplace_listingsInput, UserUncheckedCreateWithoutMarketplace_listingsInput>
  }

  export type UserUpsertWithoutMarketplace_listingsInput = {
    update: XOR<UserUpdateWithoutMarketplace_listingsInput, UserUncheckedUpdateWithoutMarketplace_listingsInput>
    create: XOR<UserCreateWithoutMarketplace_listingsInput, UserUncheckedCreateWithoutMarketplace_listingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMarketplace_listingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMarketplace_listingsInput, UserUncheckedUpdateWithoutMarketplace_listingsInput>
  }

  export type UserUpdateWithoutMarketplace_listingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutMarketplace_listingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    program?: NullableStringFieldUpdateOperationsInput | string | null
    forum_posts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forum_comments?: ForumCommentUncheckedUpdateManyWithoutAuthorNestedInput
    forum_likes?: ForumLikeUncheckedUpdateManyWithoutUserNestedInput
    forum_views?: ForumViewUncheckedUpdateManyWithoutUserNestedInput
    forum_saved?: ForumSavedUncheckedUpdateManyWithoutUserNestedInput
    forum_notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    course_schedules?: CourseScheduleUncheckedUpdateManyWithoutUserNestedInput
    course_planners?: CoursePlannerUncheckedUpdateManyWithoutUserNestedInput
    course_reviews?: course_reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CourseCategoryJunctionCreateManyCourseInput = {
    categoryId: string
    createdAt?: Date | string | null
  }

  export type CoursePlannerCreateManyCourseInput = {
    id?: string
    user_id: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type course_reviewsCreateManyCoursesInput = {
    id?: string
    author_id: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
  }

  export type CourseScheduleCreateManyCourseInput = {
    id?: string
    user_id: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CourseCategoryJunctionUpdateWithoutCourseInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CourseCategoryUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseCategoryJunctionUncheckedUpdateWithoutCourseInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryJunctionUncheckedUpdateManyWithoutCourseInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CoursePlannerUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutCourse_plannersNestedInput
  }

  export type CoursePlannerUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CoursePlannerUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_reviewsUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    users?: UserUpdateOneRequiredWithoutCourse_reviewsNestedInput
  }

  export type course_reviewsUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsUncheckedUpdateManyWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type CourseScheduleUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCourse_schedulesNestedInput
  }

  export type CourseScheduleUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseScheduleUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostCreateManyAuthorInput = {
    id?: string
    title: string
    content: string
    category_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
  }

  export type ForumCommentCreateManyAuthorInput = {
    id?: string
    content: string
    post_id: string
    parent_id?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
  }

  export type ForumLikeCreateManyUserInput = {
    id?: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumViewCreateManyUserInput = {
    id?: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumSavedCreateManyUserInput = {
    id?: string
    post_id: string
    created_at?: Date | string | null
  }

  export type ForumNotificationPreferenceCreateManyUserInput = {
    id?: string
    post_id: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CourseScheduleCreateManyUserInput = {
    id?: string
    course_id: string
    day: string
    start_time: string
    end_time: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CoursePlannerCreateManyUserInput = {
    id?: string
    course_id: string
    requirement_type?: string | null
    semester: string
    year: number
    status?: string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type course_reviewsCreateManyUsersInput = {
    id?: string
    course_id: string
    rating: number
    difficulty: number
    workload: number
    content: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    overall_rating: Decimal | DecimalJsLike | number | string
  }

  export type marketplace_itemsCreateManyUsersInput = {
    id?: string
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: string
    image_url?: string | null
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ForumPostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    category?: ForumCategoryUpdateOneRequiredWithoutPostsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ForumCommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    post?: ForumPostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: ForumCommentUpdateOneWithoutRepliesNestedInput
    replies?: ForumCommentUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    replies?: ForumCommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
  }

  export type ForumLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type ForumLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumViewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutViewsNestedInput
  }

  export type ForumViewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumViewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumSavedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutSaved_byNestedInput
  }

  export type ForumSavedUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumSavedUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumNotificationPreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: ForumPostUpdateOneRequiredWithoutNotification_preferencesNestedInput
  }

  export type ForumNotificationPreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumNotificationPreferenceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseScheduleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type CourseScheduleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseScheduleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursePlannerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutPlannersNestedInput
  }

  export type CoursePlannerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CoursePlannerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    requirement_type?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_reviewsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses?: CourseUpdateOneRequiredWithoutCourse_reviewsNestedInput
  }

  export type course_reviewsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type course_reviewsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    difficulty?: IntFieldUpdateOperationsInput | number
    workload?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    overall_rating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type marketplace_itemsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type marketplace_itemsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type marketplace_itemsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostCreateManyCategoryInput = {
    id?: string
    title: string
    content: string
    author_id: string
    status?: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notify_on_reply?: boolean
  }

  export type ForumPostUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutForum_postsNestedInput
    comments?: ForumCommentUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUpdateManyWithoutPostNestedInput
    views?: ForumViewUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    comments?: ForumCommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumLikeUncheckedUpdateManyWithoutPostNestedInput
    views?: ForumViewUncheckedUpdateManyWithoutPostNestedInput
    tags?: ForumPostTagUncheckedUpdateManyWithoutPostNestedInput
    saved_by?: ForumSavedUncheckedUpdateManyWithoutPostNestedInput
    notification_preferences?: ForumNotificationPreferenceUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ForumCommentCreateManyPostInput = {
    id?: string
    content: string
    author_id: string
    parent_id?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
  }

  export type ForumLikeCreateManyPostInput = {
    id?: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumViewCreateManyPostInput = {
    id?: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumPostTagCreateManyPostInput = {
    id?: string
    tag: string
    created_at?: Date | string | null
  }

  export type ForumSavedCreateManyPostInput = {
    id?: string
    user_id: string
    created_at?: Date | string | null
  }

  export type ForumNotificationPreferenceCreateManyPostInput = {
    id?: string
    user_id: string
    notify_on_reply?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ForumCommentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutForum_commentsNestedInput
    parent?: ForumCommentUpdateOneWithoutRepliesNestedInput
    replies?: ForumCommentUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    replies?: ForumCommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
  }

  export type ForumLikeUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutForum_likesNestedInput
  }

  export type ForumLikeUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumLikeUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumViewUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutForum_viewsNestedInput
  }

  export type ForumViewUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumViewUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostTagUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostTagUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumPostTagUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumSavedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutForum_savedNestedInput
  }

  export type ForumSavedUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumSavedUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumNotificationPreferenceUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutForum_notification_preferencesNestedInput
  }

  export type ForumNotificationPreferenceUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumNotificationPreferenceUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    notify_on_reply?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ForumCommentCreateManyParentInput = {
    id?: string
    content: string
    post_id: string
    author_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    like_count?: number
    dislike_count?: number
  }

  export type ForumCommentUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutForum_commentsNestedInput
    post?: ForumPostUpdateOneRequiredWithoutCommentsNestedInput
    replies?: ForumCommentUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
    replies?: ForumCommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ForumCommentUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    post_id?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    like_count?: IntFieldUpdateOperationsInput | number
    dislike_count?: IntFieldUpdateOperationsInput | number
  }

  export type CourseCategoryJunctionCreateManyCategoryInput = {
    courseId: string
    createdAt?: Date | string | null
  }

  export type CourseCategoryJunctionUpdateWithoutCategoryInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CourseCategoryJunctionUncheckedUpdateWithoutCategoryInput = {
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCategoryJunctionUncheckedUpdateManyWithoutCategoryInput = {
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}